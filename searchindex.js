Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/avif/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/http/index.html","kvstore/index.html","kvstore/memory/index.html","kvstore/neuroglancer_uint64_sharded/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[409,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[17,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[18,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/http":[19,0,1,"json-KvStoreUrl/http","http:// and https:// KvStore URL scheme"],"KvStoreUrl/memory":[21,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/avif":[4,0,1,"json-driver/avif",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[5,0,1,"json-driver/jpeg",""],"driver/json":[8,0,1,"json-driver/json",""],"driver/n5":[9,0,1,"json-driver/n5",""],"driver/n5/Codec":[9,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[9,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[9,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[9,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[9,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[9,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[9,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[10,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[10,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/png":[6,0,1,"json-driver/png",""],"driver/stack":[11,0,1,"json-driver/stack",""],"driver/zarr":[12,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[12,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[12,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[12,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[12,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[12,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[17,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[18,0,1,"json-kvstore/gcs",""],"kvstore/http":[19,0,1,"json-kvstore/http",""],"kvstore/memory":[21,0,1,"json-kvstore/memory",""],"kvstore/neuroglancer_uint64_sharded":[22,0,1,"json-kvstore/neuroglancer_uint64_sharded","JSON specification of neuroglancer_uint64_sharded key-value store."],"kvstore/neuroglancer_uint64_sharded/ShardingSpec":[22,0,1,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec","Sharding metadata"],ARCHFLAGS:[16,9,1,"-",""],BAZELISK_HOME:[16,9,1,"-",""],CacheRevalidationBound:[7,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[409,0,1,"json-ChunkLayout",""],Codec:[409,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[13,9,1,"-",""],IndexDomain:[15,0,1,"json-IndexDomain",""],IndexInterval:[15,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[15,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[7,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[20,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[20,0,1,"json-KvStoreUrl","URL representation of a key-value store."],MACOSX_DEPLOYMENT_TARGET:[16,9,1,"-",""],OutputIndexMap:[15,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[13,9,1,"-",""],Schema:[409,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[16,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[16,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[16,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[16,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[13,9,1,"-",""],TENSORSTORE_CA_PATH:[13,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[13,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[13,9,1,"-",""],TENSORSTORE_GCS_REQUEST_CONCURRENCY:[13,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[16,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[16,9,1,"-",""],TensorStore:[410,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[409,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[13,9,1,"-",""],dtype:[410,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[13,9,1,"-",""],https_proxy:[13,9,1,"-",""],no_proxy:[13,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[409,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[409,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[409,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[409,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[409,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[409,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[18,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{initial_delay:[18,1,2,"json-Context.gcs_request_retries.initial_delay",""],max_delay:[18,1,2,"json-Context.gcs_request_retries.max_delay",""],max_retries:[18,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[18,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"Context.http_request_concurrency":{limit:[19,1,2,"json-Context.http_request_concurrency.limit",""]},"Context.http_request_retries":{initial_delay:[19,1,2,"json-Context.http_request_retries.initial_delay",""],max_delay:[19,1,2,"json-Context.http_request_retries.max_delay",""],max_retries:[19,1,2,"json-Context.http_request_retries.max_retries",""]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[1,1,2,"json-driver/array.data_copy_concurrency",""],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/avif":{cache_pool:[4,1,2,"json-driver/avif.cache_pool",""],context:[4,1,2,"json-driver/avif.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/avif.data_copy_concurrency",""],driver:[4,1,2,"json-driver/avif.driver",""],dtype:[4,1,2,"json-driver/avif.dtype",""],kvstore:[4,1,2,"json-driver/avif.kvstore",""],quantizer:[4,1,2,"json-driver/avif.quantizer",""],rank:[4,1,2,"json-driver/avif.rank",""],schema:[4,1,2,"json-driver/avif.schema","Specifies constraints on the schema."],speed:[4,1,2,"json-driver/avif.speed",""],transform:[4,1,2,"json-driver/avif.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[5,1,2,"json-driver/jpeg.cache_pool",""],context:[5,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[5,1,2,"json-driver/jpeg.driver",""],dtype:[5,1,2,"json-driver/jpeg.dtype",""],kvstore:[5,1,2,"json-driver/jpeg.kvstore",""],quality:[5,1,2,"json-driver/jpeg.quality",""],rank:[5,1,2,"json-driver/jpeg.rank",""],schema:[5,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[8,1,2,"json-driver/json.cache_pool",""],context:[8,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[8,1,2,"json-driver/json.data_copy_concurrency",""],driver:[8,1,2,"json-driver/json.driver",""],dtype:[8,1,2,"json-driver/json.dtype",""],json_pointer:[8,1,2,"json-driver/json.json_pointer",""],kvstore:[8,1,2,"json-driver/json.kvstore",""],path:[8,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/json.rank",""],recheck_cached_data:[8,1,2,"json-driver/json.recheck_cached_data",""],schema:[8,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{assume_metadata:[9,1,2,"json-driver/n5.assume_metadata",""],cache_pool:[9,1,2,"json-driver/n5.cache_pool",""],context:[9,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[9,1,2,"json-driver/n5.create",""],data_copy_concurrency:[9,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[9,1,2,"json-driver/n5.delete_existing",""],driver:[9,1,2,"json-driver/n5.driver",""],dtype:[9,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[9,1,2,"json-driver/n5.kvstore",""],metadata:[9,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[9,1,2,"json-driver/n5.open",""],path:[9,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[9,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[9,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[9,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[9,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[9,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[9,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[9,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[9,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[9,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[9,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[9,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[9,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[9,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[9,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[9,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[9,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[9,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[9,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[9,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[9,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[9,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[9,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[9,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[9,1,2,"json-driver/n5/Compression/xz.preset",""],type:[9,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{assume_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.assume_metadata",""],cache_pool:[10,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[10,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[10,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[10,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[10,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[10,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[10,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[10,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[10,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[10,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[10,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/png":{cache_pool:[6,1,2,"json-driver/png.cache_pool",""],compression_level:[6,1,2,"json-driver/png.compression_level",""],context:[6,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[6,1,2,"json-driver/png.data_copy_concurrency",""],driver:[6,1,2,"json-driver/png.driver",""],dtype:[6,1,2,"json-driver/png.dtype",""],kvstore:[6,1,2,"json-driver/png.kvstore",""],rank:[6,1,2,"json-driver/png.rank",""],schema:[6,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[11,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[11,1,2,"json-driver/stack.data_copy_concurrency",""],driver:[11,1,2,"json-driver/stack.driver",""],dtype:[11,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[11,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[11,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[11,1,2,"json-driver/stack.schema","Specifies constraints on the schema."],transform:[11,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/zarr":{assume_metadata:[12,1,2,"json-driver/zarr.assume_metadata",""],cache_pool:[12,1,2,"json-driver/zarr.cache_pool",""],context:[12,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[12,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[12,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[12,1,2,"json-driver/zarr.delete_existing",""],driver:[12,1,2,"json-driver/zarr.driver",""],dtype:[12,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[12,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[12,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[12,1,2,"json-driver/zarr.kvstore",""],metadata:[12,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[12,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[12,1,2,"json-driver/zarr.open",""],path:[12,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[12,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[12,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[12,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[12,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[12,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[12,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[12,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[12,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[12,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[12,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[12,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[12,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[12,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[12,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[12,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[12,1,2,"json-driver/zarr/Codec.driver",""],filters:[12,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[12,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[12,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[12,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[12,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[12,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[12,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[12,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[12,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[12,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[12,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[17,1,2,"json-kvstore/file.context",""],driver:[17,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[17,1,2,"json-kvstore/file.file_io_concurrency",""],path:[17,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[18,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[18,1,2,"json-kvstore/gcs.context",""],driver:[18,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[18,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[18,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[18,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[18,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/http":{base_url:[19,1,2,"json-kvstore/http.base_url","Base URL."],context:[19,1,2,"json-kvstore/http.context",""],driver:[19,1,2,"json-kvstore/http.driver",""],headers:[19,1,2,"json-kvstore/http.headers","Additional HTTP headers to send with every request."],http_request_concurrency:[19,1,2,"json-kvstore/http.http_request_concurrency",""],http_request_retries:[19,1,2,"json-kvstore/http.http_request_retries",""],path:[19,1,2,"json-kvstore/http.path","Path relative to base_url."]},"kvstore/memory":{atomic:[21,1,2,"json-kvstore/memory.atomic",""],context:[21,1,2,"json-kvstore/memory.context",""],driver:[21,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[21,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[21,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded":{base:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.base","Underlying key-value store."],cache_pool:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.cache_pool",""],context:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.context",""],data_copy_concurrency:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.data_copy_concurrency",""],driver:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.driver",""],metadata:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.metadata","Specifies the sharding format."],path:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded.path","Key prefix within the key-value store."]},"kvstore/neuroglancer_uint64_sharded/ShardingSpec":{"@type":[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.@type",""],data_encoding:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[22,1,2,"json-kvstore/neuroglancer_uint64_sharded/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"tensorstore.ChunkLayout":{"__init__(components)":[40,3,1,"","Constructs from component parts."],"__init__(json)":[41,3,1,"","Constructs from the JSON representation."],Grid:[25,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[39,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[42,5,1,"","Chunk grid used by the codec."],grid_origin:[43,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[44,5,1,"","Soft constraints on the grid origin."],inner_order:[45,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[46,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[47,5,1,"","Alias for rank."],rank:[48,5,1,"","Number of dimensions in the index space."],read_chunk:[49,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[50,5,1,"","Chunk offset and shape for efficient reads."],to_json:[51,3,1,"","Converts to the JSON representation."],update:[52,3,1,"","Adds additional constraints."],write_chunk:[53,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[54,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[27,3,1,"","Constructs a chunk grid."],"__init__(json)":[28,3,1,"","Constructs from the JSON representation."],__eq__:[26,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[29,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[30,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[31,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[32,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[33,5,1,"","Alias for rank."],rank:[34,5,1,"","Number of dimensions, or None if unspecified."],shape:[35,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[36,5,1,"","Soft constraints on chunk shape."],to_json:[37,3,1,"","Converts to the JSON representation."],update:[38,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[27,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[27,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[27,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[27,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[27,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[27,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[27,4,2,"p-rank","Specifies the number of dimensions."],shape:[27,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[27,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[38,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[38,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[38,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[38,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[38,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[38,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[38,4,2,"p-rank","Specifies the number of dimensions."],shape:[38,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[38,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[40,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[40,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[40,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[40,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[40,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[40,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[40,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[40,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[40,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[40,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[40,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[40,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[40,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[40,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[40,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[40,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[40,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[40,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[40,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[40,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[40,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[40,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[40,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[40,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[40,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[40,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[40,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[40,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[40,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[40,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[40,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[40,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[40,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[40,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[52,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[52,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[52,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[52,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[52,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[52,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[52,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[52,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[52,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[52,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[52,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[52,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[52,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[52,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[52,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[52,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[52,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[52,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[52,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[52,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[52,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[52,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[52,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[52,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[52,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[52,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[52,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[52,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[52,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[52,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[52,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[52,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[52,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[52,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[56,3,1,"","Constructs from the JSON representation."],to_json:[57,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[65,3,1,"","Constructs a default context."],"__init__(json)":[66,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[67,3,1,"","Constructs a context from a parsed spec."],Resource:[59,2,1,"","Handle to a context resource."],Spec:[61,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[64,3,1,"","Creates or retrieves the context resource for the given key."],parent:[68,5,1,"","Parent context from which this context inherits."],spec:[69,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[60,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[62,3,1,"","Creates a context specification from its JSON representation."],to_json:[63,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[63,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[64,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[66,4,2,"p-json","JSON representation of the context."],parent:[66,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[67,4,2,"p-parent","Parent context from which to inherit."],spec:[67,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[71,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[72,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[74,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[75,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[76,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[77,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[73,3,1,"","Compares for equality with another interval."],__iter__:[78,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[79,3,1,"","Size of the interval, equivalent to size."],__repr__:[80,3,1,"","Returns the string representation as a Python expression."],__str__:[81,3,1,"","Returns the string representation of the interval."],empty:[82,5,1,"","Returns True if size is zero."],exclusive_max:[83,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[84,5,1,"","Exclusive lower bound of the interval."],finite:[85,5,1,"","Indicates if the interval is finite."],hull:[86,3,1,"","Hull with another Dim."],implicit_lower:[87,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[88,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[89,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[90,5,1,"","Inclusive lower bound of the interval."],intersect:[91,3,1,"","Intersect with another Dim."],label:[92,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[93,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[74,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[74,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[74,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[74,4,2,"p-inclusive_min","Inclusive lower bound."],label:[74,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[75,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[75,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[75,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[75,4,2,"p-inclusive_min","Inclusive lower bound."],label:[75,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[76,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[76,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[76,4,2,"p-inclusive_min","Inclusive lower bound."],label:[76,4,2,"p-label","Dimension label."],size:[76,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[77,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[77,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[77,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[86,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[91,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[95,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[96,5,1,"","Extracts the diagonal of the selected dimensions."],label:[97,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[98,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[99,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[100,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[101,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[102,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[103,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[104,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[97,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[99,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[100,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[101,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[102,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[103,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[106,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[107,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[108,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[109,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[110,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[111,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[112,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[113,3,1,"","Unregisters a previously-registered callback."],result:[114,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[106,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[106,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[111,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[111,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[114,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[114,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[117,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[118,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[119,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[120,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[121,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[122,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[123,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[124,3,1,"","Constructs an index domain from its JSON representation."],__len__:[125,3,1,"","Returns the number of dimensions (rank)."],__repr__:[126,3,1,"","Returns the string representation."],exclusive_max:[127,5,1,"","Exclusive upper bound of the domain."],hull:[128,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[129,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[130,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[131,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[132,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[133,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[134,3,1,"","Intersects with another domain."],labels:[135,5,1,"","Dimension labels for each dimension."],ndim:[136,5,1,"","Alias for rank."],origin:[137,5,1,"","Inclusive lower bound of the domain."],rank:[138,5,1,"","Number of dimensions in the index space."],shape:[139,5,1,"","Shape of the domain."],size:[140,5,1,"","Total number of elements in the domain."],to_json:[141,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[118,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[119,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[120,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[121,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[122,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[122,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[122,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[122,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[122,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[122,4,2,"p-labels","Dimension labels."],rank:[122,4,2,"p-rank","Number of dimensions."],shape:[122,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[123,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[128,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[134,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[145,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[146,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[147,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[148,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[149,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[150,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[151,3,1,"","Constructs an index transform from its JSON representation."],T:[143,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[144,3,1,"","Maps an input index vector to an output index vector."],__repr__:[152,3,1,"","Returns the string representation."],domain:[153,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[154,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[155,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[156,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[157,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[158,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[159,5,1,"","Dimension labels for each input dimension."],input_origin:[160,5,1,"","Inclusive lower bound of the input domain."],input_rank:[161,5,1,"","Rank of the input space."],input_shape:[162,5,1,"","Shape of the input domain."],ndim:[163,5,1,"","Rank of the input space, alias for input_rank."],oindex:[164,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[165,5,1,"","Inclusive lower bound of the domain."],output:[166,5,1,"","Output index maps."],output_rank:[167,5,1,"","Rank of the output space."],shape:[168,5,1,"","Shape of the domain."],size:[169,5,1,"","Total number of elements in the domain."],to_json:[170,3,1,"","Returns the JSON representation of the transform."],vindex:[171,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[144,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[149,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[149,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[149,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[149,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[149,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[149,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[149,4,2,"p-input_rank","Number of input dimensions."],input_shape:[149,4,2,"p-input_shape","Size for each input dimension."],output:[149,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[150,4,2,"p-domain","The domain of the index transform."],output:[150,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[174,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[181,2,1,"","Specifies the result of a read operation."],Spec:[186,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[196,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[201,3,1,"","Synchronously deletes a single key."],__getitem__:[202,3,1,"","Synchronously reads the value of a single key."],__repr__:[203,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[204,3,1,"","Synchronously writes the value of a single key."],copy:[205,3,1,"","Returns a copy of the key-value store."],delete_range:[206,3,1,"","Deletes a key range."],list:[207,3,1,"","Lists the keys in the key-value store."],open:[208,3,1,"","Opens a key-value store."],path:[209,5,1,"","Path prefix within the base key-value store."],read:[210,3,1,"","Reads the value of a single key."],spec:[211,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[212,5,1,"","Transaction bound to this key-value store."],url:[213,5,1,"","URL representation of the key-value store specification."],with_transaction:[214,3,1,"","Returns a transaction-bound view of this key-value store."],write:[215,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[175,3,1,"","Compares with another range for equality."],__init__:[176,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[177,3,1,"","Returns a copy of the range."],empty:[178,5,1,"","Indicates if the range contains no keys."],exclusive_max:[179,5,1,"","Exclusive upper bound of the range."],inclusive_min:[180,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[176,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[176,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[182,3,1,"","Constructs a read result."],stamp:[183,5,1,"","Generation and timestamp associated with the value."],state:[184,5,1,"","Indicates the interpretation of value."],value:[185,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[187,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[188,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[189,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[190,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[191,3,1,"","Returns a copy of the key-value store spec."],path:[192,5,1,"","Path prefix within the base key-value store."],to_json:[193,3,1,"","Converts to the JSON representation."],update:[194,3,1,"","Modifies a spec."],url:[195,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[194,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[194,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[194,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[197,3,1,"","Compares two timestamped storage generations for equality."],__init__:[198,3,1,"","Constructs from a storage generation and time."],generation:[199,5,1,"","Identifies a specific version of a key-value store entry."],time:[200,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[201,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[202,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[204,4,2,"p-key","Key to write/delete."],value:[204,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[206,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[207,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[207,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[208,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[208,4,2,"p-spec","Key-value store spec to open."],transaction:[208,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[210,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[210,4,2,"p-key","The key to read."],staleness_bound:[210,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[211,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[211,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[215,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[215,4,2,"p-key","Key to write/delete."],value:[215,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[217,3,1,"","Constructs a constant map."],"__init__(index_array)":[218,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[219,3,1,"","Constructs a single input dimension map."],index_array:[220,5,1,"",""],index_range:[221,5,1,"",""],input_dimension:[222,5,1,"",""],method:[223,5,1,"",""],offset:[224,5,1,"",""],stride:[225,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[227,3,1,"",""],__len__:[228,3,1,"","Returns the output rank."],rank:[229,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[231,3,1,"",""],__str__:[232,3,1,"","name(self: handle) -> str"],array:[233,6,1,"",""],constant:[234,6,1,"",""],name:[235,5,1,"",""],single_input_dimension:[236,6,1,"",""],value:[237,5,1,"",""]},"tensorstore.Promise":{"new":[239,3,1,"","Creates a linked promise and future pair."],set_exception:[240,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[241,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[245,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[246,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[247,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[248,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[249,3,1,"","Constructs from component parts."],"__init__(json)":[250,3,1,"","Constructs from its JSON representation."],T:[243,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[244,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[251,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[252,5,1,"","Chunk layout constraints specified by the schema."],codec:[253,5,1,"","Codec constraints specified by the schema."],copy:[254,3,1,"","Returns a copy of the schema."],dimension_units:[255,5,1,"","Physical units of each dimension of the domain."],domain:[256,5,1,"","Domain of the schema, or None if unspecified."],dtype:[257,5,1,"","Data type, or None if unspecified."],fill_value:[258,5,1,"","Fill value specified by the schema."],ndim:[259,5,1,"","Alias for rank."],oindex:[260,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[261,5,1,"","Inclusive lower bound of the domain."],rank:[262,5,1,"","Rank of the schema, or None if unspecified."],shape:[263,5,1,"","Shape of the domain."],size:[264,5,1,"","Total number of elements in the domain."],to_json:[265,3,1,"","Converts to the JSON representation."],update:[266,3,1,"","Adds additional constraints."],vindex:[267,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[245,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[248,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[249,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[249,4,2,"p-codec","Constrains the codec."],dimension_units:[249,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[249,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[249,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[249,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[249,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[249,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[249,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[266,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[266,4,2,"p-codec","Constrains the codec."],dimension_units:[266,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[266,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[266,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[266,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[266,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[266,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[266,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[271,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[272,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[273,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[274,3,1,"","Transforms the spec using an explicit index transform."],T:[269,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[270,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[275,3,1,"","Constructs from the JSON representation."],__repr__:[276,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[277,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[278,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[279,3,1,"","Returns a copy of the spec."],dimension_units:[280,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[281,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[282,5,1,"","Data type, or None if unspecified."],fill_value:[283,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[284,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[285,5,1,"","Alias for rank."],oindex:[286,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[287,5,1,"","Inclusive lower bound of the domain."],rank:[288,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[289,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[290,5,1,"","Shape of the domain."],size:[291,5,1,"","Total number of elements in the domain."],to_json:[292,3,1,"","Converts to the JSON representation."],transform:[293,5,1,"","The index transform, or None if unspecified."],update:[294,3,1,"","Adds additional constraints or changes the open mode."],vindex:[295,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[271,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[274,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{assume_metadata:[294,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[294,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[294,4,2,"p-codec","Constrains the codec."],context:[294,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[294,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[294,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[294,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[294,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[294,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[294,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[294,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[294,4,2,"p-open","Allow opening an existing TensorStore."],rank:[294,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[294,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[294,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[294,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[294,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[299,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[300,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[301,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[302,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[303,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[304,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[305,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[306,3,1,"","Synchronously writes using an explicit index transform."],T:[297,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[298,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[307,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[308,5,1,"","Chunk layout of the TensorStore."],codec:[309,5,1,"","Data codec spec."],dimension_units:[310,5,1,"","Physical units of each dimension of the domain."],domain:[311,5,1,"","Domain of the array."],dtype:[312,5,1,"","Data type of the array."],fill_value:[313,5,1,"","Fill value for positions not yet written."],kvstore:[314,5,1,"","Associated key-value store used as the underlying storage."],mode:[315,5,1,"","Read/write mode."],ndim:[316,5,1,"","Alias for rank."],oindex:[317,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[319,5,1,"","Inclusive lower bound of the domain."],rank:[320,5,1,"","Number of dimensions in the domain."],read:[321,3,1,"","Reads the data within the current domain."],readable:[322,5,1,"","Indicates if reading is supported."],resolve:[323,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[324,5,1,"","Schema of this TensorStore."],shape:[325,5,1,"","Shape of the domain."],size:[326,5,1,"","Total number of elements in the domain."],spec:[327,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[328,5,1,"","Associated transaction used for read/write operations."],vindex:[329,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[331,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[332,5,1,"","Indicates if writing is supported."],write:[333,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[299,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[302,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[303,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[303,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[305,4,2,"p-indices","NumPy-style indexing terms."],source:[305,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[306,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[306,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[318,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[318,4,2,"p-indices","NumPy-style indexing terms."],source:[318,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[321,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{assume_metadata:[327,4,2,"p-assume_metadata","Skip reading the metadata if possible."],create:[327,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[327,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[327,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[327,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[327,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[327,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[330,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[330,4,2,"p-indices","NumPy-style indexing terms."],source:[330,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[333,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[335,3,1,"","Creates a new transaction."],abort:[336,3,1,"","Aborts the transaction."],aborted:[337,5,1,"","Indicates whether the transaction has been aborted."],atomic:[338,5,1,"","Indicates whether the transaction is atomic."],commit_async:[339,3,1,"","Asynchronously commits the transaction."],commit_started:[340,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[341,3,1,"","Synchronously commits the transaction."],future:[342,5,1,"","Commit result future."],open:[343,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[346,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[347,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[348,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[349,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[350,3,1,"","Constructs a unit from a string."],__eq__:[345,3,1,"","Compares two units for equality."],__mul__:[351,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[352,3,1,"","Divides this unit by the specified divisor."],base_unit:[353,5,1,"","Base unit from which this unit is derived."],multiplier:[354,5,1,"","Multiplier for the base_unit."],to_json:[355,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[357,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[358,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[360,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[362,3,1,"",""],cancel:[363,3,1,"",""],cancelled:[364,3,1,"",""],commit:[365,5,1,"",""],copy:[366,5,1,"",""],done:[367,3,1,"",""],exception:[368,3,1,"",""],remove_done_callback:[369,3,1,"",""],result:[370,3,1,"",""]},"tensorstore.array":{array:[371,4,2,"p-array","Source array."],context:[371,4,2,"p-context","Context to use."],dtype:[371,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[378,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[383,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[384,3,1,"","Construct by name."],__call__:[382,3,1,"","Construct a scalar instance of this data type"],name:[385,5,1,"",""],numpy_dtype:[386,5,1,"",""],to_json:[387,3,1,"",""],type:[388,5,1,"",""]},"tensorstore.open":{assume_metadata:[399,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[399,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[399,4,2,"p-codec","Constrains the codec."],context:[399,4,2,"p-context","Shared resource context."],create:[399,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[399,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[399,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[399,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[399,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[399,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[399,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[399,4,2,"p-open","Allow opening an existing TensorStore."],rank:[399,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[399,4,2,"p-read","Allow read access."],schema:[399,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[399,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[399,4,2,"p-spec","TensorStore Spec to open."],transaction:[399,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[399,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[406,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[406,4,2,"p-context","Shared resource context."],dimension_units:[406,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[406,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[406,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[406,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[406,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[406,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[406,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[406,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[406,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[406,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[409,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[409,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[409,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[409,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[409,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[409,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],rank:[409,1,2,"json-ChunkLayout.rank","Number of dimensions."],read_chunk:[409,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[409,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[409,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[18,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[18,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[18,0,1,"json-Context.gcs_user_project",""],http_request_concurrency:[19,0,1,"json-Context.http_request_concurrency",""],http_request_retries:[19,0,1,"json-Context.http_request_retries",""],memory_key_value_store:[21,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[15,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[15,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[15,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[15,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[15,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[15,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[15,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[15,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[15,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[15,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[15,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[15,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[15,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{assume_metadata:[7,1,2,"json-KeyValueStoreBackedChunkDriver.assume_metadata",""],cache_pool:[7,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[7,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[7,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[7,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[7,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[7,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[7,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[7,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[7,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[7,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[20,1,2,"json-KvStore.context",""],driver:[20,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[20,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[15,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[15,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[15,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[15,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[15,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[409,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[409,1,2,"json-Schema.codec",""],dimension_units:[409,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[409,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[409,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[409,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[409,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[410,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[410,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[410,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[410,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[410,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[410,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[410,1,2,"json-dtype.byte","Single byte."],"char":[410,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[410,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[410,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[410,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[410,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[410,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[410,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[410,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[410,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[410,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[410,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[410,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[410,1,2,"json-dtype.json","JSON value."],string:[410,1,2,"json-dtype.string","Byte string."],uint16:[410,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[410,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[410,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[410,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[410,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[379,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[380,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[24,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[55,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[58,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[70,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[94,2,1,"","Specifies an advanced indexing operation."],Future:[105,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[115,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[116,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[142,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[172,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[173,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[216,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[226,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[230,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[238,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[242,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[268,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[296,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[334,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[344,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[356,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[359,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[361,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[371,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[372,8,1,"","bfloat16 floating-point data type."],bool:[373,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[374,7,1,"","Returns a read/write view as the specified data type."],complex128:[375,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[376,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[377,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[381,2,1,"","TensorStore data type representation."],float16:[389,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[390,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[391,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[392,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[393,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[394,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[395,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[396,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[397,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[398,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[399,7,1,"","Opens or creates a TensorStore from a Spec."],string:[400,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[401,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[402,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[403,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[404,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[405,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[406,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,22,23,40,45,47,48,51,52,76,80,86,90,95,96,97,98,99,100,101,102,103,104,105,117,118,119,120,121,122,123,128,133,144,145,146,147,148,149,150,151,153,164,170,171,207,216,217,218,219,230,234,245,246,247,248,249,250,252,256,260,262,265,267,271,272,273,274,281,286,289,292,293,294,295,296,299,300,301,302,303,304,305,306,307,308,309,311,317,318,321,324,327,329,330,333,334,355,373,374,378,398,399,406,407,408,409,410],"05":16,"098695591f3a":16,"0x":408,"0x8":[399,408],"1":[0,1,3,9,10,11,12,15,16,18,19,22,23,40,45,47,48,51,52,70,71,72,78,83,84,86,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,105,117,118,119,120,121,127,128,131,132,133,134,135,137,139,140,143,144,145,146,147,148,149,150,151,156,157,158,159,160,164,167,170,171,218,219,230,236,243,245,246,247,248,249,250,252,255,260,262,265,267,269,273,274,280,289,292,293,296,297,299,300,301,302,304,305,306,307,308,309,310,316,317,318,320,324,327,329,330,333,334,344,348,350,373,374,378,392,398,399,406,407,408,409,410],"10":[12,15,16,17,68,69,70,71,72,73,74,75,76,81,83,84,85,89,90,95,100,101,102,117,124,133,145,170,246,247,260,267,272,273,286,295,296,298,300,301,303,304,305,317,318,321,329,330,333,399,407],"100":[5,9,10,12,15,50,51,54,125,136,138,245,246,247,248,256,260,267,277,285,288,289,292,293,294,309,310,313,314,324,406,408],"1000":[9,10,12,245,246,247,248,260,267,281,289,296,308,399,408],"10000":10,"1000000":51,"10000000":[0,60,64,68,69,399],"100000000":[0,406,408],"1000000000":[10,22],"100_000_000":408,"100kb":9,"100mb":[406,408],"100x100x1":408,"101":406,"102":[9,12,308,399,406,408],"1020":10,"103":406,"104":406,"1049":296,"105":[50,54,292,293,406],"106":406,"11":[12,16,75,83,95,118,151,218,219,407],"1113":10,"1132030694":408,"1161117856":408,"1194100437":408,"12":[12,15,16,95,100,101,118,321,407],"1264":10,"128":[9,12],"13":[12,101,118,170,219],"14":[12,16,102,121],"1408314276":408,"1414":399,"15":[10,16,76,102,399,407,408],"15000":408,"15100":408,"159":[9,10,12],"16":[16,23,101,393,401,410],"17":[16,100,124,151],"18":101,"1gb":22,"1nm":[10,409],"1s":[18,19],"2":[1,3,8,9,10,11,12,15,16,19,22,23,47,48,51,70,78,95,96,97,98,99,100,101,102,103,104,105,117,118,119,120,121,122,127,128,129,130,131,132,133,134,135,137,139,140,144,145,146,147,149,150,151,154,155,156,157,158,159,160,164,170,171,218,219,230,233,245,246,247,248,249,250,252,254,260,262,265,267,274,285,288,289,293,296,301,302,304,305,306,307,308,316,317,318,320,327,329,330,333,334,351,352,374,378,392,398,399,406,407,408,409],"20":[10,15,85,95,100,101,102,247,260,267,273,286,295,298,301,317,329],"200":[9,10,12,50,51,54,125,136,138,245,246,247,248,256,260,267,277,280,285,288,289,292,293,294,310,314],"2000":[9,10,12,245,246,247,248,260,267,281,289,308,399],"20000":[296,408],"2000000":[9,10,12],"2019":16,"2030":10,"2048":10,"206":[50,54],"207":[50,54],"20base":19,"20data":19,"21":[16,407],"23":101,"25":102,"28":101,"29":16,"3":[1,3,4,5,6,9,10,11,12,15,16,19,22,47,48,70,78,86,91,93,95,96,97,98,99,100,101,102,103,104,105,106,117,118,119,120,121,122,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,167,170,171,218,244,245,246,247,248,249,250,254,255,257,259,260,262,265,266,267,273,274,286,289,295,301,302,304,306,307,316,317,320,329,330,334,345,346,347,348,349,351,352,353,354,355,374,378,398,399,406,407,408],"30":[10,95,311],"300":[9,10,12,50,54,125,136,138,245,246,247,248,256,260,267,277,280,289,294],"3000":[9,10,12,245,246,247,248,260,267,281,289,308,399],"300000":350,"30037":16,"3040":10,"307":[50,54],"32":[1,2,3,7,9,10,11,12,13,15,18,19,23,394,395,402,409,410],"34432":[10,399,408],"34452":10,"357":407,"37":16,"39552":[10,399,408],"39582":10,"3e5":350,"3nm":[255,345,355],"4":[0,1,3,9,10,11,12,15,71,78,84,89,95,98,100,101,102,103,104,117,119,120,121,127,128,129,130,131,132,133,134,135,137,139,140,145,149,150,151,153,154,155,156,157,158,159,160,161,162,163,167,170,248,255,274,302,305,306,316,320,330,334,350,374,399,406,407,408,409],"40":[9,10],"40000":10,"40nm":10,"41408":[399,408],"42":[8,12,106,244,258,283,296,303,313,324,333,334,399,406],"43":334,"44":334,"4443":18,"45":334,"4611686018427387903":[23,89,90,392],"4611686018427387904":[83,84],"48":16,"486000":409,"4_4_40":10,"4nm":[10,255,350,409],"5":[1,9,11,12,15,16,50,54,71,72,73,74,75,76,78,80,81,83,84,85,86,87,88,89,90,91,93,95,98,99,100,101,102,103,104,117,118,119,120,121,122,123,127,128,129,130,131,132,133,134,135,137,139,140,145,146,148,150,151,153,154,155,156,157,158,159,160,161,162,163,167,217,218,219,238,240,241,245,246,247,248,251,260,267,271,272,273,274,286,292,293,295,296,298,299,300,301,302,303,304,305,306,309,310,316,317,318,320,321,324,327,329,330,333,334,346,347,348,349,352,354,374,398,399,406,407,408,409],"50":[311,406],"500":[9,10,12],"50000":10,"5000000":[66,68,69],"512":10,"51508":10,"51548":10,"5813054053":408,"5e":409,"5nm":[310,351,353,354],"6":[1,3,4,9,10,11,12,15,16,50,54,72,78,95,98,99,100,101,102,104,117,118,119,120,121,123,127,128,129,130,133,134,145,147,150,154,155,156,164,171,245,246,247,271,272,273,296,299,300,301,302,303,304,305,306,316,318,320,330,333,334,399,406,407,408,409],"60":[140,271,272,299,300,303,304,329,409],"62":[15,23,70,392],"632":10,"64":[9,10,12,15,22,23,399,403,408,410],"6654436a307a":16,"6901":8,"7":[15,16,50,54,93,95,100,117,118,121,124,131,133,145,147,149,150,151,157,164,170,171,218,219,260,267,286,295,317,329,351,407],"70":[271,272,273,274,286,295,298,299,300,301,302,303,304,305,306,311,312,317,318,321,327,329,330,333],"707":399,"7230":19,"75":[5,10],"754":[23,389,390,391,410],"77":[18,19],"79":[9,10,12],"7nm":352,"8":[0,10,11,15,16,22,23,95,99,100,101,117,118,121,124,127,133,145,147,148,149,151,156,164,170,171,245,260,267,271,286,295,296,299,303,305,310,317,318,321,329,330,333,396,399,404,407,408,410],"80":[271,272,273,274,286,295,298,299,300,301,302,303,304,305,306,311,312,317,318,321,327,329,330,333,408],"8000":19,"8080":19,"81":10,"82":408,"83":[16,408],"8_8_8":10,"8nm":310,"9":[3,9,10,12,15,16,73,95,117,121,133,145,219,245,246,271,272,299,300,303,304,305,399,407,408,409],"90":409,"9223372036854775807":93,"9223372036854775808":409,"9801a2c5d6c6":16,"99":408,"9m":409,"abstract":[14,23,115,142,172],"boolean":[7,9,10,12,21,23,98,164,260,286,317,318,373,410],"break":12,"byte":[0,9,12,22,23,173,174,181,185,196,199,202,207,356,357,359,360,400,410],"case":[3,12,13,15,16,18,19,99,100,101,102,117,133,142,145,176,179,210,302,407,409],"char":410,"class":[23,25,55,59,61,70,94,105,115,116,123,142,172,174,181,186,196,216,226,230,238,242,268,296,334,344,356,359,361,377,381,407],"default":[0,1,4,5,6,7,8,9,10,11,12,13,15,16,18,19,22,58,63,65,66,67,74,75,76,94,95,106,122,142,147,149,173,194,208,211,242,247,268,273,294,296,301,305,327,377,399,406,407,409],"do":[1,2,3,4,5,6,7,8,9,10,11,12,15,22,407,410],"export":16,"final":[10,40,52],"float":[23,25,27,29,30,38,40,52,105,111,114,196,198,200,210,344,346,348,349,351,352,354,356,358,361,368,370,372,389,390,391,406,409,410],"function":[3,15,22,23,116,406,408],"import":[22,408],"int":[23,24,25,27,31,32,33,34,35,36,38,40,43,44,45,46,47,48,52,70,72,74,75,76,79,83,84,89,90,93,94,99,100,101,102,105,113,116,119,122,125,127,131,132,136,137,138,139,140,142,144,149,156,157,158,160,161,162,163,165,167,168,169,207,216,217,218,219,222,224,225,226,227,228,229,230,231,237,242,249,259,261,262,263,264,266,268,285,287,288,290,291,294,296,316,319,320,325,326,361,369,377,379,380,392,399,406,407],"long":11,"new":[0,1,2,3,4,5,6,7,8,11,14,15,23,66,67,95,96,97,99,100,101,102,109,116,120,121,173,194,211,215,238,239,240,241,245,246,247,248,249,252,255,260,266,267,271,272,273,274,286,294,295,309,324,327,334,335,398,406,407,408,409,410],"null":[0,10,12,400,405,409],"public":[18,408],"return":[3,7,8,9,10,12,15,23,59,60,61,63,64,65,66,67,70,80,81,82,95,97,98,99,100,101,102,103,104,105,106,111,114,116,119,120,121,125,126,141,142,144,152,170,173,174,177,186,187,189,190,191,202,203,205,206,207,210,214,215,226,228,229,242,245,246,247,248,251,252,254,260,267,268,271,272,273,274,276,279,286,288,295,296,298,299,300,301,302,307,314,315,321,327,331,333,339,341,371,374,379,380,399,406,409],"static":[173,208,238,239],"transient":[18,19,21],"true":[7,8,9,10,12,21,65,70,71,72,73,74,75,76,77,80,82,85,87,88,95,109,129,130,154,155,178,193,194,211,238,240,241,294,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,345,399,407,408],"while":[3,9,10,12,15,16,19,40,45,52,201,204,298,344,400,405,406,407,408,409],A:[0,9,10,12,17,95,103,210,238,249,255,266,294,310,321,344,377,399,406,407,409],As:[9,12,15,95,119,176,179,372,407],At:[15,122,149,407],By:[12,15,16,173,208,327,399,406],For:[3,8,9,10,11,12,14,15,16,18,19,50,54,99,118,142,298,333,361,406,409],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,20,21,22,40,45,46,50,52,54,78,83,84,89,90,93,96,97,99,100,101,102,103,105,106,108,111,114,117,120,122,133,145,149,150,194,201,202,204,206,207,210,215,245,246,247,248,249,260,266,267,271,272,273,274,286,294,295,314,327,333,334,350,359,360,399,406,407,409,410],In:[3,12,13,15,18,19,20,21,73,133,176,180,302,334,344,361,407,408,409],It:[1,3,4,5,6,7,8,9,10,11,12,15,16,21,22,95,117,145,294,344,399,407,409],No:[9,12],On:[12,13,16,18,117,145],One:[0,3,7,9,12,410],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,40,50,52,54,64,70,86,91,96,97,99,100,101,102,105,111,114,115,116,117,128,133,134,142,145,148,150,173,187,194,201,202,204,206,210,211,214,215,244,245,249,255,266,268,270,271,293,294,299,310,311,313,327,331,333,334,343,344,361,399,400,405,406,407,409,410],There:[16,397,400,405,408,410],To:[3,7,9,10,12,14,16,18,65,187,208,294,301,327,399,406,407],With:[7,8,9,10,12],_:10,__add__:[186,187],__array__:[296,298,321],__call__:[142,144,381,382],__contains__:[70,71,72],__delitem__:[173,201,202,204,210,215],__eq__:[24,25,26,39,70,73,174,175,196,197,242,244,268,270,344,345],__getitem__:[58,64,94,95,98,104,116,117,118,119,120,121,142,145,146,147,148,164,171,173,201,202,204,210,226,227,242,245,246,247,248,260,267,268,271,272,273,274,286,295,296,299,300,301,302,304,317,329,377],__index__:407,__iter__:[70,78],__len__:[70,79,116,125,226,228],__mul__:[344,351],__repr__:[70,80,116,126,142,152,173,186,189,203,242,251,268,276],__setitem__:[173,201,202,204,210,215,296,303,304,305,306,318,330],__str__:[70,81,230,232],__truediv__:[186,187,190,344,352],_arrai:15,_bit:22,_dimens:15,_origin:15,_rank:15,_shape:15,a1:15,a2:15,aa:206,abc:[17,187,190,191,193,194,205,208,211,284,314],abort:[23,210,334,336,337,339,341,342,343],abov:[15,83,89,93,95,407],absolut:19,abstracteventloop:[106,406],access:[8,9,10,12,14,15,17,18,19,20,45,46,252,361,399,407,408],accomplish:333,accord:[9,10,12,15,16,117,145,173,174,176,180],account:[18,50,54,73,409],achiev:[9,12],acid:14,acknowledg:333,actual:[133,173,201,204,206,215,249,266,294,301,333,399,407,409],ad:[16,18,96,97,98,99,100,101,102,103,104,171,267,295,329,330],adapt:1,add:[16,24,25,38,52,95,242,266,268,294,407],add_done_callback:[105,107,112,361,362],addit:[3,7,8,9,10,12,13,15,16,18,19,20,22,24,25,38,52,73,94,95,186,190,242,249,266,268,294,334,343,344,361,399,406,407,409],addition:[15,16,70,194,208,255,294,334,406,407],address:13,advanc:[14,23,94,407],advantag:[14,333],advis:10,affect:[16,94,100,101,102,118,121,252,333,377,406,407,409],after:[7,8,9,10,12,16,210,249,266,294,333,350,361,399,406,407,409],ag:210,against:409,alia:[23,24,25,33,47,116,132,136,142,154,155,156,157,158,159,160,162,163,242,259,268,285,296,316,398],align:[16,117,145,245,271,299,303,330,333,409],all:[0,3,7,9,10,11,12,13,14,15,19,20,21,23,40,50,52,54,95,99,100,101,102,103,122,142,149,207,211,249,266,294,302,321,327,333,334,399,406,407,409,410],all_proxi:13,allow:[0,11,12,15,16,17,18,19,95,294,305,306,327,333,334,399,409],allus:18,along:[10,249,255,266,294,310,399,406,409],alreadi:[7,9,10,12,15,16,108,194,208,249,266,294,334,336,339,340,399,406],also:[1,2,3,7,9,10,11,12,14,15,16,17,40,52,70,73,94,95,99,100,101,102,173,208,249,266,294,305,314,333,334,361,372,399,406,407,408,409,410],altern:[13,333,407],alwai:[3,7,8,9,10,12,95,99,303,304,305,306,318,330,407,409],among:3,amount:[94,99,207,377,407],amplif:[22,409],an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,23,50,54,70,77,92,94,95,96,99,100,101,105,106,108,115,116,117,118,121,122,123,124,133,142,144,145,149,150,151,173,176,179,180,186,190,199,201,202,204,207,208,210,215,216,218,226,230,238,242,245,248,249,255,266,268,271,274,294,296,298,299,302,303,305,306,318,327,330,333,334,341,344,361,371,372,377,381,383,392,397,406,407,408,409,410],analog:14,ancestor:8,ani:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,18,19,23,24,25,28,37,40,41,50,51,52,54,55,56,57,58,59,60,61,62,63,66,95,98,102,104,105,111,116,117,120,124,133,141,142,145,151,164,170,171,173,186,187,188,193,194,201,202,204,206,208,210,211,215,238,239,242,250,260,265,267,268,270,275,277,278,280,281,283,286,289,292,294,295,301,303,305,306,311,317,318,321,327,329,330,333,334,343,344,347,355,399,406,407,408,409,410],anoth:[0,70,71,73,86,91,116,117,128,134,142,145,148,174,175,242,244,268,270,406,407],api:[1,13,14,18],append:[19,186,187,201,202,204,210,215],appl:16,appli:[0,1,2,3,7,8,9,10,11,12,13,15,19,40,52,94,95,98,104,116,118,142,146,147,164,171,247,260,267,273,286,295,300,311,317,318,377,399,407,409,410],applic:[16,18,309,313,406,409],application_default_credenti:18,appropri:[18,406],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:12,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,23,27,38,40,50,52,54,63,73,95,96,98,103,104,116,117,118,121,145,164,171,172,173,207,208,210,249,255,260,266,267,270,276,277,278,280,281,283,286,289,294,295,305,317,318,329,330,333,334,344,372,399,400,405,406,407,409,410],arbitrari:[9,15,19,23,397,406,407],arch:16,archflag:16,architectur:16,archiv:16,aren:16,arg0:[226,227,381,382],arg:407,argument:407,arithmet:3,arm64:16,arr:133,arrai:[2,3,4,5,6,7,8,11,14,15,19,20,23,94,98,104,105,118,121,133,142,147,149,151,164,171,216,218,230,233,242,247,258,260,267,268,273,276,283,286,294,295,296,298,301,302,303,304,305,306,307,311,312,313,316,317,318,320,321,327,329,330,333,334,371,372,374,377,406,408,409,410],arrang:333,array_lik:[23,95,216,218,220,242,249,258,266,268,283,294,296,298,303,304,305,306,313,318,321,330,333,371,399,406,407],ascii:410,aspect:[25,27,29,30,38,40,52,409],aspect_ratio:[9,10,12,25,27,29,38,40,52,409],aspect_ratio_soft_constraint:[25,27,30,38,40,52,409],assert:[68,106,244,270,392],assign:[9,10,15,303,304,305,306,318,330,406,407,408],associ:[70,106,181,183,185,202,210,215,268,284,294,296,314,328,339,399],assum:[7,8,9,10,12,15,294,327,399,409],assume_metadata:[7,9,10,12,294,327],astyp:[296,307],async:[106,334,406,408],asynchron:[14,105,106,107,108,109,110,111,112,114,115,238,296,303,304,305,306,318,321,330,333,334,339,361,408],asyncio:[105,106,108,333,406,408],atom:[8,14,21,334,335,338,406],attempt:[8,18,19,399,406,407],attribut:[8,9,407],augment:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,410],auth:18,authent:[0,13],author:[13,18,19],automat:[1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,112,296,298,334,399,409,410],avail:[0,13,16,356,357,372],averag:3,avif:[7,410],avoid:[10,12,106,117,145,399,407],await:[105,106,173,203,205,206,208,209,210,211,213,214,215,296,298,299,300,301,302,308,309,310,311,312,313,314,317,321,324,327,329,333,334,374,399,406,407,408],awar:[12,407],ax:[9,293,299,300],b1:12,b:[8,16,73,103,117,145,148,173,178,182,191,199,201,202,204,205,206,207,208,210,214,215,244,254,270,279,399,407],back:[1,4,5,6,9,10,11,12,14,17,20,334,408],backoff:[18,19],backward:[7,8,9,10,12,94,100,377,407],bandwidth:14,base:[1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,22,23,115,172,173,186,189,192,203,209,242,244,251,268,270,276,294,307,327,344,346,349,353,374,375,376,379,380,399,407,409,410],base_unit:[344,346,348,350,353,354,409],base_url:19,basic:407,bazel:16,bazel_cach:16,bazel_tool:16,bazelisk:16,bazelisk_hom:16,bazelrc:16,bdist_wheel:16,bear:10,bearer:19,becaus:[8,10,333,406,407],becom:[111,114,206,333,342],been:[12,15,105,109,110,249,266,284,294,311,333,334,336,337,339,342,343,399,406],befor:[7,9,10,12,210,294,327,399],begin:[19,95,105,112,407],behav:118,behavior:[13,15,16,21,95,117,145,210,321,333,407],being:[7,8,9,10,12,16,210,334,406],below:[15,84,90,93,407],best:[9,10,12],better:[298,406],between:[15,18,399,406],bfloat16:[12,23,372,410],big:[9,12,22,410],bill:18,binari:16,binary16:[23,389,410],binary32:[23,390,410],binary64:[23,391,410],bind:[16,194,208,211,294,327,406],bit:[9,12,15,22,23,393,394,395,396,401,402,403,404,410],block:[3,9,10,12,17,106,111,114,201,202,204,298,303,304,305,306,318,321,330,333,334,406,409],blocksiz:[9,12,296,299,300,301,302,309,317,324,327,329,334,399,408],blosc:[9,12,16,296,299,300,301,302,309,317,324,327,329,399,409],blosclz:[9,12],bool:[3,12,23,24,25,26,37,39,40,52,55,57,59,60,61,63,70,71,72,73,74,75,76,77,82,85,87,88,95,105,108,109,110,116,122,129,130,142,149,154,155,173,174,175,178,186,193,194,196,197,211,242,244,265,268,270,292,294,296,322,323,327,332,334,335,337,338,340,343,344,345,361,363,364,367,373,399,407,410],bool_:[23,373],boringssl:16,both:[7,9,10,12,15,40,52,117,145,249,266,294,399,406,409],bound:[3,7,9,10,11,12,15,19,23,70,73,74,75,76,77,83,84,86,87,88,89,90,91,95,96,98,99,102,104,116,117,122,127,128,129,130,131,132,133,134,137,142,145,147,149,151,154,155,156,157,158,160,164,165,171,173,174,176,179,180,194,208,210,211,212,214,242,249,261,266,268,270,276,287,294,296,311,314,319,323,327,331,356,358,399,406,407,409],boundari:409,box:[116,128],broadcast:[12,95,104,171,245,249,266,267,271,294,295,299,303,305,306,313,318,329,330,333,399,407,409],broader:406,brotli:16,browser:19,bsd:13,bucket:[2,3,4,5,6,8,10,12,18,22,195,209,213,399,408],buffer:[3,12,406],bug:16,build:14,build_def:16,build_doc:16,build_ext:16,built:[13,16,372,407],bundl:[13,16],bz2:12,bzip2:[9,12,16],bzl:16,c16:12,c8:12,c:[1,14,17,40,45,52,95,103,206,277,289,296,301,302,317,321,327,329,399,407,409],c_rehash:13,cach:[0,7,8,9,10,12,14,16,22,23,58,210,211,296,321,323,327,333,356,357,358,399,408],cache_pool:[0,4,5,6,7,8,9,10,12,22,60,64,66,68,69,276,296,299,300,301,302,317,327,329,333,399,406,408],cacherevalidationbound:[7,8,9,10,12],cafil:[18,19],call:[65,95,105,106,109,112,120,201,202,204,210,240,248,252,301,321,333,336,339,406,407],callabl:[105,107,113,361,362,369,406],callback:[23,107,113,356,359,361,362,369,406],can:[7,9,10,12,13,14,15,16,18,133,207,245,249,255,266,271,294,299,327,333,334,356,357,399,406,407,408,409],cancel:[105,108,109,110,333,361,363,364],cancellederror:[108,109],cannot:[94,95,248,334],canon:409,capabl:[12,407],capath:[18,19],captur:[194,211,294,327],care:[10,399],cartesian:116,cast:[7,23,307,374,410],caus:[11,12,407],cc:206,cd:16,cdot:15,cert:[13,18,19],certain:[15,20],certif:16,chain:[95,407],chang:[15,16,94,97,210,268,294,334,377,407],channel:[10,399,408],charact:[16,19,410],characterist:399,check:[7,9,10,12,70,71,72,339,407],child:[68,69],choic:22,choos:409,chosen:[3,9,10,12,399],chunk:[14,22,23,25,26,27,29,30,31,32,35,36,38,39,40,42,45,49,50,52,53,54,242,249,252,266,268,277,289,294,296,301,302,308,317,327,329,333,399,406],chunk_aspect_ratio:[9,10,12,40,52,399],chunk_aspect_ratio_soft_constraint:[40,52],chunk_el:[9,12,40,52,399],chunk_elements_soft_constraint:[40,52],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,12,242,245,246,247,248,249,250,252,260,262,265,266,267,268,277,289,294,296,308,324,399,406,409,410],chunk_shap:[9,12,40,52,399],chunk_shape_soft_constraint:[40,52],chunk_siz:[10,399,408],chunklayout:[9,10,12,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,242,245,246,247,248,249,252,260,262,265,266,267,268,277,294,296,308,399,406,409],chunkss:409,circumst:7,cl:16,clang:16,clear:[40,52],clevel:[9,12,296,299,300,301,302,309,317,324,327,329,399,409],clone:16,close:[15,70,75],cloud:[14,18,20,333,399,408],cloudpickl:406,cloudsdk_config:18,cmake:16,cname:[9,12,296,299,300,301,302,309,317,324,327,329,399,409],coalesc:[333,334],code:16,codec:[11,24,25,40,42,52,242,249,253,266,268,278,289,294,296,309,324,399],codec_chunk:[9,10,12,24,40,42,52,409],codec_chunk_aspect_ratio:[40,52],codec_chunk_aspect_ratio_soft_constraint:[40,52],codec_chunk_el:[40,52],codec_chunk_elements_soft_constraint:[40,52],codec_chunk_shap:[40,52],codec_chunk_shape_soft_constraint:[40,52],codecspec:[10,23,55,56,57,242,249,253,266,268,278,294,296,309,399],colexicograph:[9,10,40,45,52,321,409],column:[40,45,52,321,409],com:[13,16,19],com_github_cares_car:16,com_github_nlohmann_json:16,com_github_pybind_pybind11:16,com_google_boringssl:16,com_google_brotli:16,com_google_snappi:16,com_google_tensorstor:16,combin:[1,2,3,4,5,6,7,8,9,10,11,12,344,399,407,409,410],comma:[13,16],command:[13,16],commit:[23,201,204,206,210,215,321,333,334,339,340,341,342,343,361,365,406],commit_async:[214,333,334,336,339,341],commit_start:[334,340],commit_sync:[173,305,334,339,341],common:[3,7,11,13,20,40,52,142,407],compar:[24,25,26,39,70,73,174,175,196,197,242,244,268,270,344,345],comparison:[244,249,266,270,294,399],compat:[0,7,8,9,10,11,12,13,15,16,116,133,249,266,294,303,305,306,313,318,330,333,399,407,408,409],compil:16,complement:[23,393,394,395,396,410],complet:[15,105,107,108,110,111,114,201,202,204,206,210,215,238,240,241,303,304,305,306,318,321,330,333,361,407,408],complex128:[12,23,375,410],complex64:[12,23,376,410],complex:[3,23,375,376,407,410],compon:[7,8,9,10,12,19,24,40,116,122,142,149,186,190,242,249,410],compos:[2,14,15,121,142,148,248,274],composit:15,compress:[6,12,299,300,334,399,408,409],compressed_segment:[10,399,408],compressed_segmentation_block_s:[10,399,408],compression_level:6,compressor:[9,253,278,283,296,301,302,309,317,324,327,329,399,409],comput:[3,11,15,18,116,128,201,202,204,245,271,296,299,300,301,302,317,329,406,407],concaten:13,concis:20,concurr:[0,7,8,9,10,12,13,14,17,18,19,20,105,211,294,327,333],condit:[18,117,145,210,215,359,360],config:18,configur:[0,14,18,19],confirm:399,confus:407,conjunct:[15,294,327,399,409],connect:[13,14,18,19],consecut:[18,95,407],consequ:[118,121,194,211,294,327],consid:[9,333,409],consist:[7,8,9,10,12,14,95,133,210,407],constant:[1,15,23,216,217,230,234,392,407],constrain:[9,10,11,14,15,249,266,294,399,406,407,409],constraint:[1,2,3,4,5,6,7,8,11,15,24,25,27,30,32,35,36,38,40,43,44,45,46,50,52,54,242,249,252,253,255,266,268,277,278,280,281,283,289,294,327,344,399,406,409,410],construct:[24,25,27,28,40,41,55,56,58,65,66,67,69,70,74,75,76,77,116,122,123,124,142,149,150,151,174,176,181,182,186,188,196,198,216,217,218,219,242,249,250,268,275,344,346,347,348,349,350,377,378,381,382,383,384],constructor:65,consum:[23,95,105,207,361,407],contain:[3,8,13,15,16,70,71,72,78,95,99,116,128,174,178,350,406,407,408,409],content:[17,23,399,406],context:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,58,59,60,61,62,63,64,65,66,67,68,69,95,105,193,194,203,205,208,211,270,276,294,296,298,299,300,301,302,307,314,317,327,329,333,334,371,374,399,406,407,408,410],context_a:270,context_b:270,contextresourc:[0,1,4,5,6,7,8,9,10,11,12,17,18,19,21,22],contigu:[1,70,321],continu:[201,202,204],contrast:407,contribut:22,control:[19,333],conveni:[1,4,5,6,7,8,9,10,11,12,18,22,302],convers:[2,296,298,408],convert:[2,9,24,25,37,40,51,52,55,57,105,106,120,186,193,194,211,242,249,265,266,268,292,294,303,305,306,318,327,330,333,344,355,371,399,407],coordin:[95,407],copi:[0,15,16,173,174,177,186,191,205,242,244,252,254,268,270,279,333,361,366,407],core:[0,14,407],coroutin:[106,115,406],correctli:15,correspond:[9,10,12,15,18,19,20,21,22,23,27,38,40,52,86,91,95,96,105,106,128,133,134,238,249,255,266,294,310,361,372,373,375,376,389,390,391,393,394,395,396,397,399,400,401,402,403,404,405,406,407,409,410],corrupt:[7,9,10,12,294,327,399],cost:15,count:133,cpu:[0,16],crash:333,creat:[1,2,3,4,5,6,7,8,11,14,16,23,58,61,62,64,173,194,208,211,238,239,255,268,294,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,335,406,408,409,410],credenti:[0,18,23,58,408],crlf:19,cross:16,crt:[13,18,19],curl:[16,18,19],current:[0,12,15,16,105,201,202,204,210,296,298,321,333,334,406,408],custom:21,d:[23,70,95,96,97,98,99,100,101,102,103,104,117,118,143,144,145,146,243,246,269,272,292,293,297,300,304,377,378,392,407,408],dask:407,data:[0,1,2,3,7,8,11,14,19,20,21,22,187,188,189,190,191,192,203,205,210,242,249,257,266,268,282,294,301,303,305,306,307,309,312,313,318,321,327,330,333,356,357,358,359,360,371,372,373,374,381,382,383,389,390,391,393,394,395,396,397,399,400,403,405,406,407,409,410],data_copy_concurr:[0,1,4,5,6,7,8,9,10,11,12,22,95,105,276,296,299,300,301,302,307,317,327,329,374,399,406,407,408],data_encod:[10,22,399,408],data_typ:10,dataabc:187,databas:14,dataset:[9,17,18,21,193,296,298,299,300,301,302,303,304,305,306,311,312,316,317,318,320,321,327,329,330,333,334],dataset_3d:408,dataset_futur:408,datatyp:[9,282,299,300,334,399,408],date:[16,19],datetim:12,deadlin:[111,114,368,370],deadlock:[106,406],decod:[0,14,23,55,409],decrypt:13,def:[106,406],defer:407,defin:[0,1,4,5,6,7,8,9,10,11,12,15,17,18,19,21,22,23,95,116,242,372,406,407,409],del:201,delai:[18,19],delet:[7,9,10,12,173,201,204,206,215,294,327,399],delete_exist:[7,9,10,12,294,327,334,399,408],delete_rang:[173,206],demand:11,demonstr:408,denot:407,depend:[13,18,19,95,321,333,407,410],deprec:[12,407],deriv:[11,344,353],describ:[11,15,20,23,24,25],desir:255,detail:[13,14,19],determin:[7,9,15,22,117,145,173,399,409],determinist:3,develop:18,deviat:[344,409],dexpr:407,diagon:[94,96,377],did:[111,114],differ:[3,7,9,10,12,15,19,20,98,104,105,164,171,210,249,260,266,267,286,294,295,317,318,324,327,329,330,399,400,405,406],dim:[23,50,54,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,116,117,119,123,145,149,170,216,218,221,392],dimens:[3,11,12,14,15,23,24,25,27,34,38,40,48,50,52,54,70,74,75,76,77,92,94,96,97,98,99,100,101,102,103,104,116,118,119,120,122,123,125,129,130,133,135,138,142,143,146,149,154,155,159,171,216,219,242,243,245,246,249,255,266,267,268,269,271,272,280,285,288,292,293,294,295,296,297,299,300,304,310,320,329,330,334,344,348,377,378,398,399,406,408],dimension:[3,14,15,23,95,116,296,407],dimension_separ:[12,296,301,302,317,327,329,399],dimension_unit:[9,10,11,242,249,255,266,268,280,294,296,310,399,406,409],dimensionless:[9,344,409],dimexpress:[23,94,95,96,97,98,99,100,101,102,103,104,116,118,142,146,242,246,268,272,296,300,304,377,407],dimselectionlik:[94,103,116,120,377,378],direct:95,directli:[0,1,2,3,7,8,9,10,11,12,15,16,17,18,19,133,142,187,277,278,280,281,283,289,303,304,305,306,318,330,344,406,407,409,410],directori:[13,16,17,18,19,20,21,22],disabl:[12,13],discrep:[117,145],disjoint:333,dist:16,distribut:[13,16,399],divid:[344,352,407],divisor:[344,352],do_read:406,do_writ:406,doc:16,document:[13,20,409,410],doe:[7,9,10,12,13,15,16,17,19,65,95,97,99,100,101,102,133,142,277,278,280,281,283,284,289,294,301,314,327,333,344,372,399,407,409],domain:[3,11,14,23,94,95,96,97,98,99,100,101,102,103,104,105,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,162,164,165,168,169,171,242,243,245,246,247,248,249,255,256,260,261,263,264,266,267,268,269,271,274,280,281,287,288,289,290,291,293,294,295,296,297,298,299,300,302,303,304,305,306,310,311,318,319,320,321,324,325,326,329,330,333,377,392,398,399,406,407,408,409],domin:407,don:16,done:[14,16,18,99,105,106,110,238,240,241,249,266,294,361,367,399,407],dot:12,doubl:[23,344,391,409,410],download:16,downsampl:[7,23,379,380,410],downsample_factor:[3,23,379,380],downsample_method:3,downsamplemethod:[3,379,380],driver:[0,14,23,55,95,105,173,187,188,189,190,191,192,193,194,195,201,202,203,204,205,206,207,208,209,210,211,213,214,215,242,253,255,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,288,289,292,293,294,295,296,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,344,374,399,407,408,409,410],drop:[15,333],dtype:[1,2,3,4,5,6,7,8,9,10,11,12,23,95,105,242,244,249,250,251,254,257,262,265,266,268,279,281,282,283,289,294,296,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,316,317,318,320,321,324,327,329,330,333,334,371,372,373,374,375,376,381,382,383,384,385,386,387,388,389,390,391,393,394,395,396,397,399,400,401,402,403,404,405,406,407,408,409,410],due:[10,17,22,210],dummi:[95,407],duplic:[97,407],durabl:[14,201,204,206,215,333,361],dynam:13,e:[9,10,12,13,15,16,18,23,40,45,52,93,95,99,100,101,102,117,121,145,210,211,252,321,327,334,406,407,409],each:[0,3,7,8,9,10,11,12,13,15,19,22,27,38,65,97,99,100,101,102,116,122,129,130,133,135,142,149,154,155,159,242,249,252,255,266,268,280,294,296,298,310,399,406,407,409,410],earlier:[11,16],easili:407,effect:[11,15,95,117,145,194,211,268,277,278,280,281,283,289,294,327,336,339,407],effici:[3,10,14,15,24,49,50,53,54,333,334,409,410],effort:16,either:[7,9,10,12,15,18,23,70,117,120,145,303,304,305,306,318,330,333,334,342,377,399,407],element:[2,3,10,24,25,27,31,32,38,40,45,46,51,52,95,116,140,142,169,242,264,268,276,291,296,326,407,409],elements_soft_constraint:[25,27,32,38,40,52,409],empti:[8,9,15,70,82,86,91,92,117,145,174,176,178,179,180,199,215,249,266,294,344,359,360,399,406,407,409],enabl:[7,9,10,12,14,18,70,78,142,333,406,407],encod:[0,5,9,12,14,16,19,22,23,55,399,408,409,410],end:[18,19,20,21,22,103,133,407],endian:[9,10,12,22,410],engin:18,enhanc:407,ensur:[16,105,112,187,255,333,334,399,407],entir:[8,10,12,15,22,117,145,298,333,350,407,409,410],entri:[196,199],environ:[16,18,19],epoch:[7,111,114,196,200,210],equal:[0,1,9,10,12,15,22,23,24,25,26,39,45,46,63,70,73,83,84,89,90,93,95,96,121,174,175,196,197,242,244,245,246,248,249,266,268,270,271,272,274,284,294,299,302,303,306,309,313,314,344,345,392,399,406,407,409],equival:[3,9,12,19,40,52,70,79,95,96,99,100,101,103,116,121,133,143,165,168,169,210,243,249,261,263,264,266,269,287,290,291,294,297,298,302,319,320,325,326,327,333,341,348,399,406,407,409],error:[8,9,10,11,12,15,18,19,105,106,111,114,117,145,201,202,204,210,238,240,249,266,294,341,399,406,407],escap:16,etag:19,etc:[3,13,16,18,19,324],even:[3,8,14,19,63,201,204,407],evenli:409,event:[106,406],everi:[7,8,9,10,12,14,15,19,22,96,399,406,409],evict:0,exactli:[3,9,10,12,95,399,406,407],exampl:[16,188,208,334,406,408],except:[9,10,12,99,105,106,109,111,112,201,202,204,238,240,249,266,270,294,334,361,368,399,406,407,409],excess:10,exclud:20,exclus:[15,70,74,83,84,116,122,127,142,149,156,174,176,179,407],exclusive_max:[9,10,12,15,70,71,72,73,74,75,78,80,81,83,84,85,86,87,88,89,91,93,116,117,118,119,120,121,122,124,127,128,129,130,133,134,145,149,150,156,170,174,176,179,245,246,247,260,267,271,289,294,299,303,324,407],exclusive_min:[70,84,90],execut:[0,16,105,112,399,406],exist:[1,2,3,4,5,6,7,8,9,10,11,12,16,95,99,117,145,149,150,201,202,204,206,208,210,215,249,255,266,294,303,305,306,318,327,330,333,359,360,381,383,406,407,409,410],exit:334,expect:[13,16,115,255,407],explicit:[7,15,70,116,121,122,129,130,142,149,154,155,242,245,248,249,266,268,271,274,294,296,299,302,303,306,333,399,406,407,409],explicitli:[9,10,12,112,407,409],exponenti:18,expos:8,expr:[99,116,118,142,146,242,246,248,268,272,274,296,300,302,304,306,407],express:[14,23,70,80,94,95,97,98,99,100,101,102,103,104,116,118,133,142,146,242,246,268,272,296,300,304,377,398],extend:[1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,21,22],extens:[12,16,95,372],extent:[12,15,140,201,204,206,215,409],extern:[194,210,211,294,327,334],extract:[94,96,377,407],f2:12,f4:[12,283,399],f8:12,f:[12,105,296,321,333,399,406],facil:13,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,11,12,18,210,334,406,407,410],fake:18,fals:[7,9,10,12,21,25,37,55,57,59,60,61,63,71,72,74,75,76,77,85,87,88,93,95,106,109,129,130,154,155,178,186,193,194,211,238,240,241,242,265,268,292,294,296,323,327,334,335,399,407,409],faster:16,fastest:[9,12,16],fetch:16,few:407,fewer:[0,407],field:[12,86,91,409],file:[4,6,8,9,10,12,13,14,16,18,20,21,187,188,189,190,191,192,193,203,205,333,334,399,408],file_io_concurr:[0,17,68,69,193,203,205],filesystem:[0,14,17,20,399,408],fill:[14,103,242,249,258,266,268,283,294,296,313,399,408,409],fill_valu:[11,12,242,244,249,258,266,268,283,294,296,301,302,313,317,324,327,329,399,409],filter:[12,253,296,301,302,309,317,324,327,329,399,409],find:[13,16],fine:[303,304,305,306,318,330],finit:[15,70,77,78,85,93,133,249,266,294,399,406,409],first:[10,15,16,95,96,104,171,267,295,329,330,399,407,409],fix:[333,400,405],fix_resizable_bound:[296,323],flag:[16,86,91,128,134],flatten:407,float16:[12,23,389,410],float32:[9,10,12,23,283,308,374,376,390,399,410],float64:[9,12,23,375,391,410],fly:3,flyeem:408,flyem:399,fold:19,follow:[3,9,10,11,12,13,15,16,18,19,115,117,145,249,266,294,344,399,406,407,409,410],forc:[105,112],form:[15,64,302,407],format:[9,10,12,13,14,22,399,409,410],fortran:[9,10,40,45,52,321,409],forward:361,found:202,fraction:210,fragment:19,framework:58,free:406,frequent:3,fresh:[7,8,9,10,12],from:[0,1,2,3,7,8,9,10,11,12,14,15,17,18,19,23,24,25,28,40,41,52,55,56,58,61,62,66,67,68,69,95,96,103,116,119,122,123,124,133,142,149,150,151,174,176,186,188,196,198,207,208,210,242,249,250,252,268,275,298,333,334,344,346,347,349,350,353,371,377,378,381,383,399,407,408,409],fsync:333,fulfil:[356,358],full:[8,12,15,21,95,327,407,409],fulli:[12,14,15,142,194,211,294,327,333,399],further:409,futur:[16,23,105,106,107,108,109,110,111,112,113,114,115,173,206,207,208,210,215,238,239,240,241,296,321,323,333,334,339,342,361,362,365,366,369,399,408],futurelik:[23,105,106,115,406],g:[12,13,18,23,95,99,100,101,102,211,252,327,334,406,407],gc:[2,3,8,12,20,21,195,209,213,333,399,408],gcc:16,gce:18,gcloud:18,gcs_request_concurr:[13,18,399,408],gcs_request_retri:[18,399,408],gcs_user_project:[18,399,408],gener:[16,95,173,181,183,196,197,198,199,200,210,215,302,344,356,357,359,360,406,407,409],get_running_loop:[106,406],get_valu:106,git:16,github:16,given:[0,3,17,58,64,70,72,95,99,100,101,102,407,409],global:[0,18,19,406],good:22,googl:[14,16,18,333,408],google_application_credenti:[13,18],googleapi:13,grain:[303,304,305,306,318,330],granular:[10,409],graph:[194,211,294,327],grid:[9,10,12,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,42,43,44,49,52,53,333,409],grid_origin:[9,10,12,24,40,43,44,50,52,54,245,246,247,248,249,250,252,260,262,265,267,289,308,324,409],grid_origin_soft_constraint:[24,40,44,50,52,54,409],grid_soft_constraint:[27,38],group:[10,22,23,334],gs:[4,5,6,10,18,20,22,195,213,408],gsutil:18,guarante:[8,14,201,204,206,210,215,333,334,361,372],guid:14,gzip:[9,10,12,22,399,408,409],ha:[9,10,11,12,15,18,95,102,103,105,108,109,110,194,206,211,249,266,284,294,313,327,333,334,336,337,339,340,342,343,361,399,406,407],half:[0,23,70,74,173,174,176,389,410],handl:[18,19,23,58,59,64,105,230,232,238,296,361,406],hard:[9,10,12,15,24,25,27,35,38,40,43,45,46,50,52,54,409],hash:[10,22,399,408],have:[9,10,11,12,15,16,18,19,70,97,117,145,194,211,245,249,266,271,294,299,311,327,334,372,399,407,408,409],header:[9,12,19],help:22,hemibrain:399,here:9,hierarch:409,high:[14,399],higher:[4,9,12,210],hit:408,hold:361,hostnam:13,how:[13,18,19,409],howev:[3,12,16,18,95,105,142,406],htab:19,http:[16,18,20],http_archiv:16,http_proxi:13,http_request_concurr:19,http_request_retri:19,https_proxi:13,hull:[11,70,86,116,128],i1:12,i2:12,i4:[12,399],i8:12,i:[0,9,10,12,14,15,18,40,45,50,52,54,93,95,99,103,117,121,145,201,202,204,210,218,219,277,278,280,281,283,289,321,333,334,407,408,409],id:[0,12,18,22,64,296,301,302,309,317,324,327,329,399,409],ident:[9,10,15,22,121,149,150,211,270,327,399,408],identifi:[0,7,9,12,15,16,20,116,117,119,145,173,196,199,406,407,409,410],ieee:[23,389,390,391,410],iexpr:407,if_equ:[215,359,360],if_not_equ:[210,356,357,406],ignor:[1,2,3,4,5,6,7,8,9,10,11,12,50,54,409,410],ijg:10,imag:[4,5,6,10],imaginari:410,immedi:[15,106,115,407],immut:[116,344,406,407],implement:[8,12,14,16,22,210],impli:[268,277,278,280,281,283,289],implicit:[9,10,11,12,15,23,70,74,75,76,77,86,87,88,91,95,96,116,117,122,128,129,130,134,142,145,149,154,155,249,266,294,399,406,407,409],implicit_low:[70,73,74,75,76,77,87],implicit_lower_bound:[116,122,129,142,149,154,170,407],implicit_upp:[70,73,74,75,76,77,80,88],implicit_upper_bound:[116,122,130,142,149,155,170],implicitli:[9,10,12,15,407,408,409],impos:[15,344,409],improv:[333,334],includ:[9,10,12,13,14,16,19,21,23,63,116,120,268,277,278,280,281,283,289,303,305,306,318,321,327,330,333,407,409],include_default:[25,37,55,57,59,60,61,63,186,193,242,265,268,292],inclus:[15,70,74,75,76,89,90,116,122,131,132,137,142,149,157,158,160,165,174,176,180,242,261,268,287,296,319,407],inclusive_max:[15,70,73,75,83,84,88,89,90,93,116,122,131,157,392],inclusive_min:[9,10,12,15,70,71,72,73,74,75,76,78,80,81,83,84,85,86,87,88,89,90,91,93,116,117,118,119,120,121,122,124,127,128,129,130,131,132,133,134,135,137,139,140,145,149,150,158,170,174,176,180,245,246,247,260,267,271,289,294,299,303,324,392],incompat:[11,50,54,249,266,294,399,406],inconsist:8,increment:[16,249,255,266,294,310,399,406,409],indefinit:406,independ:[10,15,23,242,399,409],index:[3,10,14,22,24,48,70,72,94,96,97,98,99,100,101,102,103,104,117,118,119,120,121,122,123,124,133,138,144,145,146,147,148,149,150,151,153,164,166,171,172,216,218,226,230,245,247,248,249,255,260,266,267,271,273,274,281,286,293,294,295,299,301,302,303,305,306,310,317,318,329,330,377,392,398,399,406,409],index_arrai:[15,151,170,216,218,220,248,273,274,286,295,301,302,306,317,329],index_array_bound:[15,151],index_exp:[116,133,406],index_rang:[149,170,216,218,221],indexdomain:[9,10,12,15,23,24,50,54,70,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,153,242,245,246,247,248,249,256,260,266,267,268,271,281,294,296,299,300,303,304,311,399,406,407,409],indexerror:[95,97,99,100,101,102,248,407],indexinterv:15,indextransform:[1,2,3,4,5,6,7,8,9,10,11,12,15,23,95,96,97,98,99,100,101,102,103,104,116,118,121,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,216,217,218,219,226,230,242,247,248,260,267,268,271,272,273,274,286,293,295,296,299,300,302,306,398,407,410],indic:[3,9,10,12,15,23,63,70,74,75,76,77,78,85,87,88,92,94,95,98,99,103,104,116,117,122,129,130,133,142,144,145,147,149,154,155,164,171,174,176,178,179,180,181,184,199,210,215,230,242,247,248,249,255,260,266,267,268,273,274,276,286,294,295,296,301,302,305,306,310,317,318,322,327,329,330,332,333,334,337,338,340,343,344,361,377,378,392,399,406,407,409],indicaet:9,indirectli:[142,409],individu:[8,10,11,407,409],ineffici:10,inf:[15,23,50,54,70,74,75,77,81,83,84,89,90,95,96,97,98,102,104,121,122,124,146,147,148,149,151,164,171,182,198,210,392,398,406,407],infinit:[15,70,133,249,266,294,399,406,409],info:10,inform:[13,16,18,19,399],infti:15,inherit:[58,66,67,68],init:0,initi:[1,16,18,19,406,407],initial_delai:[18,19],inlin:407,inner:[12,45,46,70,71],inner_ord:[9,10,12,24,40,45,46,47,48,51,52,245,246,247,248,249,250,252,260,265,267,289,308,324,399,409],inner_order_soft_constraint:[24,40,45,46,52,409],innermost:[24,40,45,52,409],input:[1,2,3,7,9,10,11,12,15,23,94,95,96,97,98,99,100,101,102,103,104,120,142,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,171,216,219,249,266,293,294,377,398,399,406,407,410],input_dimens:[11,15,121,148,149,150,151,170,216,219,222,273,292,301,329,407,408],input_exclusive_max:[11,15,95,105,142,145,149,151,154,155,156,170,271,272,273,274,286,292,294,295,296,299,300,301,302,307,317,327,329,374,399,407,408],input_inclusive_max:[15,99,142,149,157],input_inclusive_min:[11,15,95,99,100,101,105,142,145,149,151,154,155,156,157,158,159,160,170,271,272,273,274,286,292,294,295,296,299,300,301,302,307,317,327,329,374,399,407,408],input_label:[15,95,96,98,99,100,101,102,103,104,142,145,149,151,153,159,161,163,167,170,271,272,299,300,399,407,408],input_origin:[142,158,160],input_rank:[15,95,121,142,144,145,146,148,149,154,155,161,163,217,219,248,274,302,398,407],input_shap:[15,96,100,101,102,103,142,149,153,154,155,156,157,158,159,160,161,162,163,167,170,218,248,271,272,273,274,286,295,302,306,407],insensit:19,insert:407,instal:[14,18],instanc:[0,65,108,381,382],instead:[7,8,9,10,12,13,16,105,133,142,187,210,294,302,327,333,399,406,407],instruct:14,int16:[9,10,12,23,393,410],int32:[1,2,9,10,11,12,23,95,244,316,320,394,399,407,410],int64:[9,12,23,395,410],int8:[9,10,12,23,396,410],integ:[0,1,2,3,7,9,10,11,12,15,18,19,22,23,70,98,118,119,121,164,260,286,317,318,393,394,395,396,401,402,403,404,409,410],integr:407,intend:[16,18,20,21,22],interdepend:[194,211,294,327],interfac:[14,22,173,238,303,304,305,306,318,330,361],interleav:407,intermedi:407,intern:[9,10,210],interoper:[296,298,372,408],interpret:[19,133,181,184,344,407,409,410],interrupt:[111,114],intersect:[70,91,96,116,134],interv:[3,15,23,50,54,70,71,72,73,74,75,76,77,78,79,81,83,84,85,89,90,93,173,174],introduc:14,introspect:64,invoc:[16,407],invok:[16,105,107],involv:[15,407],ip:13,irrespect:[99,210],isol:[14,334],isomorph:[194,211,294,327],issu:333,iter:[70,78],its:[15,17,58,61,62,66,116,124,142,151,210,242,250,344,347,407,409],itself:[8,16,333,361,407],j:[15,117,145],janelia:399,jax:[12,372],join:[7,8,9,10,12,186,190],jointli:333,jpeg:[7,10,16,22,410],jpeg_qual:10,jpg:5,json:[0,1,2,3,4,5,6,7,9,11,12,13,14,15,16,17,18,19,20,21,23,24,25,28,37,40,41,42,43,44,45,46,49,51,52,53,55,56,57,58,59,60,61,62,63,66,116,124,141,142,151,170,173,186,188,189,193,203,208,242,244,250,251,265,268,270,275,276,292,344,347,355,397,399,409],json_point:8,just:[7,9,10,12,15,294,327,399,407,408],k:[103,117,145],keep:333,kei:[8,9,10,12,14,23,58,64,173,174,176,178,181,185,186,187,190,191,192,195,196,199,201,202,204,205,206,207,208,209,210,211,212,213,214,215,268,284,294,296,314,333,334,399,408,409],kept:[10,16],key_encod:12,keyboard:[111,114],keyboardinterrupt:[111,114],keyerror:[201,202,204,210],keyrang:[173,174,175,176,177,178,179,180,206,207],keyvaluestorebackedchunkdriv:[7,9,10,12,410],keyword:105,know:399,kvstore:[2,3,4,5,6,7,8,9,10,12,17,18,19,20,21,22,23,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,288,289,292,293,294,295,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,399,406,408],kvstoreurl:[7,8,9,10,12,17,18,19,20,21],label:[9,10,12,14,15,23,70,73,74,75,76,77,80,81,86,91,92,94,95,96,97,103,116,118,119,120,122,123,124,128,134,135,142,146,149,159,245,246,247,248,249,256,260,266,267,271,294,299,300,303,304,311,377,378,399,406,409],lambda:105,larg:[14,207,298],larger:[15,408],largest:10,last:[15,95,109,119,120,201,202,204,210,240,248,407],latenc:[14,333,399],later:[16,17,399],latest:16,latter:12,layer:[8,9,10,12,333,409],layout:[14,23,24,25,39,40,47,48,50,51,52,54,242,249,252,266,268,277,294,296,308,321,399,406],lead:[7,9,10,12,15,106,294,327,350,399,409],least:[0,9,15,117,145,407],leav:[9,99,100,101,406],left:[10,15,117,145,399,406],legaci:407,len:125,length:[3,9,12,15,23,144,400,405,407,409],leq:15,less:[15,249,255,266,294,310,344,348,399,406,407,409],level:[2,6,9,12,13,14,210,408,409],lexicograph:[3,40,45,52,173,174,176,180,321,409],libavif:16,libcurl:13,libjpeg:16,libpng:16,librari:[12,14,133,142,407],lightweight:407,like:[13,14,18,19,118,121,255,399,407],likewis:407,limit:[0,14,15,18,19,20,68,69,361,406],line:19,link:[13,16,238,239,240,241],linux:[13,16],list:[9,13,15,16,78,119,173,206,207,210,379,380,399,407],liter:407,littl:[10,12,410],load:16,local:[0,13,14,17,18,20],localhost:18,locat:[13,18,19,324,399],lock:17,logic:[15,116,333,410],login:18,longer:361,loop:[106,406],lost:8,low:[15,22],lower:[3,4,15,70,74,75,76,77,84,87,90,96,99,102,116,122,129,132,133,137,142,149,154,158,160,165,174,176,180,242,261,268,287,296,319,407,409],lowest:3,lru:0,lz4:[9,12,16,296,299,300,301,302,309,317,324,327,329,399,409],lz4hc:[9,12],m1:15,m2:15,m:[15,16,409],mac:13,machin:[14,17,18,399],maco:16,macosx_deployment_target:16,made:[210,334,406],mai:[0,3,8,9,10,11,12,13,15,16,17,18,19,20,21,22,70,99,100,101,102,103,106,115,116,120,122,149,173,201,202,204,208,210,211,214,238,255,296,298,303,305,306,309,318,321,324,327,330,331,333,339,343,344,356,358,377,399,406,407,409,410],main:[111,114],major:[40,45,52,321,409],make:[13,16,409],manag:[23,58,334],mani:[13,15,18,19,95,142,399,407],manipul:21,manual:[15,16],map:[0,11,15,22,23,95,96,97,98,99,100,101,102,103,104,118,121,142,144,145,146,147,148,149,150,151,164,166,171,173,216,217,218,219,226,293,398,407],mark:[15,70,108,238,240,241,407],match:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,19,21,86,91,97,99,100,101,102,117,145,207,210,215,249,266,294,327,359,360,399,406,407,409,410],mathrm:[15,22],mathtt:15,max:3,max_delai:[18,19],max_retri:[18,19],maximum:[0,3,18,19,111,114],mayb:16,mean:[3,7,8,9,10,12,407],meaning:93,mechan:[4,5,6,7,8,9,10,12,14,173,361,407],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,40,42,43,44,45,46,49,52,53,63,409,410],memori:[0,1,7,9,10,12,14,15,19,20,23,173,194,201,202,204,206,207,208,210,211,214,215,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,288,289,292,293,294,295,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,371,399,406,408,410],memory_key_value_stor:[21,194,211,276,296,299,300,301,302,314,317,327,329,399],mere:[301,333,361],merg:[27,38,249,266,294,399,406,409],metadata:[7,9,10,12,18,22,255,277,278,280,281,282,283,285,288,289,292,293,294,296,299,300,301,302,317,327,329,334,408],metadata_kei:12,metdata:9,method:[3,9,12,18,23,216,223,230,302,379,380,407,408],microsoft:16,middl:408,million:[9,10,12],min:[3,15],mind:333,minim:[399,407],minimal_spec:327,minimum:[3,16,116,128],minishard:22,minishard_bit:[10,22,399,408],minishard_index_encod:[10,22,399,408],mismatch:15,miss:[173,181,182,184,210,215,409],mix:407,mode:[3,16,95,98,104,268,294,296,315,327,334,399],model:12,modif:[23,334],modifi:[8,15,116,186,194,252,333],modul:[16,406],more:[1,4,5,6,7,8,9,10,11,12,13,15,16,20,22,95,120,302,333,406,407,410],most:[3,10,12,13,15,18,20,95,109,120,122,149,173,201,202,204,210,240,248,302,333,407,409],ms:13,msvc:16,much:16,multi:[14,21,23,296],multipl:[0,3,7,9,10,12,14,15,16,17,18,19,21,255,294,303,304,305,306,318,327,330,333,334,399,406,407],multipli:[9,10,15,344,346,348,349,350,351,354,409],multiscal:10,multiscale_metadata:[10,399,408],murmurhash3_x86_128:22,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,40,52,65,86,91,95,103,112,121,210,245,248,249,266,271,274,294,299,302,303,306,327,333,399,406,407,409,410],my:[2,3,4,5,6,8,10,12,18,19,22,195,209,213],n5:[7,14,270,275,276,279,280,282,284,285,288,292,293,294,299,300,303,304,310,311,314,334,399,409],n:[15,23,95,116,407],name:[9,10,12,16,19,230,232,235,381,384,385,406,407],nanomet:10,nasm:16,nativ:[9,12,14,407],ndarrai:[296,298,406,407,408],ndim:[24,25,33,47,116,136,142,163,242,259,268,285,296,316],nearest:3,necessari:[7,9,10,12,13,15,117,145,294,327,399,410],necessarili:[95,407,409],need:[15,16,95,142,344,407,409],neg:[103,119,133,407,409],neither:[7,8,9,10,12,15,327,399,406],neq:15,nest:[1,11,15,194,208,294],nesteddirectorystor:12,net_zlib:16,net_zstd:16,network:[14,17,18,19],neuroglanc:[10,14,22,399,408,409],neuroglancer_multiscale_volum:10,neuroglancer_precomput:[7,22,255,399,408,409],neuroglancer_uint64_shard:[10,20],neuroglancer_uint64_sharded_v1:[10,22,399,408],never:[7,321,333,407],newaxi:[23,95,96,398,407],newer:[356,357],newli:96,nghttp2:16,nlohmann:16,nm:[9,10,255,280,310,345,346,347,349,350,351,352,353,355,409],no_proxi:13,non:[3,7,8,9,10,12,15,16,18,22,86,91,95,103,117,145,173,208,249,266,294,334,359,360,361,399,406,407,409],none:[15,18,19,23,24,25,27,29,30,31,32,33,34,35,36,38,40,43,44,45,46,50,51,52,54,58,65,66,67,70,74,75,76,77,94,95,99,100,101,102,105,106,107,111,112,113,114,116,122,133,142,149,150,173,186,194,201,204,206,207,208,210,211,212,214,215,216,220,221,222,225,238,240,241,242,245,246,247,248,249,253,255,256,257,258,259,260,262,266,267,268,271,272,273,274,278,280,281,282,283,284,285,286,288,293,294,295,296,298,301,302,309,310,313,314,317,324,327,328,329,331,334,336,339,341,342,361,362,365,366,368,369,370,371,377,398,399,406,407],nonzero:[95,407],nor:[7,9,10,12,15,327,399,406],normal:[1,4,5,6,7,8,9,10,11,12,13,15,16,19,22,117,145,249,266,294,333,334,399,407],note:[3,9,10,13,15,16,95,249,266,294,399,406],now:[333,399],np:[133,298,406,408],num_channel:[10,399,408],number:[0,3,4,5,6,7,9,10,15,16,18,19,22,23,24,25,27,31,32,34,38,40,48,52,97,99,100,101,102,111,114,116,122,125,133,138,140,142,149,169,207,242,264,268,291,296,320,326,344,350,375,376,407,409,410],numer:[3,15,344,407,409],numpi:[12,15,23,94,95,98,99,104,116,133,142,147,164,171,242,247,248,260,267,268,273,274,286,295,296,298,301,305,317,318,329,330,372,373,375,376,377,381,383,389,390,391,393,394,395,396,397,400,401,402,403,404,405,408],numpy_dtyp:[381,386],numpyindexingspec:[94,95,98,104,142,147,164,171,242,247,260,267,268,273,286,295,296,301,305,317,318,329,330,377],o:[0,14,201,202,204,277,278,280,281,283,289,321,407,408],oauth2:13,obj:[147,407],object:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,23,86,91,105,106,111,114,116,123,128,133,134,149,150,195,209,213,238,240,241,252,298,333,334,344,361,368,370,381,382,388,407,408,409,410],object_:[397,400,405],observ:[334,406],obsolet:19,obtain:[9,12,95,116,252,296,323,407,408],occupi:410,occur:[15,105,201,202,204,407],odd:3,offer:3,offici:12,offset:[3,11,15,24,50,54,94,100,101,121,148,149,150,151,167,170,216,217,218,219,224,292,377,407,408,409],often:[18,333],oindex:[94,98,142,147,164,242,247,248,260,267,268,273,274,286,295,296,301,302,305,306,317,318,329,330,377],older:[7,8,9,10,12,210,356,358],omit:[11,399,407],onc:[15,23,120,215,333,334,343,361,406],one:[9,12,13,15,18,22,95,96,117,122,145,149,249,266,294,302,399,406,407,409],ones:9,onli:[0,3,7,8,9,10,11,12,13,15,16,17,19,40,50,52,54,95,96,105,122,149,215,249,266,277,278,280,281,283,289,294,315,321,333,334,361,399,406,407,408,409],onto:407,op1:407,open:[1,2,3,4,5,6,7,8,9,10,11,12,14,22,23,70,74,105,173,174,176,194,201,202,203,204,205,206,207,208,209,210,211,213,214,215,255,268,294,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,327,329,330,333,334,343,406,407,408,409,410],openssl:13,oper:[0,7,8,9,10,11,12,13,14,15,16,17,22,23,95,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,114,118,121,142,147,164,171,172,173,181,201,204,206,208,210,214,215,238,247,260,267,273,286,295,296,301,303,304,305,306,318,328,330,331,333,343,361,399,406],opn:407,opt:16,optim:[12,16],optimist:14,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,70,116,242,249,266,268,277,278,280,281,283,289,294,327,356,359,399,406,409,410],order:[9,10,15,16,18,22,23,24,40,45,46,52,95,103,142,143,173,174,176,180,207,242,243,268,269,277,289,296,297,301,302,317,321,327,329,333,399,407,409,410],org:16,org_aomedia_avif:16,org_blosc_cblosc:16,org_lz4:16,org_nghttp2:16,org_sourceware_bzip2:16,org_tukaani_xz:16,origin:[3,9,10,12,15,24,40,43,44,52,94,99,100,101,102,116,132,137,142,160,165,194,211,242,249,261,266,268,287,294,296,319,327,377,399,406,407,409],orthogon:[98,164,260,286,317,318,407],os:13,other:[3,9,10,12,15,16,24,25,26,27,38,39,50,54,65,70,72,73,86,91,95,116,117,122,128,134,142,174,175,196,197,201,202,204,242,244,268,270,302,344,345,399,406,407,409],otherwis:[1,2,3,7,9,10,11,12,15,16,18,19,22,74,75,76,106,117,122,145,149,341,409,410],out:[15,95,96,97,98,99,100,101,102,103,104,145,146,147,148,149,150,151,164,171,293,398,407],outer:[94,98,142,164,242,260,268,286,296,317,318,377],output:[11,16,23,94,95,96,97,98,99,100,101,102,103,104,118,121,142,144,145,146,147,148,149,150,151,164,166,167,170,171,216,217,218,219,226,228,229,230,248,249,266,273,274,286,292,293,294,295,301,302,306,317,329,377,398,399,406,407,408],output_rank:[121,142,144,167,248,274,302,303,306],output_user_root:16,outputindexmap:[15,23,121,142,148,149,150,166,167,170,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,248,274,302,306],outputindexmethod:[23,216,223,226,230,231,232,233,234,235,236,237],outsid:[334,407],over:[3,13,15,70,78,121,149,150,333,407,409],overlap:[8,11],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20,21,22,294,327,399,410],overridden:[9,16,194,208,294,399],own:18,pack:12,pai:18,pair:[21,238,239,344,349],parallel:399,paramet:[9,10,12,18,19,20,23,27,38,40,52,55,63,64,66,67,74,75,76,77,86,91,97,99,100,101,102,103,106,111,114,118,119,120,121,122,123,128,134,144,149,150,176,194,201,202,204,206,207,208,210,211,215,245,248,249,266,271,274,294,299,302,303,305,306,318,321,327,330,333,371,399,406,409,410],parent:[0,1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,58,66,67,68,69,410],pars:[58,61,67,173,186,350,409],part:[16,24,40,242,249,255,377],partial:[7,9,10,12,15,399],particular:[0,14],particularli:[93,406],partit:[298,409],pass:[16,23,356,359],path:[4,5,6,7,8,9,10,12,13,14,16,17,18,19,20,21,22,173,186,187,188,189,190,191,192,193,194,195,201,202,203,204,205,206,208,209,210,211,213,215,284,314,334,399,408],pattern:105,pem:13,pend:0,pep:407,per:[9,10,12,15,22,25,27,31,32,38,409],percent:19,perfect:407,perfectli:[333,407],perform:[2,3,10,14,15,94,201,204,206,208,214,215,277,278,280,281,283,289,303,304,305,306,318,321,330,331,399,406,407,408,409],permiss:18,permit:[7,8,9,10,12,15,94,95,103,118,121,249,266,294,399,406,407],permut:[15,24,40,45,46,52,409],persist:[12,334],physic:[9,23,242,249,255,266,268,280,294,296,310,344,399,406,409],pick:10,pip:16,place:[10,13,95],plain:94,platform:[12,16],plu:407,pm:15,png:[7,16,410],point:[23,333,334,344,372,389,390,391,409,410],pointer:8,polici:[296,323],pool:[0,22,211,327,399,406],portion:[350,409],posit:[3,11,15,249,266,294,296,313,399,407,408],posix:[16,17],possibl:[7,9,10,12,15,16,294,324,327,399,406],potenti:407,power:407,pre:16,prebuilt:16,preced:[13,40,52,249,266,294,399,406,409],precis:[23,40,52,333,344,389,390,391,397,400,405,409,410],precomput:[10,14,22,409],predecessor:407,prefer:[40,52,409],prefix:[18,20,21,22,173,186,192,209,407],prepar:13,presenc:8,present:[3,9,15],preserv:406,preset:9,preshift_bit:[10,22,399,408],prevent:16,previou:407,previous:[1,4,5,6,7,8,9,10,11,12,17,18,19,21,22,105,113,208,399,406],primarili:[64,70,118,121],print:[13,74,75,76,77,81,105,253,255,256,257,258,262,282,285,288,293,406],prior:[7,8,9,10,12,16,97,99,100,101,102,406,407],problem:[12,18,19],process:[8,14,17,298],produc:[23,105,111,114,238,407],product:[116,140],progress:16,project:[16,18],project_id:18,promis:[23,105,109,238,239,240,241],propag:[11,86,91,128,134],properti:[3,9,12,14,20,22,154,155,156,157,158,159,160,162,252,334,399,406,409,410],propos:407,protocol:[17,407],provid:[8,9,10,12,13,14,16,17,18,105,333,334,361,399,407],purpos:[21,118,406,407],py:[16,116,123,147],pybind11:16,python3:16,python:[1,12,14,23,70,80,305,306,397,400,405,407],qualiti:[4,5,10],quaniti:[344,409],quantiti:[23,249,255,266,294,310,344,348,399,406,409],quantiz:4,queri:[14,19,105,109,110],queued_for_writeback_bytes_limit:0,quit:3,r:[178,315],rais:[50,54,78,97,99,100,101,102,105,111,114,120,133,201,202,204,207,210,245,246,247,248,249,260,266,267,271,272,273,274,286,294,295,334,341,399,406],rang:[5,15,70,94,100,101,102,103,173,174,175,176,177,178,179,180,206,207,218,219,333,377,378,407],rank:[1,2,3,4,5,6,7,8,9,10,11,12,15,24,25,27,33,34,38,40,45,47,48,50,52,54,95,96,97,98,99,100,101,102,103,104,116,117,118,121,122,125,129,130,133,136,138,142,145,146,147,148,149,150,151,161,163,164,167,171,226,228,229,242,244,245,246,247,248,249,250,251,254,255,257,259,260,262,265,266,267,268,274,285,288,289,293,294,296,302,303,306,316,320,324,398,399,406,407,409,410],rare:[12,407],rate:409,rather:[40,45,46,52,95,407,409],ratio:[25,27,29,30,38,40,52,409],raw:[9,22,334],re:[16,22,173,194,211,294,296,327,399,406],reach:0,read:[2,3,7,8,9,11,12,14,15,19,22,23,24,25,40,49,50,52,173,181,182,202,208,210,214,215,294,296,298,301,302,303,304,305,306,307,315,318,321,322,327,328,330,331,333,334,356,357,358,361,371,374,406,407,409],read_chunk:[9,10,12,24,40,49,50,51,52,289,308,324,409],read_chunk_aspect_ratio:[40,52],read_chunk_aspect_ratio_soft_constraint:[40,52],read_chunk_el:[10,40,51,52],read_chunk_elements_soft_constraint:[40,52],read_chunk_shap:[10,40,50,52,406],read_chunk_shape_soft_constraint:[40,52],read_chunk_templ:[24,50,54],read_context:406,read_funct:406,read_futur:408,read_param:406,readabl:[296,322],reader:[17,334],readi:[111,114,206,333,342],readm:16,readresult:[173,181,182,183,184,185,208,210,215],real:[249,266,294,399,406,410],rebuild:16,receiv:[15,18,19,111,114],recent:[0,95,109,120,201,202,204,210,240,248,407],recheck:[7,8,9,10,12],recheck_cached_data:[7,8,9,10,12,408],recheck_cached_metadata:[7,9,10,12],recommend:[10,16,22,303,304,305,306,318,330,344,407,409],recomput:406,record:[201,204,206,215],rectangular:[3,10,15],recurs:409,reduc:[16,302],redund:[399,409],refer:[0,1,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,95,194,211,294,327,333,407,409,410],reflect:[210,301,311,321,333,361],regardless:[7,8,9,10,12,407],region:[3,10,15,407,408],regist:[12,105,107,113],regular:[19,24,25,333,334,407,409],rel:[10,19,103,206,407,409],relat:[16,18,19,400,405],relationship:15,reli:410,relianc:17,remain:[9,12,15,95,102,194,208,294,343,350,407,409],remot:[0,13,14],remov:96,remove_done_callback:[105,113,361,369],reorder:103,repeatedli:22,replac:[194,294,407],repo:16,repositori:16,repres:[9,10,12,15,21,23,70,115,142,216,238,321,333,344,407,409,410],represent:[15,17,18,19,20,21,23,24,25,28,37,41,51,55,56,57,58,59,60,61,62,63,66,80,81,124,126,141,151,152,170,188,189,193,195,203,213,244,250,251,265,270,275,276,292,344,347,355,381,407,409,410],request:[18,19,105,108,210,356,357,399,406],requestor:18,requir:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,122,149,294,321,327,399,408,409,410],reserv:15,resiz:[9,10,12,15,70,87,88],resolut:[9,10,280,399,408,409],resolv:[106,115,207,210,215,296,323,407],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,58,59,60,64,65,194,208,211,270,276,294,327,399,406,410],respect:[3,10,27,38,70,96,99,333,407],respons:19,restrict:[19,207],result:[9,10,11,12,14,15,16,23,95,96,97,104,105,106,111,112,114,115,117,145,148,171,173,181,182,194,201,202,204,207,210,211,238,240,241,245,267,271,294,295,298,299,301,303,304,305,306,318,321,327,329,330,333,334,341,342,361,370,399,406,407,408,409],retain:[27,38,103,211,327,407,409],retain_context:[173,211,327],retri:[18,19],retriev:[18,58,64,408],revalid:[7,8,9,10,12,19],revers:[103,142,143,242,243,268,269,296,297],rewrit:10,rfc:[8,19],right:[15,18,19,117,145],rightarrow:15,roll:334,root:17,round:[3,10,15,407],row:[40,45,52,321,409],rs1:17,rtf:16,rule:[15,16],run:[18,106,111,114,406],runtim:[13,18,19],rw:315,s:[9,11,13,16,23,393,394,395,396,407,410],safe:[14,17,18,333,399],same:[0,7,8,9,10,11,12,15,16,19,21,65,97,99,100,101,102,194,211,294,309,314,324,327,333,334,361,399,406,407,408,409],satisfi:[10,321,407],satur:14,save:13,scalar:[95,99,100,101,102,303,305,306,318,330,333,372,381,382,407],scale:[10,255],scale_index:[10,399,408],scale_metadata:[10,22,399,408],scheama:11,schema:[1,2,3,4,5,6,7,8,14,15,23,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,289,294,296,324,399,406,410],scheme:[17,18,19,20,21],script:16,sdist:16,sdk:18,se_curl:[13,16],second:[7,15,111,114,196,200,210],section:[13,14,18,19],secur:[13,18,19],segment:[399,408,409],sel:407,select:[1,2,3,4,5,6,7,8,11,23,86,91,94,95,96,97,99,100,101,102,103,116,120,128,134,255,377,378,410],self:[26,37,38,39,50,51,52,54,57,60,63,64,71,72,73,78,79,80,81,83,84,86,89,90,91,93,95,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,117,118,119,120,121,125,126,128,134,141,143,144,145,146,147,148,152,164,165,168,169,170,171,175,177,187,189,190,191,193,194,197,201,202,203,204,205,206,207,210,211,214,215,227,228,230,232,240,241,243,244,245,246,247,248,251,254,260,261,263,264,265,266,267,269,270,271,272,273,274,276,279,286,287,290,291,292,294,295,297,298,299,300,301,302,303,304,305,306,307,313,317,318,319,320,321,323,325,326,327,329,330,331,333,336,339,341,345,351,352,355,362,363,364,367,368,369,370,382,387],semant:[17,94,95,98,104,142,147,164,171,242,247,260,267,268,273,286,295,296,301,305,317,318,329,330,377,407],send:19,sensit:19,separ:[0,7,8,9,12,13,16,18,187,201,202,204,210,215,298,333,407,410],sequenc:[11,27,38,40,52,94,95,97,99,100,101,102,117,120,122,123,142,144,145,149,150,249,266,294,377,378,399,406,407],serial:15,serv:[10,117,145,255,406,409],server:[13,18,19],servic:18,set:[3,4,10,11,13,16,18,19,21,23,40,52,94,97,99,173,210,249,266,294,327,377,399,406,407],set_except:[238,240],set_result:[238,241],setup:[14,16],sever:[16,105],sha256:16,shape:[15,24,25,27,29,30,35,36,38,40,50,52,54,116,122,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,149,162,168,242,245,246,247,248,249,256,260,263,266,267,268,281,289,290,294,296,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,317,318,321,324,325,327,329,330,333,399,406,407,409],shape_soft_constraint:[25,27,36,38,40,51,52,409],shard:[22,399,408,409],shard_bit:[10,22,399,408],shard_data_encod:10,shardingspec:[10,22],share:[0,13,14,17,18,19,23,58,65,194,208,211,294,327,399,406],shift:[94,100,101,377,407],shlex:16,shortcut:407,shorthand:[305,306],should:[7,8,9,10,12,13,16,18,19,20,21,22,106,333,359,360,406,409],show:16,shuffl:[9,12,296,299,300,301,302,309,317,324,327,329,399,409],sign:[15,23,393,394,395,396,410],signal:238,signific:[22,333],silent:407,similar:[15,98,99,104,164,171,260,267,286,295,317,318,329,330,407],simpler:3,simplest:16,simpli:[96,106,140,361,406,407],simultan:[16,399],sinc:[7,15,95,111,114,133,196,200,210,406,407,408],singl:[8,9,10,12,13,15,23,95,103,116,119,173,201,202,204,207,210,215,216,219,249,255,266,276,294,310,344,390,399,406,407,408,409,410],single_input_dimens:[15,230,236],singleton:[23,96,398],size:[0,9,10,12,15,16,27,38,70,76,79,80,82,86,91,93,116,122,140,142,149,169,242,264,268,291,296,326,333,399,406,408,409],skip:[7,9,10,12,16,294,327,356,357,407],slice:[95,99,116,117,133,142,145,407,408],slightli:19,slower:[9,12],slowest:[9,12],small:[1,10],smallest:[3,10,12],snappi:[9,12,16],so:[16,408],soft:[0,1,2,3,4,5,6,7,8,9,10,11,12,24,25,27,30,32,36,38,40,44,45,46,50,52,54,409,410],sole:95,some:[9,15,334,344,399,409],sourc:[15,16,296,303,304,305,306,318,330,333,361,371],sp:19,space:[16,23,24,48,95,96,97,98,99,100,101,102,103,104,116,138,142,145,146,147,148,149,150,151,161,163,164,167,171,249,266,293,294,398,399,406,407,409],spec:[7,9,10,12,14,19,58,61,62,63,65,66,67,69,95,172,173,186,187,188,189,190,191,192,193,194,195,208,209,211,244,245,257,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,309,327,379,399],special:[0,10,15,16,18,19,23,83,84,89,90,95,176,179,392,407,409],specif:[0,1,2,3,4,5,6,7,8,9,11,12,16,17,18,19,20,21,23,55,58,61,62,173,186,194,195,196,199,211,213,268,277,278,280,281,283,289,294,327,344,399,409,410],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,38,40,45,46,50,52,54,55,70,74,75,76,94,95,99,100,101,102,103,104,106,111,114,116,117,119,120,122,133,145,149,150,171,173,174,176,181,194,196,201,204,206,207,208,210,211,215,238,240,241,242,249,252,253,255,258,266,267,277,278,280,281,283,284,289,294,295,296,307,321,327,329,330,333,344,348,351,352,356,358,359,360,374,377,398,399,406,407,409,410],speed:4,split:16,squar:407,ssl:[13,16,18,19],sslkeylogfil:13,stack:[7,16,410],stage:[23,334],staic:11,stale:19,staleness_bound:[210,356,358],stamp:[173,181,182,183,208,210,215],standard:[12,16],start:[3,16,23,95,103,105,119,207,334,340,343,377,406,407],startup:16,state:[173,181,182,184,208,210,215],stderr:13,step:[15,95,333,407],still:[8,10,12,15,118,121,334,343,406,407],stop:[95,407],storag:[4,5,6,8,9,10,12,14,18,23,24,40,45,46,52,173,196,197,198,215,268,284,294,296,314,324,333,334,361,399,409],store2:399,store:[7,8,9,10,12,13,15,20,23,173,186,187,190,191,192,195,196,199,201,202,204,205,206,207,208,209,210,211,212,213,214,215,255,268,284,294,296,307,308,309,310,313,314,324,327,333,334,344,374,399,406,408,409],str:[23,58,64,70,74,75,76,77,80,81,92,94,97,116,119,122,126,135,142,149,152,159,173,174,176,179,180,182,186,187,189,190,192,195,196,198,201,202,203,204,209,210,213,215,230,232,235,242,249,251,266,268,276,294,296,315,344,346,349,350,353,377,381,384,385,387,399,405,406,407],strictli:[117,145],stride:[3,15,94,99,149,151,170,216,218,219,225,377],string:[0,3,7,8,9,10,12,14,15,17,18,19,20,21,22,23,80,81,92,126,152,174,176,179,180,189,199,203,251,276,307,344,350,400,405,409,410],strip:[207,350,409],strip_context:[194,294,327],strip_prefix:16,strip_prefix_length:207,strong:14,strongli:22,studio:16,style:[18,20,21,22,94,95,98,99,104,133,142,147,164,171,242,247,248,260,267,268,273,274,286,295,296,301,305,317,318,329,330,377],sub:[8,16,408],subarrai:12,subdivid:409,subject:[296,323,361],subscript:[303,304,305,306,318,330,407,408],subsequ:[11,95,333,361,399,406,407],subset:[15,16,105,116,120,407],subtyp:[7,9,12,20,409,410],succe:15,success:[114,202,339,341],successfulli:[111,238,241,333,342,361],suffic:15,suffici:407,suffix:[186,187],suitabl:[1,2,3,4,5,6,7,8,9,10,11,12,16,399,409,410],sum:407,suppli:408,support:[0,2,3,7,8,9,10,11,14,15,16,17,18,19,20,21,22,94,105,133,172,173,201,204,206,215,255,296,305,322,332,334,372,407,408,409,410],surviv:333,synchron:[105,201,202,204,296,298,303,304,305,306,318,321,330,333,334,341,406,408],syntax:[0,8,17,18,19,21,303,304,305,306,318,330,344,407,409],system:[13,16,18,19,20,333],t:[16,115,142,143,194,208,242,243,268,269,294,296,297,406],tabl:[15,21],take:[10,13,14,40,52,249,266,294,399,406,407,409],taken:[10,11,50,54,73,409],target:[15,16,25,27,31,32,38,40,52,94,103,377,407,409],temporari:[10,16],tensoprstor:13,tensorflow:[12,372],tensorstor:[0,1,2,3,4,5,6,7,8,13,15,16,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,400,401,402,403,404,405,406,407,408,409,410],tensorstore_bazel_build_opt:16,tensorstore_bazel_compilation_mod:16,tensorstore_bazel_startup_opt:16,tensorstore_bazelisk:16,tensorstore_ca_bundl:13,tensorstore_ca_path:13,tensorstore_curl_verbos:13,tensorstore_gcs_http_url:[13,18],tensorstore_gcs_request_concurr:[13,18],tensorstore_prebuilt_dir:16,tensorstore_system_lib:[13,16],term:[95,98,104,164,171,260,267,286,295,305,317,318,329,330,407],termin:[400,405],test:[21,105],th:[95,117,145,407],than:[0,7,8,9,10,12,15,16,40,45,46,52,95,120,210,356,358,406,407,409],thei:[9,11,21,63,118,121,400,405,406,407],them:333,therefor:[10,13],thi:[0,1,3,7,8,9,10,12,13,15,16,17,18,20,40,52,58,64,65,68,69,93,98,104,105,112,116,117,121,133,140,142,143,145,146,148,164,165,168,169,171,173,201,202,204,206,207,210,212,214,215,243,249,252,260,261,263,264,266,267,269,274,277,278,280,281,283,286,287,289,290,291,294,295,296,297,298,301,302,305,306,309,314,317,318,319,320,324,325,326,327,329,330,331,333,334,344,348,351,352,353,361,381,382,399,406,407,408,409],third:409,those:[105,302],though:[118,121,406],thread:[0,105,106,111,114,201,202,204,298,321,406],three:[10,15,117,145,409],through:[14,15,18,20,142],throughput:14,tie:3,time:[7,8,9,10,12,15,196,198,200,210,406,409],timedelta:12,timeout:[105,111,114,361,368,370],timeouterror:[111,114],timestamp:[173,181,183,196,197,406],timestampedstoragegener:[173,181,182,183,196,197,198,199,200,208,210,215,406],tl:16,tmp:[16,17,187,188,189,190,191,192,193,203,205,334,408],to_json:[24,25,37,51,55,57,59,60,61,63,68,116,141,142,170,186,193,242,265,268,292,344,355,381,387],togeth:12,tool:16,top:[2,22,408,409],total:[0,116,140,142,169,242,264,268,291,296,326],total_bytes_limit:[0,7,9,10,12,22,60,64,66,68,69,406,408],toward:407,traceback:[95,109,120,201,202,204,210,240,248,407],track:333,traffic:13,trail:[350,409],transact:[14,21,22,23,201,204,206,207,208,210,212,214,215,303,304,305,306,314,318,321,328,330,331,334,335,336,337,338,339,340,341,342,343,361,399],transform:[1,2,3,4,5,6,7,8,9,10,11,12,14,23,95,96,97,98,99,100,101,102,103,104,105,116,118,121,142,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,167,170,171,216,217,218,219,226,242,245,246,247,248,249,260,266,267,268,271,272,273,274,286,292,293,294,295,296,299,300,301,302,303,304,306,307,311,317,327,329,374,398,399,406,408,410],translat:[3,9,12,15,94,100,101,102,377,407],translate_backward_bi:[94,100,377],translate_bi:[94,95,97,101,118,144,146,292,293,377],translate_to:[94,102,377],transpos:[94,96,103,142,143,242,243,268,269,296,297,377],treat:[19,106,210,407,409],treatment:19,tree:16,trip:15,truncat:407,trust:13,ts:[9,10,11,12,47,48,50,51,54,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,80,81,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,109,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,167,170,171,173,178,187,188,189,190,191,192,193,194,195,201,202,203,204,205,206,207,208,209,210,211,213,214,215,217,218,219,238,240,241,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,262,265,266,267,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,288,289,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,316,317,318,320,321,324,327,329,330,333,334,345,346,347,348,349,350,351,352,353,354,355,374,378,392,398,399,406,407,408],tupl:[24,25,29,30,35,36,43,44,45,46,116,127,129,130,131,132,133,135,137,139,142,144,154,155,156,157,158,159,160,162,165,168,238,239,242,249,255,261,263,266,268,280,287,290,294,296,310,319,325,344,349,399,406,407],turbo:16,tutori:14,two:[8,15,23,24,25,26,39,196,197,333,334,344,345,361,393,394,395,396,407,409,410],txn:[173,214,305,333,334],type:[0,1,2,3,7,8,11,14,22,64,105,115,142,172,242,249,257,266,268,282,294,299,300,303,305,306,307,312,313,318,330,333,334,344,371,372,373,374,381,382,383,388,389,390,391,393,394,395,396,397,399,400,403,405,406,407,408,409,410],u1:12,u2:[12,281,289],u4:[296,301,302,317,327,329],u8:12,u:[353,354],udunits2:[344,409],uint16:[9,10,12,23,279,289,334,401,410],uint32:[9,10,12,23,105,296,298,299,300,301,302,303,304,305,306,307,309,310,311,312,313,314,317,318,321,324,327,329,330,333,374,402,406,408,410],uint64:[9,10,12,22,23,399,403,408,410],uint8:[4,5,6,9,10,12,23,249,250,251,254,257,262,265,266,279,282,404,410],um:280,unbind_context:[186,194,211,294,327],unbound:[11,15,23,50,54,70,77,83,84,89,90,93,122,149,194,294,392],unchang:[99,100,101,102,194,208,294,407],unchunk:10,uncommit:[321,333,334],uncondition:[104,171,267,295,329,330,407],unconstrain:[255,399],under:[2,7,12,17,407],underli:[4,5,6,7,8,9,10,11,12,14,15,20,22,142,268,284,294,296,314,333,334,361,399,409],unequ:407,unicod:[23,405,410],uniform:[3,14,409],uniqu:[15,65,406],unit:[11,23,242,249,255,266,268,280,294,296,310,344,345,346,347,348,349,350,351,352,353,354,355,399,406],universal2:16,unix:[7,18,20,21,22,111,114,196,200,210],unknown:[15,249,255,266,294,309,310,313,399,406,409],unlabel:[9,15,70,92,122,149,409],unless:[10,18,22,344,407,409],unlik:[19,95,105,407],unmatch:15,unmodifi:406,unpickl:406,unregist:[105,113],unset:11,unshar:[399,406],unshard:409,unsign:[23,401,402,403,404,410],unspecifi:[3,7,9,10,12,15,25,34,40,50,52,54,181,182,184,199,207,210,242,256,257,262,268,282,288,293,294,327,399,406,407,409],unsuccessfulli:[108,114,238,240],until:[105,111,114,201,202,204,206,215,334,343,361,406,407],unus:[4,5,6],unverifi:399,up:[10,16,18,409],updat:[10,24,25,38,52,186,194,242,244,252,253,254,255,256,258,262,266,268,270,276,279,294,296,323,327,399],upon:[105,107,407],upper:[9,12,15,70,74,75,76,77,83,88,89,96,116,122,127,130,131,133,142,149,155,156,157,174,176,179,407],url:[14,16,17,18,19,20,21,173,186,188,195,208,213],us:[0,1,3,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,42,64,65,70,94,95,99,100,101,102,105,106,112,115,116,118,121,133,142,173,187,194,208,210,211,214,238,242,245,246,247,248,260,267,268,271,272,273,274,284,286,294,295,296,299,300,301,302,303,304,305,306,309,314,317,318,321,324,327,328,329,330,331,333,334,339,343,344,350,356,359,361,371,377,397,398,400,405,406,407,408,409],usag:334,user:17,usezlib:[9,409],ustr:[23,405,410],usual:[176,180,407],utf:410,util:16,v1:[15,399,408],v2:15,v3:15,v4:15,valid:[0,9,15,19,40,52,95,99,196,200,210,407,409],valu:[0,1,3,4,7,8,11,13,14,15,23,40,52,63,70,73,83,84,89,90,93,95,99,105,115,120,173,181,182,183,184,185,186,187,190,191,192,194,195,196,199,201,202,204,205,206,207,208,209,210,211,212,213,214,215,230,231,237,242,249,255,258,266,268,283,284,294,296,310,313,314,327,333,344,348,397,399,406,407,408,409,410],valueerror:[50,54,78,120,133,207,245,246,247,248,260,267,271,272,273,274,286,295],variabl:[16,18,19,23,400,405],varieti:20,varlength:9,vector:[15,94,95,104,116,122,142,144,149,171,242,267,268,295,296,329,330,377],verbos:[13,407],veri:[10,22,118,121],verifi:[18,19],version:[3,13,16,196,199,399,406,407],via:[1,3,9,10,11,12,14,45,46,407],view:[2,3,14,142,143,173,214,226,242,243,268,269,296,297,299,300,301,302,307,317,329,331,374,379,380,406,407,408],vindex:[94,95,104,142,147,171,242,247,248,260,267,268,273,274,286,295,296,301,302,305,306,317,318,329,330,377],virtual:[2,3,14,16,142,296,299,300,301,302,317,329,379,380,406],virtual_chunk:[23,356,359,406],virtualchunkedreadparamet:[23,356,357,358,406],virtualchunkedwriteparamet:[23,359,360,406],visibl:334,visual:16,volum:[10,22],voxel:[10,409],voxel_offset:[10,399,408],vv:16,w:[15,315],wa:[7,13,58,69,111,114,208,210,252,339,399,406,408],wai:[0,9,10,12,14,16,406,409],wait:[105,333,406,408],warn:[7,9,10,12],web:19,well:[10,11,12,95,372,399],were:407,what:7,wheel:16,when:[0,1,2,3,4,5,6,7,8,11,15,16,19,22,95,106,112,206,210,255,294,303,304,305,306,318,321,327,330,333,342,361,406,407,409,410],where:[0,3,10,11,13,15,23,95,98,104,115,117,133,145,147,149,151,164,171,249,266,294,399,406,407,409,410],wherebi:407,whether:[63,74,75,76,77,95,105,109,110,116,122,129,130,142,149,154,155,327,334,337,338,340,343,407],which:[0,2,3,7,8,9,10,11,12,13,14,15,16,18,19,21,22,50,54,58,66,67,68,69,70,99,100,101,102,106,116,142,196,200,210,252,302,333,339,344,353,361,371,377,406,407,408,409],whitespac:[350,409],wide:17,window:[13,16,17],wireshark:13,wise:[2,9,12,23,406],wish:406,with_transact:[173,208,214,296,305,331,333,334,399,406],within:[0,3,7,8,9,10,12,15,18,20,21,22,24,40,45,52,111,114,173,186,192,207,209,210,296,321,406,407,409],without:[9,15,18,19,94,100,101,102,187,201,202,204,208,210,215,333,334,377,399,406,407,408,409],won:[194,208,294],work:[16,18,19],workspac:16,worst:[9,10],would:[97,133],writabl:[296,332],write:[2,7,8,9,11,12,14,15,18,22,23,24,25,40,52,53,54,173,201,204,206,208,210,214,215,296,302,303,304,305,306,307,315,318,321,328,330,331,332,333,334,359,361,371,374,406,407,409],write_chunk:[9,10,12,24,40,51,52,53,54,289,308,324,409],write_chunk_aspect_ratio:[40,52],write_chunk_aspect_ratio_soft_constraint:[40,52],write_chunk_el:[10,40,52],write_chunk_elements_soft_constraint:[40,52],write_chunk_shap:[10,40,52,54],write_chunk_shape_soft_constraint:[40,51,52],write_chunk_templ:[24,50,54],write_context:406,write_funct:406,write_futur:408,writeback:[0,14,333,359,360],writefutur:[23,105,296,333,361,362,363,364,365,366,367,368,369,370],writer:[7,9,10,12,294,327,399],written:[12,16,23,249,266,294,296,313,333,399,406,408],x86_64:16,x:[9,10,12,15,16,70,74,75,76,77,80,81,86,91,92,95,96,97,98,99,100,101,102,103,104,106,117,118,119,120,124,128,134,135,145,146,148,151,153,159,161,163,167,170,178,208,245,246,247,248,256,260,267,271,272,293,299,300,303,304,311,378,399,407,408],xcode:16,xre:10,xxxxx:19,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:16,xyz:10,xz:[9,16],y:[9,10,12,15,95,96,97,98,99,100,101,102,103,104,117,118,119,120,123,124,128,134,135,145,146,151,153,159,161,163,167,170,178,208,245,246,247,248,256,260,267,271,272,293,299,300,303,304,311,399,407,408],yet:[296,313,321],you:[7,9,10,12,13,16,18,19,65,333,399,406,408],your:16,yre:10,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:16,z:[9,10,15,95,97,98,99,100,101,102,103,104,117,118,119,120,124,135,145,151,153,159,161,163,167,170,245,246,247,248,256,260,267,271,272,299,300,303,304,399,407,408],zarr:[2,3,7,14,253,271,272,273,274,277,278,281,283,286,289,295,296,298,301,302,305,306,308,309,312,313,317,318,321,324,327,329,330,333,399,407,409],zarr_format:[12,296,301,302,317,327,329,399],zarrai:[12,399],zero:[7,9,10,12,15,22,70,82,95,96,122,149,249,266,294,399,406,407,409],zlib:[9,12,16],zre:10,zstd:[9,12,16]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_uint64_sharded</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[95,407],"class":[24,58,173,409],"new":[9,10,12,399],"public":[25,55,70,105,181,216,226,230,238,356,359,361,381],accessor:[24,58,59,61,70,105,116,142,173,174,186,196,242,268,296,334,344],ad:[95,407],align:15,all:[117,145],an:399,api:[16,23],arithmet:344,arrai:[1,9,10,12,95,399,407],aspect:[9,12],assume_metadata:399,asynchron:23,authent:18,avif:4,behavior:19,block:105,broadcast:15,build:16,c:[12,16],ca:[13,18,19],cach:[19,406],callback:105,cast:2,certif:[13,18,19],checkout:16,chunk:[7,9,10,12,24,409],cloud:13,codec:[9,10,12,409],compar:407,comparison:[24,25,174,196,242,268,344],compos:407,compress:[9,10],compressor:12,concept:14,concurr:399,configur:13,constraint:[9,10,12],construct:407,constructor:[24,25,55,58,61,70,105,116,142,173,174,181,186,196,216,230,238,242,268,334,344,377,381],context:0,core:23,creat:[9,10,12,399],credenti:13,data:[9,10,12,23,296],dataset:408,debug:13,depend:16,develop:16,diagon:407,differ:407,dimens:[9,10,95,117,145,407,409],document:16,domain:[9,10,12,15],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22],effici:399,element:[9,12],ellipsi:[95,407],encod:10,environ:13,error:95,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,21,22,47,48,50,51,54,60,64,65,66,68,69,70,71,72,74,75,76,77,78,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,106,109,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,144,145,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,167,170,171,173,178,187,189,190,191,192,193,194,195,201,202,203,204,205,206,207,209,210,211,213,214,215,217,218,219,240,241,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,262,265,266,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,288,289,292,293,294,295,296,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,316,320,321,324,327,333,345,346,347,348,349,350,351,352,353,354,355,374,378,392,398,399,407,409],exist:399,explicit:[9,10,12],express:407,file:[7,17],fill:[9,10,12],flyem:408,fortran:12,framework:0,from:16,fulli:[117,145],gc:18,geometr:116,get:14,googl:13,hemibrain:408,highlight:14,http:[13,19],i:[173,296],improv:399,index:[15,23,95,116,142,242,268,296,407],instal:16,integ:[95,407],interfac:105,interv:[95,407],ipython:16,janelia:408,jpeg:5,json:[8,10,22,410],kei:[17,18,19,20,21,22],label:[117,145,407],layer:[11,20],layout:[9,10,12,409],librari:16,limit:[9,10,12,17,22],local:[16,408],map:[9,10,12],member:[25,55,70,105,181,216,226,230,238,356,359,361,381],memori:21,metadata:399,method:15,mix:[117,145],mode:407,mutat:[186,242,268],n5:[9,408],neuroglancer_precomput:10,neuroglancer_uint64_shard:22,non:333,numpi:407,o:[173,296],oindex:407,open:399,oper:[24,25,70,94,116,174,186,196,242,268,334,344,377,407],order:12,outer:407,output:15,packag:16,parti:16,pickl:406,png:6,proxi:13,publish:16,pypi:16,python:16,ratio:[9,12],raw:10,read:[10,399,408],refer:23,represent:[70,116,142,173,186,230,242,268],request:13,requir:16,run:16,scalar:12,schema:[9,10,11,12,409],segment:10,select:[9,10,12,407],semant:333,separ:10,sequenc:116,setter:24,shape:[9,10,12],shard:10,shell:16,singl:7,singleton:[95,407],skip:399,space:15,spec:[23,410],specif:[10,22],stack:11,start:14,storag:[7,13,20],store:[17,18,19,21,22],stride:407,string:[70,116,142,173,186,230,242,268],structur:12,style:407,support:[12,23,406],synchron:173,templat:24,tensorstor:[9,10,11,12,14,399],test:[16,18],third:16,tl:[13,18,19],transact:[173,296,333,406],transform:[15,407],translate_backward_bi:407,translate_bi:407,translate_to:407,transpos:407,tutori:408,type:[9,10,12,23,296],unconstrain:[9,10,12],unit:[9,10,409],unlabel:[117,145],unshard:10,us:399,valu:[9,10,12,17,18,19,20,21,22],variabl:13,vector:407,view:23,vindex:407,virtual:23,when:[9,10,12,399],without:16,write:[10,399,408],zarr:12}})