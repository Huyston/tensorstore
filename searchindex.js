Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/avif/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[407,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[17,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[18,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/memory":[20,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/avif":[4,0,1,"json-driver/avif",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[5,0,1,"json-driver/jpeg",""],"driver/json":[8,0,1,"json-driver/json",""],"driver/n5":[9,0,1,"json-driver/n5",""],"driver/n5/Codec":[9,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[9,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[9,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[9,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[9,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[9,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[9,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[10,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[10,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[10,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/png":[6,0,1,"json-driver/png",""],"driver/stack":[11,0,1,"json-driver/stack",""],"driver/zarr":[12,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[12,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[12,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[12,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[12,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[12,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[17,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[18,0,1,"json-kvstore/gcs",""],"kvstore/memory":[20,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[16,9,1,"-",""],CacheRevalidationBound:[7,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[407,0,1,"json-ChunkLayout",""],Codec:[407,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[13,9,1,"-",""],IndexDomain:[15,0,1,"json-IndexDomain",""],IndexInterval:[15,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[15,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[7,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[19,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[19,0,1,"json-KvStoreUrl","URL representation of a key-value store."],OutputIndexMap:[15,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[13,9,1,"-",""],Schema:[407,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[16,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[16,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[16,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[16,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[13,9,1,"-",""],TENSORSTORE_CA_PATH:[13,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[13,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[13,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[16,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[16,9,1,"-",""],TensorStore:[408,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[407,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[13,9,1,"-",""],dtype:[408,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[13,9,1,"-",""],https_proxy:[13,9,1,"-",""],no_proxy:[13,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[407,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[407,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[407,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[407,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[407,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[407,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[18,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{max_retries:[18,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[18,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/avif":{cache_pool:[4,1,2,"json-driver/avif.cache_pool",""],context:[4,1,2,"json-driver/avif.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/avif.data_copy_concurrency",""],driver:[4,1,2,"json-driver/avif.driver",""],dtype:[4,1,2,"json-driver/avif.dtype",""],kvstore:[4,1,2,"json-driver/avif.kvstore",""],quantizer:[4,1,2,"json-driver/avif.quantizer",""],rank:[4,1,2,"json-driver/avif.rank",""],schema:[4,1,2,"json-driver/avif.schema","Specifies constraints on the schema."],speed:[4,1,2,"json-driver/avif.speed",""],transform:[4,1,2,"json-driver/avif.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[5,1,2,"json-driver/jpeg.cache_pool",""],context:[5,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[5,1,2,"json-driver/jpeg.driver",""],dtype:[5,1,2,"json-driver/jpeg.dtype",""],kvstore:[5,1,2,"json-driver/jpeg.kvstore",""],quality:[5,1,2,"json-driver/jpeg.quality",""],rank:[5,1,2,"json-driver/jpeg.rank",""],schema:[5,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[8,1,2,"json-driver/json.cache_pool",""],context:[8,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[8,1,2,"json-driver/json.data_copy_concurrency",""],driver:[8,1,2,"json-driver/json.driver",""],dtype:[8,1,2,"json-driver/json.dtype",""],json_pointer:[8,1,2,"json-driver/json.json_pointer",""],kvstore:[8,1,2,"json-driver/json.kvstore",""],path:[8,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/json.rank",""],recheck_cached_data:[8,1,2,"json-driver/json.recheck_cached_data",""],schema:[8,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{cache_pool:[9,1,2,"json-driver/n5.cache_pool",""],context:[9,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[9,1,2,"json-driver/n5.create",""],data_copy_concurrency:[9,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[9,1,2,"json-driver/n5.delete_existing",""],driver:[9,1,2,"json-driver/n5.driver",""],dtype:[9,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[9,1,2,"json-driver/n5.kvstore",""],metadata:[9,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[9,1,2,"json-driver/n5.open",""],path:[9,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[9,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[9,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[9,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[9,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[9,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[9,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[9,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[9,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[9,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[9,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[9,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[9,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[9,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[9,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[9,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[9,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[9,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[9,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[9,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[9,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[9,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[9,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[9,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[9,1,2,"json-driver/n5/Compression/xz.preset",""],type:[9,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{cache_pool:[10,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[10,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[10,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[10,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[10,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[10,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[10,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[10,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[10,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[10,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[10,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/png":{cache_pool:[6,1,2,"json-driver/png.cache_pool",""],compression_level:[6,1,2,"json-driver/png.compression_level",""],context:[6,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[6,1,2,"json-driver/png.data_copy_concurrency",""],driver:[6,1,2,"json-driver/png.driver",""],dtype:[6,1,2,"json-driver/png.dtype",""],kvstore:[6,1,2,"json-driver/png.kvstore",""],rank:[6,1,2,"json-driver/png.rank",""],schema:[6,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[11,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],driver:[11,1,2,"json-driver/stack.driver",""],dtype:[11,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[11,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[11,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[11,1,2,"json-driver/stack.schema",""],transform:[11,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/zarr":{cache_pool:[12,1,2,"json-driver/zarr.cache_pool",""],context:[12,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[12,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[12,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[12,1,2,"json-driver/zarr.delete_existing",""],driver:[12,1,2,"json-driver/zarr.driver",""],dtype:[12,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[12,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[12,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[12,1,2,"json-driver/zarr.kvstore",""],metadata:[12,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[12,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[12,1,2,"json-driver/zarr.open",""],path:[12,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[12,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[12,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[12,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[12,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[12,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[12,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[12,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[12,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[12,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[12,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[12,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[12,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[12,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[12,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[12,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[12,1,2,"json-driver/zarr/Codec.driver",""],filters:[12,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[12,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[12,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[12,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[12,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[12,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[12,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[12,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[12,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[12,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[12,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[17,1,2,"json-kvstore/file.context",""],driver:[17,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[17,1,2,"json-kvstore/file.file_io_concurrency",""],path:[17,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[18,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[18,1,2,"json-kvstore/gcs.context",""],driver:[18,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[18,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[18,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[18,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[18,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/memory":{atomic:[20,1,2,"json-kvstore/memory.atomic",""],context:[20,1,2,"json-kvstore/memory.context",""],driver:[20,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[20,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[20,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[38,3,1,"","Constructs from component parts."],"__init__(json)":[39,3,1,"","Constructs from the JSON representation."],Grid:[23,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[37,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[40,5,1,"","Chunk grid used by the codec."],grid_origin:[41,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[42,5,1,"","Soft constraints on the grid origin."],inner_order:[43,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[44,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[45,5,1,"","Alias for rank."],rank:[46,5,1,"","Number of dimensions in the index space."],read_chunk:[47,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[48,5,1,"","Chunk offset and shape for efficient reads."],to_json:[49,3,1,"","Converts to the JSON representation."],update:[50,3,1,"","Adds additional constraints."],write_chunk:[51,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[52,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[25,3,1,"","Constructs a chunk grid."],"__init__(json)":[26,3,1,"","Constructs from the JSON representation."],__eq__:[24,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[27,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[28,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[29,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[30,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[31,5,1,"","Alias for rank."],rank:[32,5,1,"","Number of dimensions, or None if unspecified."],shape:[33,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[34,5,1,"","Soft constraints on chunk shape."],to_json:[35,3,1,"","Converts to the JSON representation."],update:[36,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[25,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[25,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[25,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[25,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[25,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[25,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[25,4,2,"p-rank","Specifies the number of dimensions."],shape:[25,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[25,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[36,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[36,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[36,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[36,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[36,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[36,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[36,4,2,"p-rank","Specifies the number of dimensions."],shape:[36,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[36,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[38,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[38,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[38,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[38,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[38,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[38,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[38,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[38,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[38,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[38,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[38,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[38,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[38,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[38,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[38,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[38,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[38,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[38,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[38,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[38,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[38,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[38,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[38,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[38,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[38,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[38,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[38,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[38,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[38,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[38,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[38,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[38,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[38,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[38,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[50,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[50,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[50,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[50,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[50,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[50,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[50,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[50,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[50,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[50,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[50,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[50,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[50,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[50,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[50,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[50,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[50,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[50,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[50,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[50,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[50,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[50,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[50,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[50,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[50,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[50,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[50,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[50,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[50,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[50,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[50,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[50,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[50,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[50,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[54,3,1,"","Constructs from the JSON representation."],to_json:[55,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[63,3,1,"","Constructs a default context."],"__init__(json)":[64,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[65,3,1,"","Constructs a context from a parsed spec."],Resource:[57,2,1,"","Handle to a context resource."],Spec:[59,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[62,3,1,"","Creates or retrieves the context resource for the given key."],parent:[66,5,1,"","Parent context from which this context inherits."],spec:[67,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[58,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[60,3,1,"","Creates a context specification from its JSON representation."],to_json:[61,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[61,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[62,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[64,4,2,"p-json","JSON representation of the context."],parent:[64,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[65,4,2,"p-parent","Parent context from which to inherit."],spec:[65,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[69,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[70,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[72,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[73,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[74,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[75,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[71,3,1,"","Compares for equality with another interval."],__iter__:[76,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[77,3,1,"","Size of the interval, equivalent to size."],__repr__:[78,3,1,"","Returns the string representation as a Python expression."],__str__:[79,3,1,"","Returns the string representation of the interval."],empty:[80,5,1,"","Returns True if size is zero."],exclusive_max:[81,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[82,5,1,"","Exclusive lower bound of the interval."],finite:[83,5,1,"","Indicates if the interval is finite."],hull:[84,3,1,"","Hull with another Dim."],implicit_lower:[85,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[86,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[87,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[88,5,1,"","Inclusive lower bound of the interval."],intersect:[89,3,1,"","Intersect with another Dim."],label:[90,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[91,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[72,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[72,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[72,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[72,4,2,"p-inclusive_min","Inclusive lower bound."],label:[72,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[73,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[73,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[73,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[73,4,2,"p-inclusive_min","Inclusive lower bound."],label:[73,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[74,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[74,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[74,4,2,"p-inclusive_min","Inclusive lower bound."],label:[74,4,2,"p-label","Dimension label."],size:[74,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[75,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[75,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[75,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[84,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[89,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[93,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[94,5,1,"","Extracts the diagonal of the selected dimensions."],label:[95,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[96,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[97,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[98,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[99,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[100,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[101,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[102,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[95,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[97,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[98,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[99,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[100,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[101,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[104,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[105,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[106,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[107,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[108,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[109,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[110,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[111,3,1,"","Unregisters a previously-registered callback."],result:[112,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[104,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[104,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[109,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[109,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[112,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[112,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[115,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[116,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[117,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[118,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[119,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[120,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[121,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[122,3,1,"","Constructs an index domain from its JSON representation."],__len__:[123,3,1,"","Returns the number of dimensions (rank)."],__repr__:[124,3,1,"","Returns the string representation."],exclusive_max:[125,5,1,"","Exclusive upper bound of the domain."],hull:[126,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[127,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[128,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[129,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[130,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[131,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[132,3,1,"","Intersects with another domain."],labels:[133,5,1,"","Dimension labels for each dimension."],ndim:[134,5,1,"","Alias for rank."],origin:[135,5,1,"","Inclusive lower bound of the domain."],rank:[136,5,1,"","Number of dimensions in the index space."],shape:[137,5,1,"","Shape of the domain."],size:[138,5,1,"","Total number of elements in the domain."],to_json:[139,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[116,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[117,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[118,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[119,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[120,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[120,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[120,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[120,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[120,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[120,4,2,"p-labels","Dimension labels."],rank:[120,4,2,"p-rank","Number of dimensions."],shape:[120,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[121,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[126,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[132,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[143,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[144,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[145,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[146,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[147,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[148,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[149,3,1,"","Constructs an index transform from its JSON representation."],T:[141,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[142,3,1,"","Maps an input index vector to an output index vector."],__repr__:[150,3,1,"","Returns the string representation."],domain:[151,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[152,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[153,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[154,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[155,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[156,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[157,5,1,"","Dimension labels for each input dimension."],input_origin:[158,5,1,"","Inclusive lower bound of the input domain."],input_rank:[159,5,1,"","Rank of the input space."],input_shape:[160,5,1,"","Shape of the input domain."],ndim:[161,5,1,"","Rank of the input space, alias for input_rank."],oindex:[162,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[163,5,1,"","Inclusive lower bound of the domain."],output:[164,5,1,"","Output index maps."],output_rank:[165,5,1,"","Rank of the output space."],shape:[166,5,1,"","Shape of the domain."],size:[167,5,1,"","Total number of elements in the domain."],to_json:[168,3,1,"","Returns the JSON representation of the transform."],vindex:[169,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[142,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[147,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[147,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[147,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[147,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[147,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[147,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[147,4,2,"p-input_rank","Number of input dimensions."],input_shape:[147,4,2,"p-input_shape","Size for each input dimension."],output:[147,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[148,4,2,"p-domain","The domain of the index transform."],output:[148,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[172,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[179,2,1,"","Specifies the result of a read operation."],Spec:[184,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[194,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[199,3,1,"","Synchronously deletes a single key."],__getitem__:[200,3,1,"","Synchronously reads the value of a single key."],__repr__:[201,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[202,3,1,"","Synchronously writes the value of a single key."],copy:[203,3,1,"","Returns a copy of the key-value store."],delete_range:[204,3,1,"","Deletes a key range."],list:[205,3,1,"","Lists the keys in the key-value store."],open:[206,3,1,"","Opens a key-value store."],path:[207,5,1,"","Path prefix within the base key-value store."],read:[208,3,1,"","Reads the value of a single key."],spec:[209,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[210,5,1,"","Transaction bound to this key-value store."],url:[211,5,1,"","URL representation of the key-value store specification."],with_transaction:[212,3,1,"","Returns a transaction-bound view of this key-value store."],write:[213,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[173,3,1,"","Compares with another range for equality."],__init__:[174,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[175,3,1,"","Returns a copy of the range."],empty:[176,5,1,"","Indicates if the range contains no keys."],exclusive_max:[177,5,1,"","Exclusive upper bound of the range."],inclusive_min:[178,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[174,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[174,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[180,3,1,"","Constructs a read result."],stamp:[181,5,1,"","Generation and timestamp associated with the value."],state:[182,5,1,"","Indicates the interpretation of value."],value:[183,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[185,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[186,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[187,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[188,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[189,3,1,"","Returns a copy of the key-value store spec."],path:[190,5,1,"","Path prefix within the base key-value store."],to_json:[191,3,1,"","Converts to the JSON representation."],update:[192,3,1,"","Modifies a spec."],url:[193,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[192,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[192,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[192,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[195,3,1,"","Compares two timestamped storage generations for equality."],__init__:[196,3,1,"","Constructs from a storage generation and time."],generation:[197,5,1,"","Identifies a specific version of a key-value store entry."],time:[198,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[199,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[200,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[202,4,2,"p-key","Key to write/delete."],value:[202,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[204,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[205,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[205,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[206,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[206,4,2,"p-spec","Key-value store spec to open."],transaction:[206,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[208,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[208,4,2,"p-key","The key to read."],staleness_bound:[208,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[209,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[209,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[213,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[213,4,2,"p-key","Key to write/delete."],value:[213,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[215,3,1,"","Constructs a constant map."],"__init__(index_array)":[216,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[217,3,1,"","Constructs a single input dimension map."],index_array:[218,5,1,"",""],index_range:[219,5,1,"",""],input_dimension:[220,5,1,"",""],method:[221,5,1,"",""],offset:[222,5,1,"",""],stride:[223,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[225,3,1,"",""],__len__:[226,3,1,"","Returns the output rank."],rank:[227,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[229,3,1,"",""],__str__:[230,3,1,"","name(self: handle) -> str"],array:[231,6,1,"",""],constant:[232,6,1,"",""],name:[233,5,1,"",""],single_input_dimension:[234,6,1,"",""],value:[235,5,1,"",""]},"tensorstore.Promise":{"new":[237,3,1,"","Creates a linked promise and future pair."],set_exception:[238,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[239,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[243,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[244,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[245,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[246,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[247,3,1,"","Constructs from component parts."],"__init__(json)":[248,3,1,"","Constructs from its JSON representation."],T:[241,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[242,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[249,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[250,5,1,"","Chunk layout constraints specified by the schema."],codec:[251,5,1,"","Codec constraints specified by the schema."],copy:[252,3,1,"","Returns a copy of the schema."],dimension_units:[253,5,1,"","Physical units of each dimension of the domain."],domain:[254,5,1,"","Domain of the schema, or None if unspecified."],dtype:[255,5,1,"","Data type, or None if unspecified."],fill_value:[256,5,1,"","Fill value specified by the schema."],ndim:[257,5,1,"","Alias for rank."],oindex:[258,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[259,5,1,"","Inclusive lower bound of the domain."],rank:[260,5,1,"","Rank of the schema, or None if unspecified."],shape:[261,5,1,"","Shape of the domain."],size:[262,5,1,"","Total number of elements in the domain."],to_json:[263,3,1,"","Converts to the JSON representation."],update:[264,3,1,"","Adds additional constraints."],vindex:[265,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[243,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[246,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[247,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[247,4,2,"p-codec","Constrains the codec."],dimension_units:[247,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[247,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[247,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[247,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[247,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[247,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[247,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[264,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[264,4,2,"p-codec","Constrains the codec."],dimension_units:[264,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[264,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[264,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[264,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[264,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[264,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[264,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[269,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[270,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[271,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[272,3,1,"","Transforms the spec using an explicit index transform."],T:[267,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[268,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[273,3,1,"","Constructs from the JSON representation."],__repr__:[274,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[275,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[276,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[277,3,1,"","Returns a copy of the spec."],dimension_units:[278,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[279,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[280,5,1,"","Data type, or None if unspecified."],fill_value:[281,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[282,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[283,5,1,"","Alias for rank."],oindex:[284,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[285,5,1,"","Inclusive lower bound of the domain."],rank:[286,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[287,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[288,5,1,"","Shape of the domain."],size:[289,5,1,"","Total number of elements in the domain."],to_json:[290,3,1,"","Converts to the JSON representation."],transform:[291,5,1,"","The index transform, or None if unspecified."],update:[292,3,1,"","Adds additional constraints or changes the open mode."],vindex:[293,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[269,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[272,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{chunk_layout:[292,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[292,4,2,"p-codec","Constrains the codec."],context:[292,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[292,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[292,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[292,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[292,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[292,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[292,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[292,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[292,4,2,"p-open","Allow opening an existing TensorStore."],rank:[292,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[292,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[292,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[292,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[292,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[297,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[298,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[299,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[300,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[301,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[302,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[303,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[304,3,1,"","Synchronously writes using an explicit index transform."],T:[295,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[296,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[305,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[306,5,1,"","Chunk layout of the TensorStore."],codec:[307,5,1,"","Data codec spec."],dimension_units:[308,5,1,"","Physical units of each dimension of the domain."],domain:[309,5,1,"","Domain of the array."],dtype:[310,5,1,"","Data type of the array."],fill_value:[311,5,1,"","Fill value for positions not yet written."],kvstore:[312,5,1,"","Associated key-value store used as the underlying storage."],mode:[313,5,1,"","Read/write mode."],ndim:[314,5,1,"","Alias for rank."],oindex:[315,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[317,5,1,"","Inclusive lower bound of the domain."],rank:[318,5,1,"","Number of dimensions in the domain."],read:[319,3,1,"","Reads the data within the current domain."],readable:[320,5,1,"","Indicates if reading is supported."],resolve:[321,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[322,5,1,"","Schema of this TensorStore."],shape:[323,5,1,"","Shape of the domain."],size:[324,5,1,"","Total number of elements in the domain."],spec:[325,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[326,5,1,"","Associated transaction used for read/write operations."],vindex:[327,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[329,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[330,5,1,"","Indicates if writing is supported."],write:[331,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[297,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[300,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[301,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[301,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[303,4,2,"p-indices","NumPy-style indexing terms."],source:[303,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[304,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[304,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[316,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[316,4,2,"p-indices","NumPy-style indexing terms."],source:[316,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[319,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{create:[325,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[325,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[325,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[325,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[325,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[325,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[328,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[328,4,2,"p-indices","NumPy-style indexing terms."],source:[328,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[331,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[333,3,1,"","Creates a new transaction."],abort:[334,3,1,"","Aborts the transaction."],aborted:[335,5,1,"","Indicates whether the transaction has been aborted."],atomic:[336,5,1,"","Indicates whether the transaction is atomic."],commit_async:[337,3,1,"","Asynchronously commits the transaction."],commit_started:[338,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[339,3,1,"","Synchronously commits the transaction."],future:[340,5,1,"","Commit result future."],open:[341,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[344,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[345,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[346,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[347,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[348,3,1,"","Constructs a unit from a string."],__eq__:[343,3,1,"","Compares two units for equality."],__mul__:[349,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[350,3,1,"","Divides this unit by the specified divisor."],base_unit:[351,5,1,"","Base unit from which this unit is derived."],multiplier:[352,5,1,"","Multiplier for the base_unit."],to_json:[353,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[355,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[356,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[358,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[360,3,1,"",""],cancel:[361,3,1,"",""],cancelled:[362,3,1,"",""],commit:[363,5,1,"",""],copy:[364,5,1,"",""],done:[365,3,1,"",""],exception:[366,3,1,"",""],remove_done_callback:[367,3,1,"",""],result:[368,3,1,"",""]},"tensorstore.array":{array:[369,4,2,"p-array","Source array."],context:[369,4,2,"p-context","Context to use."],dtype:[369,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[376,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[381,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[382,3,1,"","Construct by name."],__call__:[380,3,1,"","Construct a scalar instance of this data type"],name:[383,5,1,"",""],numpy_dtype:[384,5,1,"",""],to_json:[385,3,1,"",""],type:[386,5,1,"",""]},"tensorstore.open":{chunk_layout:[397,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[397,4,2,"p-codec","Constrains the codec."],context:[397,4,2,"p-context","Shared resource context."],create:[397,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[397,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[397,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[397,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[397,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[397,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[397,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[397,4,2,"p-open","Allow opening an existing TensorStore."],rank:[397,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[397,4,2,"p-read","Allow read access."],schema:[397,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[397,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[397,4,2,"p-spec","TensorStore Spec to open."],transaction:[397,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[397,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[404,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[404,4,2,"p-context","Shared resource context."],dimension_units:[404,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[404,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[404,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[404,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[404,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[404,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[404,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[404,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[404,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[404,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[407,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[407,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[407,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[407,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[407,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[407,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],read_chunk:[407,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[407,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[407,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[18,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[18,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[18,0,1,"json-Context.gcs_user_project",""],memory_key_value_store:[20,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[15,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[15,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[15,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[15,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[15,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[15,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[15,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[15,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[15,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[15,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[15,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[15,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[15,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{cache_pool:[7,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[7,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[7,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[7,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[7,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[7,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[7,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[7,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[7,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[7,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[19,1,2,"json-KvStore.context",""],driver:[19,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[19,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[15,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[15,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[15,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[15,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[15,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[407,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[407,1,2,"json-Schema.codec",""],dimension_units:[407,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[407,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[407,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[407,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[407,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[408,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[408,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[408,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[408,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[408,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[408,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[408,1,2,"json-dtype.byte","Single byte."],"char":[408,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[408,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[408,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[408,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[408,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[408,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[408,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[408,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[408,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[408,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[408,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[408,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[408,1,2,"json-dtype.json","JSON value."],string:[408,1,2,"json-dtype.string","Byte string."],uint16:[408,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[408,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[408,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[408,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[408,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[377,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[378,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[22,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[53,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[56,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[68,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[92,2,1,"","Specifies an advanced indexing operation."],Future:[103,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[113,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[114,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[140,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[170,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[171,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[214,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[224,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[228,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[236,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[240,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[266,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[294,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[332,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[342,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[354,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[357,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[359,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[369,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[370,8,1,"","bfloat16 floating-point data type."],bool:[371,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[372,7,1,"","Returns a read/write view as the specified data type."],complex128:[373,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[374,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[375,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[379,2,1,"","TensorStore data type representation."],float16:[387,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[388,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[389,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[390,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[391,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[392,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[393,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[394,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[395,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[396,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[397,7,1,"","Opens or creates a TensorStore from a Spec."],string:[398,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[399,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[400,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[401,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[402,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[403,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[404,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,21,38,43,45,46,49,50,74,78,84,88,93,94,95,96,97,98,99,100,101,102,103,115,116,117,118,119,120,121,126,131,142,143,144,145,146,147,148,149,151,162,168,169,205,214,215,216,217,228,232,243,244,245,246,247,248,250,254,258,260,263,265,269,270,271,272,279,284,287,290,291,292,293,294,297,298,299,300,301,302,303,304,305,306,307,309,315,316,319,322,325,327,328,331,332,353,371,372,376,396,397,404,405,406,407,408],"05":16,"0x":406,"0x8":[397,406],"1":[0,1,3,9,10,11,12,15,16,18,21,38,43,45,46,49,50,68,69,70,76,81,82,84,85,86,87,88,89,93,94,95,96,97,98,99,100,101,102,103,115,116,117,118,119,125,126,129,130,131,132,133,135,137,138,141,142,143,144,145,146,147,148,149,154,155,156,157,158,162,165,168,169,216,217,228,234,241,243,244,245,246,247,248,250,253,258,260,263,265,267,271,272,278,287,290,291,294,295,297,298,299,300,302,303,304,305,306,307,308,314,315,316,318,322,325,327,328,331,332,342,346,348,371,372,376,390,396,397,404,405,406,407,408],"10":[12,15,16,17,66,67,68,69,70,71,72,73,74,79,81,82,83,87,88,93,98,99,100,115,122,131,143,168,244,245,258,265,270,271,284,293,294,296,298,299,301,302,303,315,316,319,327,328,331,397,405],"100":[5,9,10,12,15,48,49,52,123,134,136,243,244,245,246,254,258,265,275,283,286,287,290,291,292,307,308,311,312,322,404,406],"1000":[9,10,12,243,244,245,246,258,265,279,287,294,306,397,406],"10000":10,"1000000":49,"10000000":[0,58,62,66,67,397],"100000000":[0,404,406],"1000000000":10,"100_000_000":406,"100kb":9,"100mb":[404,406],"100x100x1":406,"101":404,"102":[9,12,306,397,404,406],"1020":10,"103":404,"104":404,"1049":294,"105":[48,52,290,291,404],"106":404,"11":[12,16,73,81,93,116,149,216,217,405],"1113":10,"1132030694":406,"1161117856":406,"1194100437":406,"12":[12,15,93,98,99,116,319,405],"1264":10,"128":[9,12],"13":[12,99,116,168,217],"14":[12,16,100,119],"1408314276":406,"1414":397,"15":[10,16,74,100,397,405,406],"15000":406,"15100":406,"159":[9,10,12],"16":[16,21,99,391,399,408],"17":[16,98,122,149],"18":99,"1nme5":348,"3nm":[253,343,353],"4":[0,1,3,9,10,11,12,15,69,76,82,87,93,96,98,99,100,101,102,115,117,118,119,125,126,127,128,129,130,131,132,133,135,137,138,143,147,148,149,151,152,153,154,155,156,157,158,159,160,161,165,168,246,253,272,300,303,304,314,318,328,332,348,372,404,405,406,407],"40":[9,10],"40000":10,"40nm":10,"41408":[397,406],"42":[8,12,104,242,256,281,294,301,311,322,331,332,397,404],"43":332,"44":332,"4443":18,"45":332,"46":16,"4611686018427387903":[21,87,88,390],"4611686018427387904":[81,82],"486000":407,"4_4_40":10,"4nm":[10,253,348,407],"5":[1,9,11,12,15,16,48,52,69,70,71,72,73,74,76,78,79,81,82,83,84,85,86,87,88,89,91,93,96,97,98,99,100,101,102,115,116,117,118,119,120,121,125,126,127,128,129,130,131,132,133,135,137,138,143,144,146,148,149,151,152,153,154,155,156,157,158,159,160,161,165,215,216,217,236,238,239,243,244,245,246,249,258,265,269,270,271,272,284,290,291,293,294,296,297,298,299,300,301,302,303,304,307,308,314,315,316,318,319,322,325,327,328,331,332,344,345,346,347,350,352,372,396,397,404,405,406,407],"50":[309,404],"500":[9,10,12],"50000":10,"5000000":[64,66,67],"512":10,"51508":10,"51548":10,"5813054053":406,"5e":407,"5nm":[308,349,351,352],"6":[1,3,4,9,10,11,12,15,16,48,52,70,76,93,96,97,98,99,100,102,115,116,117,118,119,121,125,126,127,128,131,132,143,145,148,152,153,154,162,169,243,244,245,269,270,271,294,297,298,299,300,301,302,303,304,314,316,318,328,331,332,397,404,405,406,407],"60":[138,269,270,297,298,301,302,327,407],"62":[15,21,68,390],"62662f87cdd9":16,"632":10,"64":[9,10,12,15,21,397,401,406,408],"6901":8,"7":[15,16,48,52,91,93,98,115,116,119,122,129,131,143,145,147,148,149,155,162,168,169,216,217,258,265,284,293,315,327,349,405],"70":[269,270,271,272,284,293,296,297,298,299,300,301,302,303,304,309,310,315,316,319,325,327,328,331],"707":397,"75":[5,10],"754":[21,387,388,389,408],"77":18,"79":[9,10,12],"7nm":350,"8":[0,10,11,15,16,21,93,97,98,99,115,116,119,122,125,131,143,145,146,147,149,154,162,168,169,243,258,265,269,284,293,294,297,301,303,308,315,316,319,327,328,331,394,397,402,405,406,408],"80":[16,269,270,271,272,284,293,296,297,298,299,300,301,302,303,304,309,310,315,316,319,325,327,328,331,406],"81":10,"82":406,"83":406,"8_8_8":10,"8nm":308,"9":[3,9,10,12,15,16,71,93,115,119,131,143,217,243,244,269,270,297,298,301,302,303,397,405,406,407],"90":407,"9223372036854775807":91,"9223372036854775808":407,"99":406,"9m":407,"abstract":[14,21,113,140,170],"boolean":[7,9,10,12,20,21,96,162,258,284,315,316,371,408],"break":12,"byte":[0,9,12,21,171,172,179,183,194,197,200,205,354,355,357,358,398,408],"case":[3,12,13,15,16,18,97,98,99,100,115,131,140,143,174,177,208,300,405,407],"char":408,"class":[21,23,53,57,59,68,92,103,113,114,121,140,170,172,179,184,194,214,224,228,236,240,266,294,332,342,354,357,359,375,379,405],"default":[0,4,5,6,7,8,9,10,12,13,15,16,18,56,61,63,64,65,72,73,74,92,93,104,120,140,145,147,171,192,206,209,240,245,266,271,292,294,299,303,325,375,397,404,405,407],"do":[1,2,3,4,5,6,7,8,9,10,12,15,405,408],"export":16,"final":[10,38,50],"float":[21,23,25,27,28,36,38,50,103,109,112,194,196,198,208,342,344,346,347,349,350,352,354,356,359,366,368,370,387,388,389,404,407,408],"function":[3,10,15,21,114,404,406],"import":406,"int":[21,22,23,25,29,30,31,32,33,34,36,38,41,42,43,44,45,46,50,68,70,72,73,74,77,81,82,87,88,91,92,97,98,99,100,103,111,114,117,120,123,125,129,130,134,135,136,137,138,140,142,147,154,155,156,158,159,160,161,163,165,166,167,205,214,215,216,217,220,222,223,224,225,226,227,228,229,235,240,247,257,259,260,261,262,264,266,283,285,286,288,289,292,294,314,317,318,323,324,359,367,375,377,378,390,397,404,405],"long":11,"new":[0,1,2,3,4,5,6,7,8,14,15,21,64,65,93,94,95,97,98,99,100,107,114,118,119,171,192,209,213,236,237,238,239,243,244,245,246,247,250,253,258,264,265,269,270,271,272,284,292,293,307,322,325,332,333,396,404,405,406,407,408],"null":[0,10,12,398,403,407],"public":[18,406],"return":[3,7,8,9,10,12,15,21,57,58,59,61,62,63,64,65,68,78,79,80,93,95,96,97,98,99,100,101,102,103,104,109,112,114,117,118,119,123,124,139,140,142,150,168,171,172,175,184,185,187,188,189,200,201,203,204,205,208,212,213,224,226,227,240,243,244,245,246,249,250,252,258,265,266,269,270,271,272,274,277,284,286,293,294,296,297,298,299,300,305,312,313,319,325,329,331,337,339,369,372,377,378,397,404,407],"static":[171,206,236,237],"transient":[18,20],"true":[7,8,9,10,12,20,63,68,69,70,71,72,73,74,75,78,80,83,85,86,93,107,127,128,152,153,176,191,192,209,236,238,239,292,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,343,397,405,406],"while":[3,9,10,12,15,16,38,43,50,199,202,296,342,398,403,404,405,406,407],A:[0,9,10,12,17,93,101,208,236,247,253,264,292,308,319,342,375,397,404,405,407],As:[9,12,15,93,117,174,177,370,405],At:[15,120,147,405],By:[12,15,16,171,206,325,397,404],For:[3,8,9,10,11,12,14,15,16,18,48,52,97,116,140,296,331,359,404,407],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,20,38,43,44,48,50,52,76,81,82,87,88,91,94,95,97,98,99,100,101,103,104,106,109,112,115,118,120,131,143,147,148,192,199,200,202,204,205,208,213,243,244,245,246,247,258,264,265,269,270,271,272,284,292,293,312,325,331,332,348,357,358,397,404,405,407,408],In:[3,12,13,15,18,19,20,71,131,174,178,300,332,342,359,405,406,407],It:[3,4,5,6,7,8,9,10,12,15,16,20,93,115,143,292,342,397,405,407],No:[9,12],On:[12,13,16,18,115,143],One:[0,3,7,9,12,408],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,38,48,50,52,62,68,84,89,94,95,97,98,99,100,103,109,112,113,114,115,126,131,132,140,143,146,148,171,185,192,199,200,202,204,208,209,212,213,242,243,247,253,264,266,268,269,291,292,297,308,309,311,325,329,331,332,341,342,359,397,398,403,404,405,407,408],There:[16,395,398,403,406,408],To:[3,7,9,10,12,14,16,18,63,185,206,292,299,325,397,404,405],With:[7,8,9,10,12],_:10,__add__:[184,185],__array__:[294,296,319],__call__:[140,142,379,380],__contains__:[68,69,70],__delitem__:[171,199,200,202,208,213],__eq__:[22,23,24,37,68,71,172,173,194,195,240,242,266,268,342,343],__getitem__:[56,62,92,93,96,102,114,115,116,117,118,119,140,143,144,145,146,162,169,171,199,200,202,208,224,225,240,243,244,245,246,258,265,266,269,270,271,272,284,293,294,297,298,299,300,302,315,327,375],__index__:405,__iter__:[68,76],__len__:[68,77,114,123,224,226],__mul__:[342,349],__repr__:[68,78,114,124,140,150,171,184,187,201,240,249,266,274],__setitem__:[171,199,200,202,208,213,294,301,302,303,304,316,328],__str__:[68,79,228,230],__truediv__:[184,185,188,342,350],_arrai:15,_bit:10,_dimens:15,_origin:15,_rank:15,_shape:15,a1:15,a2:15,aa:204,abc:[17,185,188,189,191,192,203,206,209,282,312],abort:[21,208,332,334,335,337,339,340,341],abov:[15,81,87,91,93,405],abstracteventloop:[104,404],access:[8,9,10,12,14,15,17,18,19,43,44,250,359,397,405,406],accomplish:331,accord:[9,10,12,15,16,115,143,171,172,174,178],account:[18,48,52,71,407],achiev:[9,12],acid:14,acknowledg:331,actual:[131,171,199,202,204,213,247,264,292,299,331,397,405,407],ad:[16,94,95,96,97,98,99,100,101,102,169,265,293,327,328],adapt:1,add:[16,22,23,36,50,93,240,264,266,292,405],add_done_callback:[103,105,110,359,360],addit:[3,7,8,9,10,12,13,15,16,18,19,22,23,36,50,71,92,93,184,188,240,247,264,266,292,332,341,342,359,397,404,405,407],addition:[15,16,68,192,206,253,292,332,404,405],address:13,advanc:[14,21,92,405],advantag:[14,331],advis:10,affect:[16,92,98,99,100,116,119,250,331,375,404,407],after:[7,8,9,10,12,16,208,247,264,292,331,348,359,397,404,405,407],ag:208,against:407,alia:[21,22,23,31,45,114,130,134,140,152,153,154,155,156,157,158,160,161,240,257,266,283,294,314,396],align:[16,115,143,243,269,297,301,328,331,407],all:[0,3,7,9,10,11,12,13,14,15,19,20,21,38,48,50,52,93,97,98,99,100,101,120,140,147,205,209,247,264,292,300,319,325,331,332,397,404,405,407,408],all_proxi:13,allow:[0,11,12,15,16,17,18,93,292,303,304,325,331,332,397,407],allus:18,along:[10,247,253,264,292,308,397,404,407],alreadi:[7,9,10,12,15,16,106,192,206,247,264,292,332,334,337,338,397,404],also:[1,2,3,7,9,10,11,12,14,15,16,17,38,50,68,71,92,93,97,98,99,100,171,206,247,264,292,303,312,331,332,359,370,397,404,405,406,407,408],altern:[13,331,405],alwai:[3,7,8,9,10,12,93,97,301,302,303,304,316,328,405,407],among:3,amount:[92,97,205,375],amplif:407,an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,48,52,68,75,90,92,93,94,97,98,99,103,104,106,113,114,115,116,119,120,121,122,131,140,142,143,147,148,149,171,174,177,178,184,188,197,199,200,202,205,206,208,213,214,216,224,228,236,240,243,246,247,253,264,266,269,272,292,294,296,297,300,301,303,304,316,325,328,331,332,339,342,359,369,370,375,379,381,390,395,404,405,406,407,408],analog:14,ancestor:8,ani:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,18,21,22,23,26,35,38,39,48,49,50,52,53,54,55,56,57,58,59,60,61,64,93,96,100,102,103,109,114,115,118,122,131,139,140,143,149,162,168,169,171,184,185,186,191,192,199,200,202,204,206,208,209,213,236,237,240,248,258,263,265,266,268,273,275,276,278,279,281,284,287,290,292,293,299,301,303,304,309,315,316,319,325,327,328,331,332,341,342,345,353,397,404,405,406,407,408],anoth:[0,68,69,71,84,89,114,115,126,132,140,143,146,172,173,240,242,266,268,404,405],api:[1,13,14,18],append:[184,185,199,200,202,208,213],appl:16,appli:[0,1,2,3,7,8,9,10,11,12,13,15,18,38,50,92,93,96,102,114,116,140,144,145,162,169,245,258,265,271,284,293,298,309,315,316,375,405,407,408],applic:[16,18,307,311,404,407],application_default_credenti:18,appropri:[18,404],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:12,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,25,36,38,48,50,52,61,71,93,94,96,101,102,114,115,116,119,143,162,169,170,171,205,206,208,247,253,258,264,265,268,274,275,276,278,279,281,284,287,292,293,303,315,316,327,328,331,332,342,370,397,398,403,404,405,407,408],arbitrari:[9,15,21,395,404,405],archiv:16,aren:16,arg0:[224,225,379,380],arg:405,argument:405,arithmet:3,arr:131,arrai:[2,3,4,5,6,7,8,11,14,15,19,21,92,96,102,103,116,119,131,140,145,147,149,162,169,214,216,228,231,240,245,256,258,265,266,271,274,281,284,292,293,294,296,299,300,301,302,303,304,305,309,310,311,314,315,316,318,319,325,327,328,331,332,369,370,372,375,397,404,406,407,408],arrang:331,array_lik:[21,93,214,216,218,240,247,256,264,266,281,292,294,296,301,302,303,304,311,316,319,328,331,369,397,404,405],ascii:408,aspect:[23,25,27,28,36,38,50,407],aspect_ratio:[9,10,12,23,25,27,36,38,50,407],aspect_ratio_soft_constraint:[23,25,28,36,38,50,407],assert:[66,104,242,268,390],assign:[9,10,15,301,302,303,304,316,328,404,405,406],associ:[68,104,179,181,183,200,208,213,266,282,292,294,312,326,337,397],assum:[7,8,9,10,12,15,407],astyp:[294,305],async:[104,332,404,406],asynchron:[14,103,104,105,106,107,108,109,110,112,113,236,294,301,302,303,304,316,319,328,331,332,337,359,406],asyncio:[103,104,106,331,404,406],atom:[8,14,20,332,333,336,404],attempt:[8,18,404,405],attribut:[8,9,405],augment:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,408],auth:18,authent:[0,13],author:[13,18],automat:[1,2,3,4,5,6,7,8,9,10,12,14,15,16,18,110,294,296,332,397,407,408],avail:[0,13,16,354,355,370],averag:3,avif:[7,408],avoid:[10,12,104,115,143,405],await:[103,104,171,201,203,204,206,207,208,209,211,212,213,294,296,297,298,299,300,306,307,308,309,310,311,312,315,319,322,325,327,331,332,372,397,404,405,406],awar:[12,405],ax:[9,291,297,298],b1:12,b:[8,16,71,101,115,143,146,171,176,180,189,197,199,200,202,203,204,205,206,208,212,213,242,252,268,277,405],back:[1,4,5,6,9,10,11,12,14,17,19,332,406],backward:[7,8,9,10,12,92,98,375],bandwidth:14,base:[1,2,3,4,5,6,7,8,9,10,12,15,17,18,21,113,170,171,184,187,190,201,207,240,242,249,266,268,274,305,342,344,347,351,372,373,374,377,378,405,407,408],base_unit:[342,344,346,348,351,352,407],basic:405,bazel:16,bazel_cach:16,bazel_tool:16,bazelisk:16,bazelisk_hom:16,bazelrc:16,bdist_wheel:16,bear:10,becaus:[8,10,331,404,405],becom:[109,112,204,331,340],been:[12,15,103,107,108,247,264,282,292,309,331,332,334,335,337,340,341,397,404],befor:[7,9,10,12,208,292,325,397],begin:[93,103,110,405],behav:116,behavior:[13,15,16,20,93,115,143,208,319,331,405],being:[7,8,9,10,12,16,208,332,404],below:[15,82,88,91],best:[9,10,12],better:[296,404],between:[15,397,404],bfloat16:[12,21,370,408],big:[9,12,408],bill:18,binari:16,binary16:[21,387,408],binary32:[21,388,408],binary64:[21,389,408],bind:[16,192,206,209,292,325,404],bit:[9,10,12,15,21,391,392,393,394,399,400,401,402,408],block:[3,9,10,12,17,104,109,112,199,200,202,296,301,302,303,304,316,319,328,331,332,404,407],blocksiz:[9,12,294,297,298,299,300,307,315,322,325,327,332,397,406],blosc:[9,12,16,294,297,298,299,300,307,315,322,325,327,397,407],blosclz:[9,12],bool:[3,12,21,22,23,24,35,37,38,50,53,55,57,58,59,61,68,69,70,71,72,73,74,75,80,83,85,86,93,103,106,107,108,114,120,127,128,140,147,152,153,171,172,173,176,184,191,192,194,195,209,240,242,263,266,268,290,292,294,320,321,325,330,332,333,335,336,338,341,342,343,359,361,362,365,371,397,405,408],bool_:[21,371],boringssl:16,both:[7,9,10,12,15,38,50,115,143,247,264,292,397,404,407],bound:[3,7,9,10,11,12,15,21,68,71,72,73,74,75,81,82,84,85,86,87,88,89,93,94,96,97,100,102,114,115,120,125,126,127,128,129,130,131,132,135,140,143,145,147,149,152,153,154,155,156,158,162,163,169,171,172,174,177,178,192,206,208,209,210,212,240,247,259,264,266,268,274,285,292,294,309,312,317,321,325,329,354,356,397,404,405,407],boundari:407,box:[114,126],broadcast:[12,93,102,169,243,247,264,265,269,292,293,297,301,303,304,311,316,327,328,331,397,405,407],broader:404,brotli:16,bsd:13,bucket:[2,3,4,5,6,8,10,12,18,193,207,211,397,406],buffer:[3,12,404],bug:16,build:14,build_def:16,build_doc:16,build_ext:16,built:[13,16,370,405],bundl:[13,16],bz2:12,bzip2:[9,12,16],bzl:16,c16:12,c8:12,c:[1,14,17,38,43,50,93,101,204,275,287,294,299,300,315,319,325,327,397,405,407],c_rehash:13,cach:[0,7,8,9,10,12,14,16,21,56,208,209,294,319,321,325,331,354,355,356,397,406],cache_pool:[0,4,5,6,7,8,9,10,12,58,62,64,66,67,274,294,297,298,299,300,315,325,327,331,397,404,406],cacherevalidationbound:[7,8,9,10,12],cafil:18,call:[63,93,103,104,107,110,118,199,200,202,208,238,246,250,299,319,331,334,337,404,405],callabl:[103,105,111,359,360,367,404],callback:[21,105,111,354,357,359,360,367,404],can:[13,14,15,16,18,131,205,243,247,253,264,269,292,297,331,332,354,355,397,404,405,406,407],cancel:[103,106,107,108,331,359,361,362],cancellederror:[106,107],cannot:[92,93,246,332],canon:407,capabl:[12,405],capath:18,captur:[192,209,292,325],care:10,cartesian:114,cast:[7,21,305,372,408],caus:[11,12,405],cc:204,cd:16,cdot:15,cert:[13,18],certain:[15,19],certif:16,chain:[93,405],chang:[15,16,92,95,208,266,292,332,375],channel:[10,397,406],charact:[16,408],characterist:397,check:[7,9,10,12,68,69,70,337,405],child:[66,67],choic:10,choos:407,chosen:[3,9,10,12,397],chunk:[14,21,23,24,25,27,28,29,30,33,34,36,37,38,40,43,47,48,50,51,52,240,247,250,264,266,275,287,292,294,299,300,306,315,325,327,331,397,404],chunk_aspect_ratio:[9,10,12,38,50,397],chunk_aspect_ratio_soft_constraint:[38,50],chunk_el:[9,12,38,50,397],chunk_elements_soft_constraint:[38,50],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,12,240,243,244,245,246,247,248,250,258,260,263,264,265,266,275,287,292,294,306,322,397,404,407,408],chunk_shap:[9,12,38,50,397],chunk_shape_soft_constraint:[38,50],chunk_siz:[10,397,406],chunklayout:[9,10,12,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,240,243,244,245,246,247,250,258,260,263,264,265,266,275,292,294,306,397,404,407],chunkss:407,circumst:7,cl:16,clang:16,clear:[38,50],clevel:[9,12,294,297,298,299,300,307,315,322,325,327,397,407],clone:16,close:[15,68,73],cloud:[14,18,19,331,406],cloudpickl:404,cloudsdk_config:18,cmake:16,cname:[9,12,294,297,298,299,300,307,315,322,325,327,397,407],coalesc:[331,332],code:16,codec:[11,22,23,38,40,50,240,247,251,264,266,276,287,292,294,307,322,397],codec_chunk:[9,10,12,22,38,40,50,407],codec_chunk_aspect_ratio:[38,50],codec_chunk_aspect_ratio_soft_constraint:[38,50],codec_chunk_el:[38,50],codec_chunk_elements_soft_constraint:[38,50],codec_chunk_shap:[38,50],codec_chunk_shape_soft_constraint:[38,50],codecspec:[10,21,53,54,55,240,247,251,264,266,276,292,294,307,397],colexicograph:[9,10,38,43,50,319,407],column:[38,43,50,319,407],com:[13,16],com_facebook_zstd:16,com_google_boringssl:16,com_google_brotli:16,com_google_snappi:16,com_google_tensorstor:16,combin:[1,2,3,4,5,6,7,8,9,10,12,342,397,405,407,408],comma:[13,16],command:[13,16],commit:[21,199,202,204,208,213,319,331,332,337,338,339,340,341,359,363,404],commit_async:[212,331,332,334,337,339],commit_start:[332,338],commit_sync:[171,303,332,337,339],common:[3,7,11,13,19,38,50,140,405],compar:[22,23,24,37,68,71,172,173,194,195,240,242,266,268,342,343],comparison:[242,247,264,268,292,397],compat:[0,7,8,9,10,11,12,13,15,16,114,131,247,264,292,301,303,304,311,316,328,331,397,405,406,407],compil:16,complement:[21,391,392,393,394,408],complet:[15,103,105,106,108,109,112,199,200,202,204,208,213,236,238,239,301,302,303,304,316,319,328,331,359,405,406],complex128:[12,21,373,408],complex64:[12,21,374,408],complex:[3,21,373,374,408],compon:[7,8,9,10,12,22,38,114,120,140,147,184,188,240,247,408],compos:[2,14,15,119,140,146,246,272],composit:[15,405],compress:[6,12,297,298,332,397,406,407],compressed_segment:[10,397,406],compressed_segmentation_block_s:[10,397,406],compression_level:6,compressor:[9,251,276,281,294,299,300,307,315,322,325,327,397,407],comput:[3,11,15,18,114,126,199,200,202,243,269,294,297,298,299,300,315,327,404,405],concaten:13,concis:19,concurr:[0,8,14,17,18,19,103,209,325,331],condit:[18,115,143,208,213,357,358],config:18,configur:[0,14,18],confus:405,conjunct:[15,292,325,397,407],connect:[13,14,18],consecut:[93,405],consequ:[116,119,192,209,292,325],consid:[9,331,407],consist:[7,8,9,10,12,14,93,131,208,405],constant:[1,15,21,214,215,228,232,390,405],constrain:[9,10,11,14,15,247,264,292,397,404,405,407],constraint:[1,2,3,4,5,6,7,8,11,15,22,23,25,28,30,33,34,36,38,41,42,43,44,48,50,52,240,247,250,251,253,264,266,275,276,278,279,281,287,292,342,397,404,407,408],construct:[22,23,25,26,38,39,53,54,56,63,64,65,67,68,72,73,74,75,114,120,121,122,140,147,148,149,172,174,179,180,184,186,194,196,214,215,216,217,240,247,248,266,273,342,344,345,346,347,348,375,376,379,380,381,382],constructor:63,consum:[21,93,103,205,359,405],contain:[3,8,13,15,16,68,69,70,76,93,97,114,126,172,176,348,404,405,406,407],content:[17,21,404],context:[1,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,56,57,58,59,60,61,62,63,64,65,66,67,93,103,191,192,201,203,206,209,268,274,292,294,296,297,298,299,300,305,312,315,325,327,331,332,369,372,397,404,405,406,408],context_a:268,context_b:268,contextresourc:[0,4,5,6,7,8,9,10,12,17,18,20],contigu:[1,68,319],continu:[199,200,202],contrast:405,contribut:10,control:331,conveni:[4,5,6,7,8,9,10,12,18,300],convers:[2,294,296,406],convert:[2,9,22,23,35,38,49,50,53,55,103,104,118,184,191,192,209,240,247,263,264,266,290,292,301,303,304,316,325,328,331,342,353,369,397,405],coordin:[93,405],copi:[0,15,16,171,172,175,184,189,203,240,242,250,252,266,268,277,331,359,364,405],core:[0,14,405],coroutin:[104,113,404],correctli:15,correspond:[9,10,12,15,18,19,20,21,25,36,38,50,84,89,93,94,103,104,126,131,132,236,247,253,264,292,308,359,370,371,373,374,387,388,389,391,392,393,394,395,397,398,399,400,401,402,403,404,405,407,408],cost:15,count:131,cpu:0,crash:331,creat:[1,2,3,4,5,6,7,8,11,14,16,21,56,59,60,62,171,192,206,209,236,237,253,266,292,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,333,404,406,407,408],credenti:[0,18,21,56,406],crt:[13,18],curl:[16,18],current:[0,12,15,16,103,199,200,202,208,294,296,319,331,332,404,406],custom:20,d:[21,68,93,94,95,96,97,98,99,100,101,102,115,116,141,142,143,144,241,244,267,270,290,291,295,298,302,375,376,390,405,406],dask:405,data:[0,1,2,3,7,8,11,14,19,20,185,186,187,188,189,190,201,203,208,240,247,255,264,266,280,292,299,301,303,304,305,307,310,311,316,319,325,328,331,354,355,356,357,358,369,370,371,372,379,380,381,387,388,389,391,392,393,394,395,397,398,401,403,404,405,407,408],data_copy_concurr:[0,4,5,6,7,8,9,10,12,93,103,274,294,297,298,299,300,305,315,325,327,372,397,404,405,406],data_encod:[10,397,406],data_typ:10,dataabc:185,databas:14,dataset:[9,17,18,20,191,294,296,297,298,299,300,301,302,303,304,309,310,314,315,316,318,319,325,327,328,331,332],dataset_3d:406,dataset_futur:406,datatyp:[9,280,297,298,332,397,406],date:16,datetim:12,deadlin:[109,112,366,368],deadlock:[104,404],decod:[0,14,21,53,407],decrypt:13,def:[104,404],defer:405,defin:[0,4,5,6,7,8,9,10,12,15,17,18,20,21,93,114,240,370,404,405,407],del:199,delet:[7,9,10,12,171,199,202,204,213,292,325,397],delete_exist:[7,9,10,12,292,325,332,397,406],delete_rang:[171,204],demand:11,demonstr:406,denot:405,depend:[13,18,93,319,331,405,408],deprec:[12,405],deriv:[11,342,351],describ:[11,15,19,21,22,23],desir:253,detail:[13,14],determin:[7,9,10,15,115,143,171,397,407],determinist:3,develop:18,deviat:[342,407],dexpr:405,diagon:[92,94,375,405],did:[109,112],differ:[3,15,19,96,102,103,162,169,208,247,258,264,265,284,292,293,315,316,322,327,328,397,398,403,404],dim:[21,48,52,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,114,115,117,121,143,147,168,214,216,219,390],dimens:[3,11,12,14,15,21,22,23,25,32,36,38,46,48,50,52,68,72,73,74,75,90,92,94,95,96,97,98,99,100,101,102,114,116,117,118,120,121,123,127,128,131,133,136,140,141,144,147,152,153,157,169,214,217,240,241,243,244,247,253,264,265,266,267,269,270,278,283,286,290,291,292,293,294,295,297,298,302,308,318,327,328,332,342,346,375,376,396,397,404,406],dimension:[3,14,15,21,93,114,294,405],dimension_separ:[12,294,299,300,315,325,327,397],dimension_unit:[9,10,11,240,247,253,264,266,278,292,294,308,397,404,407],dimensionless:[9,342,407],dimexpress:[21,92,93,94,95,96,97,98,99,100,101,102,114,116,140,144,240,244,266,270,294,298,302,375,405],dimselectionlik:[92,101,114,118,375,376],direct:93,directli:[0,1,2,3,7,8,9,10,11,12,15,16,17,18,131,140,185,275,276,278,279,281,287,301,302,303,304,316,328,342,404,405,407,408],directori:[13,16,17,18,19,20],disabl:[12,13],discrep:[115,143],disjoint:331,dist:16,distribut:[13,16],divid:[342,350,405],divisor:[342,350],do_read:404,do_writ:404,doc:16,document:[13,19,407,408],doe:[7,9,10,12,13,15,16,17,63,93,95,97,98,99,100,131,140,275,276,278,279,281,282,287,292,299,312,325,331,342,370,397,405,407],domain:[3,11,14,21,92,93,94,95,96,97,98,99,100,101,102,103,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,141,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,160,162,163,166,167,169,240,241,243,244,245,246,247,253,254,258,259,261,262,264,265,266,267,269,272,278,279,285,286,287,288,289,291,292,293,294,295,296,297,298,300,301,302,303,304,308,309,316,317,318,319,322,323,324,327,328,331,375,390,396,397,404,405,406,407],domin:405,don:16,done:[14,16,18,97,103,104,108,236,238,239,247,264,292,359,365,397],dot:12,doubl:[21,342,389,407,408],download:16,downsampl:[7,21,377,378,408],downsample_factor:[3,21,377,378],downsample_method:3,downsamplemethod:[3,377,378],driver:[0,14,21,53,93,103,171,185,186,187,188,189,190,191,192,193,199,200,201,202,203,204,205,206,207,208,209,211,212,213,240,251,253,266,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,291,292,293,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,342,372,397,405,406,407,408],drop:[15,331],dtype:[1,2,3,4,5,6,7,8,9,10,11,12,21,93,103,240,242,247,248,249,252,255,260,263,264,266,277,279,280,281,287,292,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,314,315,316,318,319,322,325,327,328,331,332,369,370,371,372,373,374,379,380,381,382,383,384,385,386,387,388,389,391,392,393,394,395,397,398,399,400,401,402,403,404,405,406,407,408],due:[10,17,208],dummi:[93,405],duplic:[95,405],durabl:[14,199,202,204,213,331,359],dynam:13,e:[9,10,12,13,15,16,18,21,38,43,50,91,93,97,98,99,100,115,119,143,208,209,250,319,325,332,404,405,407],each:[0,3,7,8,9,10,11,12,13,15,25,36,63,95,97,98,99,100,114,120,127,128,131,133,140,147,152,153,157,240,247,250,253,264,266,278,292,294,296,308,397,404,405,407,408],earlier:[11,16],effect:[11,15,93,115,143,192,209,266,275,276,278,279,281,287,292,325,334,337,405],effici:[3,10,14,15,22,47,48,51,52,331,332,407,408],effort:16,either:[7,9,10,12,15,18,21,68,115,118,143,301,302,303,304,316,328,331,332,340,375,405],element:[2,3,10,22,23,25,29,30,36,38,43,44,49,50,93,114,138,140,167,240,262,266,274,289,294,324,405,407],elements_soft_constraint:[23,25,30,36,38,50,407],empti:[8,9,15,68,80,84,89,90,115,143,172,174,176,177,178,197,213,247,264,292,342,357,358,397,404,405,407],enabl:[7,9,10,12,14,18,68,76,140,331,404],encod:[0,5,9,12,14,16,21,53,397,406,407,408],end:[18,19,20,101,131,405],endian:[9,10,12,408],engin:18,enhanc:405,ensur:[16,103,110,185,253,331,332,405],entir:[8,10,12,15,115,143,296,331,348,405,407,408],entri:[194,197],environ:[16,18],epoch:[7,109,112,194,198,208],equal:[0,1,9,10,12,15,21,22,23,24,37,43,44,61,68,71,81,82,87,88,91,93,94,119,172,173,194,195,240,242,243,244,246,247,264,266,268,269,270,272,282,292,297,300,301,304,307,311,312,342,343,390,397,404,405,407],equival:[3,9,12,38,50,68,77,93,94,97,98,99,101,114,119,131,141,163,166,167,208,241,247,259,261,262,264,267,285,288,289,292,295,296,300,317,318,323,324,325,331,339,346,397,404,405,407],error:[8,9,10,11,12,15,18,103,104,109,112,115,143,199,200,202,208,236,238,247,264,292,339,397,404,405],escap:16,etc:[3,13,16,18,322],even:[3,8,14,61,199,202,405],evenli:407,event:[104,404],everi:[7,8,9,10,12,14,15,94,404,407],evict:0,exactli:[3,9,10,12,93,404,405],exampl:[16,186,206,332,404,406],except:[9,10,12,97,103,104,107,109,110,199,200,202,236,238,247,264,268,292,332,359,366,397,404,405,407],excess:10,exclud:19,exclus:[15,68,72,81,82,114,120,125,140,147,154,172,174,177,405],exclusive_max:[9,10,12,15,68,69,70,71,72,73,76,78,79,81,82,83,84,85,86,87,89,91,114,115,116,117,118,119,120,122,125,126,127,128,131,132,143,147,148,154,168,172,174,177,243,244,245,258,265,269,287,292,297,301,322,405],exclusive_min:[68,82,88],execut:[0,16,103,110,404],exist:[1,2,3,4,5,6,7,8,9,10,12,16,93,97,115,143,147,148,199,200,202,204,206,208,213,247,253,264,292,301,303,304,316,325,328,331,357,358,379,381,404,405,407,408],exit:332,expect:[13,16,113,253,405],explicit:[7,15,68,114,119,120,127,128,140,147,152,153,240,243,246,247,264,266,269,272,292,294,297,300,301,304,331,397,404,405,407],explicitli:[9,10,12,110,405,407],expos:8,expr:[97,114,116,140,144,240,244,246,266,270,272,294,298,300,302,304,405],express:[14,21,68,78,92,93,95,96,97,98,99,100,101,102,114,116,131,140,144,240,244,266,270,294,298,302,375,396],extend:[1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,20],extens:[12,16,93,370],extent:[12,15,138,199,202,204,213,407],extern:[192,208,209,292,325,332],extract:[92,94,375],f2:12,f4:[12,281,397],f8:12,f:[12,103,294,319,331,397,404],facil:13,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,12,18,208,332,404,405,408],fake:18,fals:[7,9,10,12,20,23,35,53,55,57,58,59,61,69,70,72,73,74,75,83,85,86,91,93,104,107,127,128,152,153,176,184,191,192,209,236,238,239,240,263,266,290,292,294,321,325,332,333,405,407],faster:16,fastest:[9,12,16],fc44652a42b3:16,fetch:16,few:405,fewer:[0,405],field:[12,84,89],file:[4,6,8,9,10,12,13,14,16,18,19,20,185,186,187,188,189,190,191,201,203,331,332,406],file_io_concurr:[0,17,66,67,191,201,203],filesystem:[0,14,17,19,406],fill:[14,101,240,247,256,264,266,281,292,294,311,397,406,407],fill_valu:[11,12,240,242,247,256,264,266,281,292,294,299,300,311,315,322,325,327,397,407],filter:[12,251,294,299,300,307,315,322,325,327,397,407],find:[13,16],fine:[301,302,303,304,316,328],finit:[15,68,75,76,83,91,131,247,264,292,397,404,407],first:[10,15,16,93,94,102,169,265,293,327,328,405,407],fix:[331,398,403],fix_resizable_bound:[294,321],flag:[16,84,89,126,132],flatten:405,float16:[12,21,387,408],float32:[9,10,12,21,281,306,372,374,388,397,408],float64:[9,12,21,373,389,408],fly:3,flyeem:406,flyem:397,follow:[3,9,10,11,12,13,15,16,18,113,115,143,247,264,292,342,397,404,405,407,408],forc:[103,110],form:[15,62,300,405],format:[9,10,12,13,14,397,407,408],fortran:[9,10,38,43,50,319,407],forward:359,found:200,fraction:208,framework:56,free:404,frequent:3,fresh:[7,8,9,10,12],from:[0,1,2,3,7,8,9,10,11,12,14,15,17,18,21,22,23,26,38,39,50,53,54,56,59,60,64,65,66,67,93,94,101,114,117,120,121,122,131,140,147,148,149,172,174,184,186,194,196,205,206,208,240,247,248,250,266,273,296,331,332,342,344,345,347,348,351,369,375,376,379,381,397,405,406,407],fsync:331,fulfil:[354,356],full:[8,12,15,20,93,325,405,407],fulli:[12,14,15,140,192,209,292,325,331],further:407,futur:[16,21,103,104,105,106,107,108,109,110,111,112,113,171,204,205,206,208,213,236,237,238,239,294,319,321,331,332,337,340,359,360,363,364,367,397,406],futurelik:[21,103,104,113,404],g:[12,13,18,21,93,97,98,99,100,209,250,325,332,404,405],gc:[2,3,8,10,12,19,20,193,207,211,331,397,406],gcc:16,gce:18,gcloud:18,gcs_request_concurr:[18,397,406],gcs_request_retri:[18,397,406],gcs_user_project:[18,397,406],gener:[16,93,171,179,181,194,195,196,197,198,208,213,300,342,354,355,357,358,404,405,407],get_running_loop:[104,404],get_valu:104,git:16,github:16,given:[0,3,17,56,62,68,70,93,97,98,99,100,405,407],global:[0,18,404],good:10,googl:[14,16,18,331,406],google_application_credenti:[13,18],googleapi:13,grain:[301,302,303,304,316,328],granular:[10,407],graph:[192,209,292,325],grid:[9,10,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,41,42,47,50,51,331,407],grid_origin:[9,10,12,22,38,41,42,48,50,52,243,244,245,246,247,248,250,258,260,263,265,287,306,322,407],grid_origin_soft_constraint:[22,38,42,48,50,52,407],grid_soft_constraint:[25,36],group:[10,21,332],gs:[4,5,6,18,19,193,211,406],gsutil:18,guarante:[8,14,199,202,204,208,213,331,332,359,370],guid:14,gzip:[9,10,12,397,406,407],ha:[9,10,11,12,15,18,93,100,101,103,106,107,108,192,204,209,247,264,282,292,311,325,331,332,334,335,337,338,340,341,359,397,404,405],half:[0,21,68,72,171,172,174,387,408],handl:[18,21,56,57,62,103,228,230,236,294,359,404],hard:[9,10,12,15,22,23,25,33,36,38,41,43,44,48,50,52,407],hash:[10,397,406],have:[9,10,11,12,15,16,18,68,95,115,143,192,209,243,247,264,269,292,297,309,325,332,370,397,405,406,407],header:[9,12],hemibrain:397,here:9,hierarch:407,high:14,higher:[4,9,12,208],hit:406,hold:359,hostnam:13,how:[13,18,407],howev:[3,12,16,18,93,103,140,404],http:[16,18],http_archiv:16,http_proxi:13,https_proxi:13,hull:[11,68,84,114,126],i1:12,i2:12,i4:[12,397],i8:12,i:[0,9,10,12,14,15,18,38,43,48,50,52,91,93,97,101,115,119,143,199,200,202,208,216,217,275,276,278,279,281,287,319,331,332,405,406,407],id:[0,10,12,18,62,294,299,300,307,315,322,325,327,397,407],ident:[9,10,15,119,147,148,209,268,325,397,406],identifi:[0,7,9,12,15,16,19,114,115,117,143,171,194,197,404,405,407,408],ieee:[21,387,388,389,408],iexpr:405,if_equ:[213,357,358],if_not_equ:[208,354,355,404],ignor:[1,2,3,4,5,6,7,8,9,10,12,48,52,407,408],ijg:10,imag:[4,5,6,10],imaginari:408,immedi:[15,104,113,405],immut:[114,342,404,405],implement:[8,12,14,16,208],impli:[266,275,276,278,279,281,287],implicit:[9,10,11,12,15,21,68,72,73,74,75,84,85,86,89,93,94,114,115,120,126,127,128,132,140,143,147,152,153,247,264,292,397,404,405,407],implicit_low:[68,71,72,73,74,75,85],implicit_lower_bound:[114,120,127,140,147,152,168,405],implicit_upp:[68,71,72,73,74,75,78,86],implicit_upper_bound:[114,120,128,140,147,153,168],implicitli:[9,10,12,15,405,406],impos:[15,342,407],improv:[331,332],includ:[9,10,12,13,14,16,20,21,61,114,118,266,275,276,278,279,281,287,301,303,304,316,319,325,328,331,405,407],include_default:[23,35,53,55,57,58,59,61,184,191,240,263,266,290],inclus:[15,68,72,73,74,87,88,114,120,129,130,135,140,147,155,156,158,163,172,174,178,240,259,266,285,294,317,405],inclusive_max:[15,68,71,73,81,82,86,87,88,91,114,120,129,155,390],inclusive_min:[9,10,12,15,68,69,70,71,72,73,74,76,78,79,81,82,83,84,85,86,87,88,89,91,114,115,116,117,118,119,120,122,125,126,127,128,129,130,131,132,133,135,137,138,143,147,148,156,168,172,174,178,243,244,245,258,265,269,287,292,297,301,322,390],incompat:[11,48,52,247,264,292,397,404],inconsist:8,increment:[16,247,253,264,292,308,397,404,407],indefinit:404,independ:[10,15,21,240,397,407],index:[3,10,14,22,46,68,70,92,94,95,96,97,98,99,100,101,102,115,116,117,118,119,120,121,122,131,136,142,143,144,145,146,147,148,149,151,162,164,169,170,214,216,224,228,243,245,246,247,253,258,264,265,269,271,272,279,284,291,292,293,297,299,300,301,303,304,308,315,316,327,328,375,390,396,397,404,407],index_arrai:[15,149,168,214,216,218,246,271,272,284,293,299,300,304,315,327],index_array_bound:[15,149],index_exp:[114,131,404],index_rang:[147,168,214,216,219],indexdomain:[9,10,12,15,21,22,48,52,68,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,148,151,240,243,244,245,246,247,254,258,264,265,266,269,279,292,294,297,298,301,302,309,397,404,405,407],indexerror:[93,95,97,98,99,100,246,405],indexinterv:15,indextransform:[1,2,3,4,5,6,7,8,9,10,11,12,15,21,93,94,95,96,97,98,99,100,101,102,114,116,119,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,214,215,216,217,224,228,240,245,246,258,265,266,269,270,271,272,284,291,293,294,297,298,300,304,396,405,408],indic:[3,9,10,12,15,21,61,68,72,73,74,75,76,83,85,86,90,92,93,96,97,101,102,114,115,120,127,128,131,140,142,143,145,147,152,153,162,169,172,174,176,177,178,179,182,197,208,213,228,240,245,246,247,253,258,264,265,266,271,272,274,284,292,293,294,299,300,303,304,308,315,316,320,325,327,328,330,331,332,335,336,338,341,342,359,375,376,390,397,404,405,407],indicaet:9,indirectli:[140,407],individu:[8,10,11,405,407],ineffici:10,inf:[15,21,48,52,68,72,73,75,79,81,82,87,88,93,94,95,96,100,102,119,120,122,144,145,146,147,149,162,169,180,196,208,390,396,404,405],infinit:[15,68,131,247,264,292,397,404,407],info:10,inform:[13,16,18,397],infti:15,inherit:[56,64,65,66],init:0,initi:[1,16,404,405],inlin:405,inner:[12,43,44,68,69],inner_ord:[9,10,12,22,38,43,44,45,46,49,50,243,244,245,246,247,248,250,258,263,265,287,306,322,397,407],inner_order_soft_constraint:[22,38,43,44,50,407],innermost:[22,38,43,50,407],input:[1,2,3,7,9,10,11,12,15,21,92,93,94,95,96,97,98,99,100,101,102,118,140,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,169,214,217,247,264,291,292,375,396,397,404,405,408],input_dimens:[11,15,119,146,147,148,149,168,214,217,220,271,290,299,327,405,406],input_exclusive_max:[11,15,93,103,140,143,147,149,152,153,154,168,269,270,271,272,284,290,292,293,294,297,298,299,300,305,315,325,327,372,397,405,406],input_inclusive_max:[15,97,140,147,155],input_inclusive_min:[11,15,93,97,98,99,103,140,143,147,149,152,153,154,155,156,157,158,168,269,270,271,272,284,290,292,293,294,297,298,299,300,305,315,325,327,372,397,405,406],input_label:[15,93,94,96,97,98,99,100,101,102,140,143,147,149,151,157,159,161,165,168,269,270,297,298,397,405,406],input_origin:[140,156,158],input_rank:[15,93,119,140,142,143,144,146,147,152,153,159,161,215,217,246,272,300,396,405],input_shap:[15,94,98,99,100,101,140,147,151,152,153,154,155,156,157,158,159,160,161,165,168,216,246,269,270,271,272,284,293,300,304,405],insert:405,instal:[14,18],instanc:[0,63,106,379,380],instead:[7,8,9,10,12,13,16,103,131,140,185,208,300,331,397,404,405],instruct:14,int16:[9,10,12,21,391,408],int32:[1,2,9,10,11,12,21,93,242,314,318,392,397,405,408],int64:[9,12,21,393,408],int8:[9,10,12,21,394,408],integ:[0,1,2,3,7,9,10,11,12,15,18,21,68,96,116,117,119,162,258,284,315,316,391,392,393,394,399,400,401,402,407,408],integr:405,intend:[16,18,19,20],interdepend:[192,209,292,325],interfac:[14,171,236,301,302,303,304,316,328,359],interleav:405,intermedi:405,intern:[9,10,208],interoper:[294,296,370,406],interpret:[131,179,182,342,405,407,408],interrupt:[109,112],intersect:[68,89,94,114,132],interv:[3,15,21,48,52,68,69,70,71,72,73,74,75,76,77,79,81,82,83,87,88,91,171,172],introduc:14,introspect:62,invoc:[16,405],invok:[16,103,105],involv:[15,405],ip:13,irrespect:[97,208],isol:[14,332],isomorph:[192,209,292,325],issu:331,iter:[68,76],its:[15,17,56,59,60,64,114,122,140,149,208,240,248,342,345,405,407],itself:[8,331,359,405],j:[15,115,143],janelia:397,jax:[12,370],join:[7,8,9,10,12,184,188],jointli:331,jpeg:[7,10,16,408],jpeg_qual:10,jpg:5,json:[0,1,2,3,4,5,6,7,9,11,12,13,14,15,17,18,19,20,21,22,23,26,35,38,39,40,41,42,43,44,47,49,50,51,53,54,55,56,57,58,59,60,61,64,114,122,139,140,149,168,171,184,186,187,191,201,206,240,242,248,249,263,266,268,273,274,290,342,345,353,395,397,407],json_point:8,just:[15,405,406],k:[101,115,143],keep:331,kei:[8,9,10,12,14,21,56,62,171,172,174,176,179,183,184,185,188,189,190,193,194,197,199,200,202,203,204,205,206,207,208,209,210,211,212,213,266,282,292,294,312,331,332,397,406,407],kept:[10,16],key_encod:12,keyboard:[109,112],keyboardinterrupt:[109,112],keyerror:[199,200,202,208],keyrang:[171,172,173,174,175,176,177,178,204,205],keyvaluestorebackedchunkdriv:[7,9,10,12,408],keyword:103,kvstore:[2,3,4,5,6,7,8,9,10,12,17,18,19,20,21,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,266,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,291,292,293,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,397,404,406],kvstoreurl:[7,8,9,10,12,17,18,19,20],label:[9,10,12,14,15,21,68,71,72,73,74,75,78,79,84,89,90,92,93,94,95,101,114,116,117,118,120,121,122,126,132,133,140,144,147,157,243,244,245,246,247,254,258,264,265,269,292,297,298,301,302,309,375,376,397,404,405,407],lambda:103,larg:[14,205,296],larger:[15,406],largest:10,last:[15,93,107,117,118,199,200,202,208,238,246,405],latenc:[14,331],later:[16,17],latest:16,latter:12,layer:[8,9,10,12,331,407],layout:[14,21,22,23,37,38,45,46,48,49,50,52,240,247,250,264,266,275,292,294,306,319,397,404],lead:[12,15,104,348,407],least:[0,9,15,115,143,405],leav:[9,97,98,99,404],left:[10,15,115,143,397,404],legaci:405,len:123,length:[3,9,12,15,21,142,398,403,405,407],leq:15,less:[15,247,253,264,292,308,342,346,397,404,405,407],level:[2,6,9,12,14,208,406,407],lexicograph:[3,38,43,50,171,172,174,178,319,407],libcurl:13,libjpeg:16,libpng:16,librari:[12,14,131,140,405],lightweight:405,like:[13,14,18,116,119,253,397,405],likewis:405,limit:[0,14,15,18,19,66,67,359,404],link:[13,16,236,237,238,239],linux:[13,16],list:[9,13,15,16,76,117,171,204,205,208,377,378,405],liter:405,littl:[10,12,408],load:16,local:[0,13,14,17,18,19],localhost:18,locat:[13,18,322,397],lock:17,logic:[15,114,331,408],login:18,longer:359,loop:[104,404],lost:8,low:[10,15],lower:[3,4,15,68,72,73,74,75,82,85,88,94,97,100,114,120,127,130,131,135,140,147,152,156,158,163,172,174,178,240,259,266,285,294,317,405,407],lowest:3,lru:0,lz4:[9,12,16,294,297,298,299,300,307,315,322,325,327,397,407],lz4hc:[9,12],m1:15,m2:15,m:[15,16,407],mac:13,machin:[14,17,18],maco:16,made:[208,332,404],mai:[0,3,8,9,10,11,12,13,15,16,17,18,19,20,68,97,98,99,100,101,104,113,114,118,120,147,171,199,200,202,206,208,209,212,236,253,294,296,301,303,304,307,316,319,322,325,328,329,331,337,341,342,354,356,375,397,404,405,407,408],main:[109,112],major:[38,43,50,319,407],make:[13,16,407],manag:[21,56,332],mani:[13,15,18,93,140,405],manipul:20,manual:[15,16],map:[0,11,15,21,93,94,95,96,97,98,99,100,101,102,116,119,140,142,143,144,145,146,147,148,149,162,164,169,171,214,215,216,217,224,291,396,405],mark:[15,68,106,236,238,239,405],match:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,20,84,89,95,97,98,99,100,115,143,205,208,213,247,264,292,357,358,397,404,405,407,408],mathrm:[10,15],mathtt:15,max:3,max_retri:18,maximum:[0,3,18,109,112],mayb:16,mean:[3,7,8,9,10,12,405],meaning:91,mechan:[4,5,6,7,8,9,10,12,14,171,359,405],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,38,40,41,42,43,44,47,50,51,61,407,408],memori:[0,1,7,9,10,12,14,15,19,21,171,192,199,200,202,204,205,206,208,209,212,213,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,291,292,293,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,369,397,404,406,408],memory_key_value_stor:[20,192,209,274,294,297,298,299,300,312,315,325,327,397],mere:[299,331,359],merg:[25,36,247,264,292,397,404,407],metadata:[7,9,10,12,18,253,275,276,278,279,280,281,283,286,287,290,291,294,297,298,299,300,315,325,327,332,397,406],metadata_kei:12,metdata:9,method:[3,9,12,18,21,214,221,228,300,377,378,405,406],microsoft:16,middl:406,million:[9,10,12],min:[3,15],mind:331,minim:[397,405],minimal_spec:325,minimum:[3,114,126],minishard:10,minishard_bit:[10,397,406],minishard_index_encod:[10,397,406],mismatch:15,miss:[171,179,180,182,208,213,407],mix:405,mode:[3,16,93,96,102,266,292,294,313,325,332,397],model:12,modif:[21,332],modifi:[8,15,114,184,192,250,331],modul:[16,404],more:[4,5,6,7,8,9,10,12,13,15,16,19,93,118,300,331,404,405,408],most:[3,10,12,13,15,18,19,93,107,118,120,147,171,199,200,202,208,238,246,300,331,405,407],ms:13,msvc:16,much:16,multi:[14,20,21,294],multipl:[0,3,10,12,14,15,16,17,18,20,253,301,302,303,304,316,328,331,332,397,404,405],multipli:[9,10,15,342,344,346,347,348,349,352,407],multiscal:10,multiscale_metadata:[10,397,406],murmurhash3_x86_128:10,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,38,50,63,84,89,93,101,110,119,208,243,246,247,264,269,272,292,297,300,301,304,325,331,397,404,405,407,408],my:[2,3,4,5,6,8,10,12,18,193,207,211],n5:[7,14,268,273,274,277,278,280,282,283,286,290,291,292,297,298,301,302,308,309,312,332,397,407],n:[15,21,93,114,405],name:[9,10,12,16,228,230,233,379,382,383,404,405],nanomet:10,nasm:16,nativ:[9,12,14],ndarrai:[294,296,404,405,406],ndim:[22,23,31,45,114,134,140,161,240,257,266,283,294,314],nearest:3,necessari:[13,15,115,143,325,408],necessarili:[93,405,407],need:[15,16,93,140,342,405,407],neg:[101,117,131,405,407],neither:[7,8,9,10,12,15,325,397,404],neq:15,nest:[1,11,15,192,206,292],nesteddirectorystor:12,net_zlib:16,network:[14,17,18],neuroglanc:[10,14,397,406,407],neuroglancer_multiscale_volum:10,neuroglancer_precomput:[7,253,397,406,407],neuroglancer_uint64_sharded_v1:[10,397,406],never:[7,319,331,405],newaxi:[21,93,94,396,405],newer:[354,355],newli:94,nghttp2:16,nm:[9,10,253,278,308,343,344,345,347,348,349,350,351,353,407],no_proxi:13,non:[3,7,8,9,10,12,15,16,18,84,89,93,101,115,143,171,206,247,264,292,332,357,358,359,397,404,405,407],none:[15,18,21,22,23,25,27,28,29,30,31,32,33,34,36,38,41,42,43,44,48,49,50,52,56,63,64,65,68,72,73,74,75,92,93,97,98,99,100,103,104,105,109,110,111,112,114,120,131,140,147,148,171,184,192,199,202,204,205,206,208,209,210,212,213,214,218,219,220,223,236,238,239,240,243,244,245,246,247,251,253,254,255,256,257,258,260,264,265,266,269,270,271,272,276,278,279,280,281,282,283,284,286,291,292,293,294,296,299,300,307,308,311,312,315,322,325,326,327,329,332,334,337,339,340,359,360,363,364,366,367,368,369,375,396,397,404,405],nonzero:[93,405],nor:[7,9,10,12,15,325,397,404],normal:[4,5,6,7,8,9,10,12,13,15,16,115,143,247,264,292,331,332,397,405],note:[3,9,10,13,15,16,93,247,264,292,397,404],now:331,np:[131,296,404,406],num_channel:[10,397,406],number:[0,3,4,5,6,7,9,10,15,16,18,21,22,23,25,29,30,32,36,38,46,50,95,97,98,99,100,109,112,114,120,123,131,136,138,140,147,167,205,240,262,266,289,294,318,324,342,348,373,374,405,407,408],numer:[3,15,342,405,407],numpi:[12,15,21,92,93,96,97,102,114,131,140,145,162,169,240,245,246,258,265,266,271,272,284,293,294,296,299,303,315,316,327,328,370,371,373,374,375,379,381,387,388,389,391,392,393,394,395,398,399,400,401,402,403,406],numpy_dtyp:[379,384],numpyindexingspec:[92,93,96,102,140,145,162,169,240,245,258,265,266,271,284,293,294,299,303,315,316,327,328,375],o:[0,14,199,200,202,275,276,278,279,281,287,319,405,406],oauth2:13,obj:[145,405],object:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,84,89,103,104,109,112,114,121,126,131,132,147,148,193,207,211,236,238,239,250,296,331,332,342,359,366,368,379,380,386,405,406,407,408],object_:[395,398,403],observ:[332,404],obtain:[9,12,93,114,250,294,321,405,406],occupi:408,occur:[15,103,199,200,202,405],odd:3,offer:3,offici:12,offset:[3,11,15,22,48,52,92,98,99,119,146,147,148,149,165,168,214,215,216,217,222,290,375,405,406,407],often:[18,331],oindex:[92,96,140,145,162,240,245,246,258,265,266,271,272,284,293,294,299,300,303,304,315,316,327,328,375],older:[7,8,9,10,12,208,354,356],omit:[11,397,405],onc:[15,21,118,213,331,332,341,359,404],one:[9,12,13,15,18,93,94,115,120,143,147,247,264,292,300,397,404,405,407],ones:9,onli:[0,3,7,8,9,10,11,12,13,15,16,17,38,48,50,52,93,94,103,120,147,213,247,264,275,276,278,279,281,287,292,313,319,331,332,359,397,404,405,406,407],onto:405,op1:405,open:[1,2,3,4,5,6,7,8,9,10,11,12,14,21,68,72,103,171,172,174,192,199,200,201,202,203,204,205,206,207,208,209,211,212,213,253,266,292,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,325,327,328,331,332,341,404,405,406,407,408],openssl:13,oper:[0,7,8,9,10,11,12,13,14,15,16,17,21,93,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,112,116,119,140,145,162,169,170,171,179,199,202,204,206,208,212,213,236,245,258,265,271,284,293,294,299,301,302,303,304,316,326,328,329,331,341,359,397,404,405],opn:405,opt:16,optim:[12,16],optimist:14,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,68,114,240,247,264,266,275,276,278,279,281,287,292,354,357,397,404,407,408],order:[9,10,15,16,18,21,22,38,43,44,50,93,101,140,141,171,172,174,178,205,240,241,266,267,275,287,294,295,299,300,315,319,325,327,331,397,405,407,408],org:16,org_blosc_cblosc:16,org_lz4:16,org_nghttp2:16,org_sourceware_bzip2:16,org_tukaani_xz:16,origin:[3,9,10,12,15,22,38,41,42,50,92,97,98,99,100,114,130,135,140,158,163,192,209,240,247,259,264,266,285,292,294,317,325,375,397,404,405,407],orthogon:[96,162,258,284,315,316,405],os:13,other:[3,9,10,12,15,16,22,23,24,25,36,37,48,52,63,68,70,71,84,89,93,114,115,120,126,132,140,172,173,194,195,199,200,202,240,242,266,268,300,342,343,404,405,407],otherwis:[1,2,3,7,9,10,11,12,15,16,18,72,73,74,104,115,120,143,147,339,407,408],out:[15,93,94,95,96,97,98,99,100,101,102,143,144,145,146,147,148,149,162,169,291,396,405],outer:[92,96,140,162,240,258,266,284,294,315,316,375],output:[11,16,21,92,93,94,95,96,97,98,99,100,101,102,116,119,140,142,143,144,145,146,147,148,149,162,164,165,168,169,214,215,216,217,224,226,227,228,246,247,264,271,272,284,290,291,292,293,299,300,304,315,327,375,396,397,404,405,406],output_rank:[119,140,142,165,246,272,300,301,304],output_user_root:16,outputindexmap:[15,21,119,140,146,147,148,164,165,168,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,246,272,300,304],outputindexmethod:[21,214,221,224,228,229,230,231,232,233,234,235],outsid:[332,405],over:[3,13,15,68,76,119,147,148,331,405,407],overlap:[8,11],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20,292,325,397,408],overridden:[9,16,192,206,292,397],own:18,pack:12,pai:18,pair:[20,236,237,342,347],paramet:[9,10,12,18,19,21,25,36,38,50,53,61,62,64,65,72,73,74,75,84,89,95,97,98,99,100,101,104,109,112,116,117,118,119,120,121,126,132,142,147,148,174,192,199,200,202,204,205,206,208,209,213,243,246,247,264,269,272,292,297,300,301,303,304,316,319,325,328,331,369,397,404,407,408],parent:[0,1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,56,64,65,66,67,408],pars:[56,59,65,171,184,348,407],part:[16,22,38,240,247,253,375],partial:[7,9,10,12,15,397],particular:[0,14],particularli:[91,404],partit:[296,407],pass:[16,21,354,357],path:[4,5,6,7,8,9,10,12,13,14,16,17,18,19,20,171,184,185,186,187,188,189,190,191,192,193,199,200,201,202,203,204,206,207,208,209,211,213,282,312,332,397,406],pattern:103,pem:13,pend:0,pep:405,per:[9,10,12,15,23,25,29,30,36,407],perfect:405,perfectli:[331,405],perform:[2,3,10,14,15,92,199,202,204,206,212,213,275,276,278,279,281,287,301,302,303,304,316,319,328,329,397,404,405,406,407],permiss:18,permit:[7,8,9,10,12,15,92,93,101,116,119,247,264,292,397,404,405],permut:[15,22,38,43,44,50,407],persist:[12,332],physic:[9,21,240,247,253,264,266,278,292,294,308,342,397,404,407],pick:10,pip:16,place:[10,13,93],plain:92,platform:[12,16],plu:405,pm:15,png:[7,16,408],point:[21,331,332,342,370,387,388,389,407,408],pointer:8,polici:[294,321],pool:[0,209,325,397,404],portion:[348,407],posit:[3,11,15,247,264,292,294,311,397,405,406],posix:[16,17],possibl:[9,10,15,16,322,404],potenti:405,power:405,pre:16,prebuilt:16,preced:[13,38,50,247,264,292,397,404,407],precis:[21,38,50,331,342,387,388,389,395,398,403,407,408],precomput:[10,14,407],predecessor:405,prefer:[38,50,407],prefix:[18,19,20,171,184,190,207,405],prepar:13,presenc:8,present:[3,9,15],preserv:404,preset:9,preshift_bit:[10,397,406],prevent:16,previou:405,previous:[4,5,6,7,8,9,10,12,17,18,20,103,111,206,397,404],primarili:[62,68,116,119],print:[13,72,73,74,75,79,103,251,253,254,255,256,260,280,283,286,291,404],prior:[7,8,9,10,12,16,95,97,98,99,100,404,405],problem:[12,18],process:[8,14,17,296],produc:[21,103,109,112,236,405],product:[114,138],progress:16,project:[16,18],project_id:18,promis:[21,103,107,236,237,238,239],propag:[11,84,89,126,132],properti:[3,9,10,12,14,19,152,153,154,155,156,157,158,160,250,332,397,404,407,408],propos:405,protocol:[17,405],provid:[8,9,10,12,13,14,16,17,18,103,331,332,359,405],purpos:[20,116,404,405],py:[16,114,121,145],python3:16,python:[1,12,14,21,68,78,303,304,395,398,403,405],qualiti:[4,5,10],quaniti:[342,407],quantiti:[21,247,253,264,292,308,342,346,397,404,407],quantiz:4,queri:[14,103,107,108],queued_for_writeback_bytes_limit:0,quit:3,r:[176,313],rais:[48,52,76,95,97,98,99,100,103,109,112,118,131,199,200,202,205,208,243,244,245,246,247,258,264,265,269,270,271,272,284,292,293,332,339,397,404],rang:[5,15,68,92,98,99,100,101,171,172,173,174,175,176,177,178,204,205,216,217,331,375,376,405],rank:[1,2,3,4,5,6,7,8,9,10,11,12,15,22,23,25,31,32,36,38,43,45,46,48,50,52,93,94,95,96,97,98,99,100,101,102,114,115,116,119,120,123,127,128,131,134,136,140,143,144,145,146,147,148,149,159,161,162,165,169,224,226,227,240,242,243,244,245,246,247,248,249,252,253,255,257,258,260,263,264,265,266,272,283,286,287,291,292,294,300,301,304,314,318,322,396,397,404,405,407,408],rare:[12,405],rate:407,rather:[38,43,44,50,93,405,407],ratio:[23,25,27,28,36,38,50,407],raw:[9,332],re:[16,171,192,209,292,294,325,404],reach:0,read:[2,3,7,8,9,11,12,14,15,21,22,23,38,47,48,50,171,179,180,200,206,208,212,213,294,296,299,300,301,302,303,304,305,313,316,319,320,326,328,329,331,332,354,355,356,359,369,372,397,404,405,407],read_chunk:[9,10,12,22,38,47,48,49,50,287,306,322,407],read_chunk_aspect_ratio:[38,50],read_chunk_aspect_ratio_soft_constraint:[38,50],read_chunk_el:[10,38,49,50],read_chunk_elements_soft_constraint:[38,50],read_chunk_shap:[10,38,48,50,404],read_chunk_shape_soft_constraint:[38,50],read_chunk_templ:[22,48,52],read_context:404,read_funct:404,read_futur:406,read_param:404,readabl:[294,320],reader:[17,332],readi:[109,112,204,331,340],readm:16,readresult:[171,179,180,181,182,183,206,208,213],real:[247,264,292,397,404,408],rebuild:16,receiv:[15,18,109,112],recent:[0,93,107,118,199,200,202,208,238,246,405],recheck:[7,8,9,10,12],recheck_cached_data:[7,8,9,10,12,406],recheck_cached_metadata:[7,9,10,12],recommend:[10,16,301,302,303,304,316,328,342,405,407],recomput:404,record:[199,202,204,213],rectangular:[3,10,15],recurs:407,reduc:[16,300],refer:[0,4,5,6,7,8,9,10,12,13,14,16,17,18,19,20,93,192,209,292,325,331,405,407,408],reflect:[208,299,309,319,331,359],regardless:[7,8,9,10,12,405],region:[3,10,15,405,406],regist:[12,103,105,111],regular:[22,23,331,332,405,407],rel:[10,101,204,405,407],relat:[16,18,398,403],relationship:15,reli:408,relianc:17,remain:[9,12,15,93,100,192,206,292,341,348,405,407],remot:[0,13,14],remov:94,remove_done_callback:[103,111,359,367],reorder:101,replac:[192,292,405],repo:16,repositori:16,repres:[9,10,12,15,20,21,68,113,140,214,236,319,331,342,405,407,408],represent:[15,17,18,19,20,21,22,23,26,35,39,49,53,54,55,56,57,58,59,60,61,64,78,79,122,124,139,149,150,168,186,187,191,193,201,211,242,248,249,263,268,273,274,290,342,345,353,379,405,407,408],request:[18,103,106,208,354,355,404],requestor:18,requir:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,120,147,319,397,406,407,408],reserv:15,resiz:[9,10,12,15,68,85,86],resolut:[9,10,278,397,406,407],resolv:[104,113,205,208,213,294,321,405],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,56,57,58,62,63,192,206,209,268,274,292,325,397,404,408],respect:[3,10,25,36,68,94,97,331,405],restrict:205,result:[9,10,11,12,14,15,16,21,93,94,95,102,103,104,109,110,112,113,115,143,146,169,171,179,180,192,199,200,202,205,208,209,236,238,239,243,265,269,292,293,296,297,299,301,302,303,304,316,319,325,327,328,331,332,339,340,359,368,404,405,406,407],retain:[25,36,101,209,325,405,407],retain_context:[171,209,325],retri:18,retriev:[18,56,62,406],revalid:[7,8,9,10,12],revers:[101,140,141,240,241,266,267,294,295],rewrit:10,rfc:8,right:[15,18,115,143],rightarrow:15,roll:332,root:17,round:[3,10,15,405],row:[38,43,50,319,407],rs1:17,rtf:16,rule:[15,16],run:[18,104,109,112,404],runtim:[13,18],rw:313,s:[9,11,13,16,21,391,392,393,394,405,408],safe:[14,17,18,331],same:[0,8,9,10,11,12,15,16,20,63,95,97,98,99,100,192,209,292,307,312,322,325,331,332,359,404,405,406,407],satisfi:[10,319,405],satur:14,save:13,scalar:[93,97,98,99,100,301,303,304,316,328,331,370,379,380,405],scale:[10,253],scale_index:[10,397,406],scale_metadata:[10,397,406],scheama:11,schema:[1,2,3,4,5,6,7,8,14,15,21,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,287,292,294,322,397,404,408],scheme:[17,18,19,20],script:16,sdist:16,sdk:18,se_curl:[13,16],second:[7,15,109,112,194,198,208],section:[13,14,18],secur:[13,18],segment:[397,406,407],sel:405,select:[1,2,3,4,5,6,7,8,21,84,89,92,93,94,95,97,98,99,100,101,114,118,126,132,253,375,376,408],self:[24,35,36,37,48,49,50,52,55,58,61,62,69,70,71,76,77,78,79,81,82,84,87,88,89,91,93,95,96,97,98,99,100,101,102,105,106,107,108,109,110,111,112,115,116,117,118,119,123,124,126,132,139,141,142,143,144,145,146,150,162,163,166,167,168,169,173,175,185,187,188,189,191,192,195,199,200,201,202,203,204,205,208,209,212,213,225,226,228,230,238,239,241,242,243,244,245,246,249,252,258,259,261,262,263,264,265,267,268,269,270,271,272,274,277,284,285,288,289,290,292,293,295,296,297,298,299,300,301,302,303,304,305,311,315,316,317,318,319,321,323,324,325,327,328,329,331,334,337,339,343,349,350,353,360,361,362,365,366,367,368,380,385],semant:[17,92,93,96,102,140,145,162,169,240,245,258,265,266,271,284,293,294,299,303,315,316,327,328,375,405],separ:[0,7,8,9,12,13,16,18,185,199,200,202,208,213,296,331,405,408],sequenc:[11,25,36,38,50,92,93,95,97,98,99,100,115,118,120,121,140,142,143,147,148,247,264,292,375,376,397,404,405],serial:15,serv:[10,115,143,253,404,407],server:[13,18],servic:18,set:[3,4,10,11,13,16,18,20,21,38,50,92,95,97,171,208,247,264,292,325,375,397,404,405],set_except:[236,238],set_result:[236,239],setup:[14,16],sever:[16,103],sha256:16,shape:[15,22,23,25,27,28,33,34,36,38,48,50,52,114,120,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,147,160,166,240,243,244,245,246,247,254,258,261,264,265,266,279,287,288,292,294,296,297,298,299,300,301,302,303,304,306,307,308,309,310,311,312,315,316,319,322,323,325,327,328,331,397,404,405,407],shape_soft_constraint:[23,25,34,36,38,49,50,407],shard:[397,406,407],shard_bit:[10,397,406],shard_data_encod:10,shardingspec:10,share:[0,14,17,18,21,56,63,192,206,209,292,325,397,404],shift:[92,98,99,375],shlex:16,shortcut:405,shorthand:[303,304],should:[7,8,9,10,12,13,16,18,19,20,104,331,357,358,404,407],show:16,shuffl:[9,12,294,297,298,299,300,307,315,322,325,327,397,407],sign:[15,21,391,392,393,394,408],signal:236,signific:331,silent:405,similar:[15,96,97,102,162,169,258,265,284,293,315,316,327,328,405],simpler:3,simplest:16,simpli:[94,104,138,359,404,405],simultan:16,sinc:[7,15,93,109,112,131,194,198,208,404,405,406],singl:[8,9,10,12,13,15,21,93,101,114,117,171,199,200,202,205,208,213,214,217,247,253,264,274,292,308,342,388,397,404,405,406,407,408],single_input_dimens:[15,228,234],singleton:[21,94,396],size:[0,9,10,12,15,16,25,36,68,74,77,78,80,84,89,91,114,120,138,140,147,167,240,262,266,289,294,324,331,397,404,406,407],skip:[16,325,354,355,405],slice:[93,97,114,115,131,140,143,405,406],slower:[9,12],slowest:[9,12],small:[1,10],smallest:[3,10,12],snappi:[9,12,16],so:[16,406],soft:[0,1,2,3,4,5,6,7,8,9,10,12,22,23,25,28,30,34,36,38,42,43,44,48,50,52,407,408],sole:93,some:[9,15,332,342,407],sourc:[15,16,294,301,302,303,304,316,328,331,359,369],space:[16,21,22,46,93,94,95,96,97,98,99,100,101,102,114,136,140,143,144,145,146,147,148,149,159,161,162,165,169,247,264,291,292,396,397,404,405,407],spec:[14,56,59,60,61,63,64,65,67,93,170,171,184,185,186,187,188,189,190,191,192,193,206,207,209,242,243,255,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,307,325,377,397],special:[0,10,15,16,18,21,81,82,87,88,93,174,177,390,405,407],specif:[0,1,2,3,4,5,6,7,8,9,12,16,17,18,19,20,21,53,56,59,60,171,184,192,193,194,197,209,211,266,275,276,278,279,281,287,292,325,342,397,407,408],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,36,38,43,44,48,50,52,53,68,72,73,74,92,93,97,98,99,100,101,102,104,109,112,114,115,117,118,120,131,143,147,148,169,171,172,174,179,192,194,199,202,204,205,206,208,209,213,236,238,239,240,247,250,251,253,256,264,265,275,276,278,279,281,282,287,292,293,294,305,319,325,327,328,331,342,346,349,350,354,356,357,358,372,375,396,397,404,405,407,408],speed:4,split:16,squar:405,ssl:[13,16,18],sslkeylogfil:13,stack:[7,16,408],stage:[21,332],staic:11,staleness_bound:[208,354,356],stamp:[171,179,180,181,206,208,213],standard:[12,16],start:[3,16,21,93,101,103,117,205,332,338,341,375,404,405],startup:16,state:[171,179,180,182,206,208,213],stderr:13,step:[15,93,331,405],still:[8,10,12,15,116,119,332,341,404,405],stop:[93,405],storag:[4,5,6,8,9,10,12,14,18,21,22,38,43,44,50,171,194,195,196,213,266,282,292,294,312,322,331,332,359,397,407],store:[8,9,10,12,13,15,19,21,171,184,185,188,189,190,193,194,197,199,200,202,203,204,205,206,207,208,209,210,211,212,213,253,266,282,292,294,305,306,307,308,311,312,322,331,332,342,372,397,404,406,407],str:[21,56,62,68,72,73,74,75,78,79,90,92,95,114,117,120,124,133,140,147,150,157,171,172,174,177,178,180,184,185,187,188,190,193,194,196,199,200,201,202,207,208,211,213,228,230,233,240,247,249,264,266,274,292,294,313,342,344,347,348,351,375,379,382,383,385,397,403,404,405],strictli:[115,143],stride:[3,15,92,97,147,149,168,214,216,217,223,375,405],string:[0,3,7,8,9,10,12,14,15,17,18,19,20,21,78,79,90,124,150,172,174,177,178,187,197,201,249,274,305,342,348,398,403,407,408],strip:[205,348,407],strip_context:[192,292,325],strip_prefix:16,strip_prefix_length:205,strong:14,studio:16,style:[18,19,20,92,93,96,97,102,131,140,145,162,169,240,245,246,258,265,266,271,272,284,293,294,299,303,315,316,327,328,375],sub:[8,16,406],subarrai:12,subdivid:407,subject:[294,321,359],subscript:[301,302,303,304,316,328,405,406],subsequ:[11,93,331,359,397,404,405],subset:[15,16,103,114,118,405],subtyp:[7,9,12,19,407,408],succe:15,success:[112,200,337,339],successfulli:[109,236,239,331,340,359],suffic:15,suffici:405,suffix:[184,185],suitabl:[1,2,3,4,5,6,7,8,9,10,12,16,397,407,408],sum:405,suppli:406,support:[0,2,3,7,8,9,10,11,14,15,16,17,18,19,20,92,103,131,170,171,199,202,204,213,253,294,303,320,330,332,370,405,406,407,408],surviv:331,synchron:[103,199,200,202,294,296,301,302,303,304,316,319,328,331,332,339,404,406],syntax:[0,8,17,18,20,301,302,303,304,316,328,342,405,407],system:[13,16,18,19,331],t:[16,113,140,141,192,206,240,241,266,267,292,294,295,404],tabl:[15,20],take:[10,13,14,38,50,247,264,292,397,404,405,407],taken:[10,11,48,52,71,407],target:[15,23,25,29,30,36,38,50,92,101,375,407],temporari:[10,16],tensoprstor:13,tensorflow:[12,370],tensorstor:[0,1,2,3,4,5,6,7,8,13,15,16,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,398,399,400,401,402,403,404,405,406,407,408],tensorstore_bazel_build_opt:16,tensorstore_bazel_compilation_mod:16,tensorstore_bazel_startup_opt:16,tensorstore_bazelisk:16,tensorstore_ca_bundl:13,tensorstore_ca_path:13,tensorstore_curl_verbos:13,tensorstore_gcs_http_url:[13,18],tensorstore_prebuilt_dir:16,tensorstore_system_lib:[13,16],term:[93,96,102,162,169,258,265,284,293,303,315,316,327,328,405],termin:[398,403],test:[20,103],th:[93,115,143,405],than:[0,7,8,9,10,12,15,16,38,43,44,50,93,118,208,354,356,404,405,407],thei:[9,11,20,61,116,119,398,403,404,405],them:331,therefor:[10,13],thi:[0,1,3,7,8,9,10,12,13,15,16,17,18,19,38,50,56,62,63,66,67,91,96,102,103,110,114,115,119,131,138,140,141,143,144,146,162,163,166,167,169,171,199,200,202,204,205,208,210,212,213,241,247,250,258,259,261,262,264,265,267,272,275,276,278,279,281,284,285,287,288,289,292,293,294,295,296,299,300,303,304,307,312,315,316,317,318,322,323,324,327,328,329,331,332,342,346,349,350,351,359,379,380,397,404,405,406,407],third:407,those:[103,300],though:[116,119,404],thread:[0,103,104,109,112,199,200,202,296,319,404],three:[10,15,115,143,407],through:[14,15,18,19,140],throughput:14,tie:3,time:[7,8,9,10,12,15,194,196,198,208,404,407],timedelta:12,timeout:[103,109,112,359,366,368],timeouterror:[109,112],timestamp:[171,179,181,194,195,404],timestampedstoragegener:[171,179,180,181,194,195,196,197,198,206,208,213,404],tl:16,tmp:[16,17,185,186,187,188,189,190,191,201,203,332,406],to_json:[22,23,35,49,53,55,57,58,59,61,66,114,139,140,168,184,191,240,263,266,290,342,353,379,385],togeth:12,tool:16,top:[2,406,407],total:[0,114,138,140,167,240,262,266,289,294,324],total_bytes_limit:[0,7,9,10,12,58,62,64,66,67,404,406],toward:405,traceback:[93,107,118,199,200,202,208,238,246,405],track:331,traffic:13,trail:[348,407],transact:[14,20,21,199,202,204,205,206,208,210,212,213,301,302,303,304,312,316,319,326,328,329,332,333,334,335,336,337,338,339,340,341,359,397],transform:[1,2,3,4,5,6,7,8,9,10,11,12,14,21,93,94,95,96,97,98,99,100,101,102,103,114,116,119,140,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,165,168,169,214,215,216,217,224,240,243,244,245,246,247,258,264,265,266,269,270,271,272,284,290,291,292,293,294,297,298,299,300,301,302,304,305,309,315,325,327,372,396,397,404,406,408],translat:[3,9,12,15,92,98,99,100,375,405],translate_backward_bi:[92,98,375],translate_bi:[92,93,95,99,116,142,144,290,291,375],translate_to:[92,100,375],transpos:[92,94,101,140,141,240,241,266,267,294,295,375,405],treat:[104,208,405,407],tree:16,trip:15,truncat:405,trust:13,ts:[9,10,11,12,45,46,48,49,52,58,62,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,107,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,165,168,169,171,176,185,186,187,188,189,190,191,192,193,199,200,201,202,203,204,205,206,207,208,209,211,212,213,215,216,217,236,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,260,263,264,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,314,315,316,318,319,322,325,327,328,331,332,343,344,345,346,347,348,349,350,351,352,353,372,376,390,396,397,404,405,406],tupl:[22,23,27,28,33,34,41,42,43,44,114,125,127,128,129,130,131,133,135,137,140,142,152,153,154,155,156,157,158,160,163,166,236,237,240,247,253,259,261,264,266,278,285,288,292,294,308,317,323,342,347,397,404,405],turbo:16,tutori:14,two:[8,15,21,22,23,24,37,194,195,331,332,342,343,359,391,392,393,394,405,407,408],txn:[171,212,303,331,332],type:[0,1,2,3,7,8,11,14,62,103,113,140,170,240,247,255,264,266,280,292,297,298,301,303,304,305,310,311,316,328,331,332,342,369,370,371,372,379,380,381,386,387,388,389,391,392,393,394,395,397,398,401,403,404,405,406,407,408],u1:12,u2:[12,279,287],u4:[294,299,300,315,325,327],u8:12,u:[351,352],udunits2:[342,407],uint16:[9,10,12,21,277,287,332,399,408],uint32:[9,10,12,21,103,294,296,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,315,316,319,322,325,327,328,331,372,400,404,406,408],uint64:[9,10,12,21,397,401,406,408],uint8:[4,5,6,9,10,12,21,247,248,249,252,255,260,263,264,277,280,402,408],um:278,unbind_context:[184,192,209,292,325],unbound:[11,15,21,48,52,68,75,81,82,87,88,91,120,147,192,292,390],unchang:[97,98,99,100,192,206,292,405],unchunk:10,uncommit:[319,331,332],uncondition:[102,169,265,293,327,328,405],unconstrain:[253,397],under:[2,7,12,17,405],underli:[4,5,6,7,8,9,10,11,12,14,15,19,140,266,282,292,294,312,331,332,359,397,407],unequ:405,unicod:[21,403,408],uniform:[3,14,407],uniqu:[15,63,404],unit:[11,21,240,247,253,264,266,278,292,294,308,342,343,344,345,346,347,348,349,350,351,352,353,397,404],unix:[7,18,19,20,109,112,194,198,208],unknown:[15,247,253,264,292,307,308,311,397,404,407],unlabel:[9,15,68,90,120,147,407],unless:[10,18,342,405,407],unlik:[93,103,405],unmatch:15,unmodifi:404,unpickl:404,unregist:[103,111],unset:11,unshar:[397,404],unshard:407,unsign:[21,399,400,401,402,408],unspecifi:[3,9,10,12,15,23,32,38,48,50,52,179,180,182,197,205,208,240,254,255,260,266,280,286,291,404,405,407],unsuccessfulli:[106,112,236,238],until:[103,109,112,199,200,202,204,213,332,341,359,404,405],unus:[4,5,6],up:[10,16,18,407],updat:[10,22,23,36,50,184,192,240,242,250,251,252,253,254,256,260,264,266,268,274,277,292,294,321,325],upon:[103,105,405],upper:[9,12,15,68,72,73,74,75,81,86,87,94,114,120,125,128,129,131,140,147,153,154,155,172,174,177,405],url:[14,16,17,18,19,20,171,184,186,193,206,211],us:[0,1,3,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,40,62,63,68,92,93,97,98,99,100,103,104,110,113,114,116,119,131,140,171,185,192,206,208,209,212,236,240,243,244,245,246,258,265,266,269,270,271,272,282,284,292,293,294,297,298,299,300,301,302,303,304,307,312,315,316,319,322,325,326,327,328,329,331,332,337,341,342,348,354,357,359,369,375,395,396,397,398,403,404,405,406,407],usag:332,user:17,usezlib:[9,407],ustr:[21,403,408],usual:[174,178,405],utf:408,util:16,v1:[15,397,406],v2:15,v3:15,v4:15,valid:[0,9,15,38,50,93,97,194,198,208,405,407],valu:[0,1,3,4,7,8,11,13,14,15,21,38,50,61,68,71,81,82,87,88,91,93,97,103,113,118,171,179,180,181,182,183,184,185,188,189,190,192,193,194,197,199,200,202,203,204,205,206,207,208,209,210,211,212,213,228,229,235,240,247,253,256,264,266,281,282,292,294,308,311,312,325,331,342,346,395,397,404,405,406,407,408],valueerror:[48,52,76,118,131,205,243,244,245,246,258,265,269,270,271,272,284,293],variabl:[16,18,21,398,403],varieti:19,varlength:9,vector:[15,92,93,102,114,120,140,142,147,169,240,265,266,293,294,327,328,375],verbos:[13,405],veri:[10,116,119],verifi:18,version:[3,13,16,194,197,404,405],via:[1,3,9,10,11,12,14,43,44,405],view:[2,3,14,140,141,171,212,224,240,241,266,267,294,295,297,298,299,300,305,315,327,329,372,377,378,404,405,406],vindex:[92,93,102,140,145,169,240,245,246,258,265,266,271,272,284,293,294,299,300,303,304,315,316,327,328,375],virtual:[2,3,14,16,140,294,297,298,299,300,315,327,377,378,404],virtual_chunk:[21,354,357,404],virtualchunkedreadparamet:[21,354,355,356,404],virtualchunkedwriteparamet:[21,357,358,404],visibl:332,visual:16,volum:10,voxel:[10,407],voxel_offset:[10,397,406],vv:16,w:[15,313],wa:[7,13,56,67,109,112,206,208,250,337,397,404,406],wai:[0,9,10,12,14,16,404,407],wait:[103,331,404,406],well:[10,11,12,93,370,397],were:405,what:7,wheel:16,when:[0,1,2,3,4,5,6,7,8,11,15,16,93,104,110,204,208,253,301,302,303,304,316,319,328,331,340,359,404,405,407,408],where:[0,3,10,11,13,15,21,93,96,102,113,115,131,143,145,147,149,162,169,247,264,292,397,404,405,407,408],wherebi:405,whether:[61,72,73,74,75,93,103,107,108,114,120,127,128,140,147,152,153,325,332,335,336,338,341,405],which:[0,2,3,7,8,9,10,11,12,13,14,15,16,18,20,48,52,56,64,65,66,67,68,97,98,99,100,104,114,140,194,198,208,250,300,331,337,342,351,359,369,375,404,405,406,407],whitespac:[348,407],wide:17,window:[13,16,17],wireshark:13,wise:[2,9,12,21,404],wish:404,with_transact:[171,206,212,294,303,329,331,332,397,404],within:[0,3,7,8,9,10,12,15,18,19,20,22,38,43,50,109,112,171,184,190,205,207,208,294,319,404,405,407],without:[9,15,18,92,98,99,100,185,199,200,202,206,208,213,331,332,375,397,404,405,406,407],won:[192,206,292],work:[16,18],workspac:16,worst:[9,10],would:[95,131],writabl:[294,330],write:[2,7,8,9,11,12,14,15,18,21,22,23,38,50,51,52,171,199,202,204,206,208,212,213,294,300,301,302,303,304,305,313,316,319,326,328,329,330,331,332,357,359,369,372,397,404,405,407],write_chunk:[9,10,12,22,38,49,50,51,52,287,306,322,407],write_chunk_aspect_ratio:[38,50],write_chunk_aspect_ratio_soft_constraint:[38,50],write_chunk_el:[10,38,50],write_chunk_elements_soft_constraint:[38,50],write_chunk_shap:[10,38,50,52],write_chunk_shape_soft_constraint:[38,49,50],write_chunk_templ:[22,48,52],write_context:404,write_funct:404,write_futur:406,writeback:[0,14,331,357,358],writefutur:[21,103,294,331,359,360,361,362,363,364,365,366,367,368],written:[12,16,21,247,264,292,294,311,331,397,404,406],x:[9,10,12,15,16,68,72,73,74,75,78,79,84,89,90,93,94,95,96,97,98,99,100,101,102,104,115,116,117,118,122,126,132,133,143,144,146,149,151,157,159,161,165,168,176,206,243,244,245,246,254,258,265,269,270,291,297,298,301,302,309,376,397,405,406],xcode:16,xre:10,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:16,xyz:10,xz:[9,16],y:[9,10,12,15,93,94,95,96,97,98,99,100,101,102,115,116,117,118,121,122,126,132,133,143,144,149,151,157,159,161,165,168,176,206,243,244,245,246,254,258,265,269,270,291,297,298,301,302,309,397,405,406],yet:[294,311,319],you:[7,9,10,12,13,16,18,63,331,397,404,406],your:16,yre:10,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:16,z:[9,10,15,93,95,96,97,98,99,100,101,102,115,116,117,118,122,133,143,149,151,157,159,161,165,168,243,244,245,246,254,258,265,269,270,297,298,301,302,397,405,406],zarr:[2,3,7,14,251,269,270,271,272,275,276,279,281,284,287,293,294,296,299,300,303,304,306,307,310,311,315,316,319,322,325,327,328,331,397,405,407],zarr_format:[12,294,299,300,315,325,327,397],zarrai:12,zero:[7,9,10,12,15,68,80,93,94,120,147,247,264,292,397,404,405,407],zlib:[9,12,16],zre:10,zstd:[9,12,16]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[93,405],"class":[22,56,171,407],"new":[9,10,12,397],"public":[23,53,68,103,179,214,224,228,236,354,357,359,379],accessor:[22,56,57,59,68,103,114,140,171,172,184,194,240,266,294,332,342],ad:[93,405],align:15,all:[115,143],an:397,api:[16,21],arithmet:342,arrai:[1,9,10,12,93,405],aspect:[9,12],asynchron:21,authent:18,avif:4,block:103,broadcast:15,build:16,c:[12,16],ca:[13,18],cach:404,callback:103,cast:2,certif:[13,18],checkout:16,chunk:[7,9,10,12,22,407],cloud:13,codec:[9,10,12,407],compar:405,comparison:[22,23,172,194,240,266,342],compress:[9,10],compressor:12,concept:14,configur:13,constraint:[9,10,12],construct:405,constructor:[22,23,53,56,59,68,103,114,140,171,172,179,184,194,214,228,236,240,266,332,342,375,379],context:0,core:21,creat:[9,10,12,397],credenti:13,data:[9,10,12,21,294],dataset:406,debug:13,depend:16,develop:16,differ:405,dimens:[9,10,93,115,143,405,407],document:16,domain:[9,10,12,15],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20],element:[9,12],ellipsi:[93,405],encod:10,environ:13,error:93,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,20,45,46,48,49,52,58,62,63,64,66,67,68,69,70,72,73,74,75,76,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,102,104,107,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,165,168,169,171,176,185,187,188,189,190,191,192,193,199,200,201,202,203,204,205,207,208,209,211,212,213,215,216,217,238,239,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,260,263,264,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,290,291,292,293,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,314,318,319,322,325,331,343,344,345,346,347,348,349,350,351,352,353,372,376,390,396,397,407],exist:397,explicit:[9,10,12],express:405,file:[7,17],fill:[9,10,12],flyem:406,fortran:12,framework:0,from:16,fulli:[115,143],gc:18,geometr:114,get:14,googl:13,hemibrain:406,highlight:14,http:13,i:[171,294],index:[15,21,93,114,140,240,266,294,405],instal:16,integ:[93,405],interfac:103,interv:[93,405],ipython:16,janelia:406,jpeg:5,json:[8,10,408],kei:[17,18,19,20],label:[115,143],layer:[11,19],layout:[9,10,12,407],librari:16,limit:[9,10,12,17],local:[16,406],map:[9,10,12],member:[23,53,68,103,179,214,224,228,236,354,357,359,379],memori:20,method:15,mix:[115,143],mode:405,mutat:[184,240,266],n5:[9,406],neuroglancer_precomput:10,non:331,numpi:405,o:[171,294],oindex:405,open:397,oper:[22,23,68,92,114,172,184,194,240,266,332,342,375],order:12,outer:405,output:15,packag:16,parti:16,pickl:404,png:6,proxi:13,publish:16,pypi:16,python:16,ratio:[9,12],raw:10,read:[10,406],refer:21,represent:[68,114,140,171,184,228,240,266],request:13,requir:16,run:16,scalar:12,schema:[9,10,11,12,407],segment:10,select:[9,10,12,405],semant:331,separ:10,sequenc:114,setter:22,shape:[9,10,12],shard:10,shell:16,singl:7,singleton:[93,405],space:15,spec:[21,408],specif:10,stack:11,start:14,storag:[7,13,19],store:[17,18,20],string:[68,114,140,171,184,228,240,266],structur:12,style:405,support:[12,21,404],synchron:171,templat:22,tensorstor:[9,10,11,12,14,397],test:[16,18],third:16,tl:[13,18],transact:[171,294,331,404],transform:[15,405],tutori:406,type:[9,10,12,21,294],unconstrain:[9,10,12],unit:[9,10,407],unlabel:[115,143],unshard:10,valu:[9,10,12,17,18,19,20],variabl:13,vector:405,view:21,vindex:405,virtual:21,when:[9,10,12],without:16,write:[10,406],zarr:12}})